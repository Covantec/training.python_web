# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, Cris Ewing
# This file is distributed under the same license as the Internet Programming with Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Internet Programming with Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-06 08:43-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../outline.rst:5
msgid "Course Outline"
msgstr ""

#: ../outline.rst:12
msgid "This course takes place over 10 sessions. Each session is three hours long. Each session contains lecture material and exercises you will type at a python prompt. Each session has associated assignments which you will complete between sessions."
msgstr ""

#: ../outline.rst:19
msgid "Session 1 - TCP/IP and Sockets"
msgstr ""

#: ../outline.rst:21
msgid "We will begin with a disucssion of the fundamental concepts and structures that underly the internet and networked computing. We'll learn about the TCP/IP stack (Internet Protocol Suite) and gain some insights into how that model manifests in real life. We will then dive into sockets and learn how to use them to communicate between processes on a single machine, or across a network."
msgstr ""

#: ../outline.rst:28
msgid "Along the way, we'll build a basic Echo server and client to demonstrate the processes we've learned. By the end of the session, we'll be sending messages and receiving replies."
msgstr ""

#: ../outline.rst:33
#: ../outline.rst:54
#: ../outline.rst:102
#: ../outline.rst:128
msgid "References"
msgstr ""

#: ../outline.rst:35
msgid "`Python Library - socket <http://docs.python.org/2/library/socket.html>`_"
msgstr ""

#: ../outline.rst:36
msgid "`Socket Programming How-to <http://docs.python.org/2/howto/sockets.html>`_"
msgstr ""

#: ../outline.rst:37
msgid "`Python Module of the Week - socket <http://pymotw.com/2/socket/>`_"
msgstr ""

#: ../outline.rst:41
msgid "Session 2 - Web Protocols"
msgstr ""

#: ../outline.rst:43
msgid "Protocols are the languages of the Internet. They govern how machines speak to one another. We will focus on finding both the similarities and differences between protocols. Can you use the inherent qualities of each to determine which is appropriate for a given purpose?"
msgstr ""

#: ../outline.rst:48
msgid "Along the way, we'll build a simple web server. Using the HTTP protocol and extending what we learned in the previous session we'll create an HTTP server that allows us to serve files and directories from our own computers. By the end of the day, you'll be browsing your filesystem with your own web browser."
msgstr ""

#: ../outline.rst:56
msgid "`smtplib <http://docs.python.org/2/library/smtplib.html>`_"
msgstr ""

#: ../outline.rst:57
msgid "`imaplib <http://docs.python.org/2/library/imaplib.html>`_"
msgstr ""

#: ../outline.rst:58
#: ../outline.rst:108
msgid "`httplib <http://docs.python.org/2/library/httplib.html>`_"
msgstr ""

#: ../outline.rst:59
msgid "`urllib <http://docs.python.org/2/library/urllib.html>`_"
msgstr ""

#: ../outline.rst:60
msgid "`urllib2 <http://docs.python.org/2/library/urllib2.html>`_"
msgstr ""

#: ../outline.rst:62
msgid "If you have more curiosity about other Python Standard Library implementations of internet protocols, you should read Doug Hellmann's Python Module Of The Week on `Internet Protocols and Support`_. His entries on these libraries are clear and concise and have some great code examples."
msgstr ""

#: ../outline.rst:70
msgid "Session 3 - CGI and WSGI"
msgstr ""

#: ../outline.rst:72
msgid "In this class we will explore ways of moving data from HTTP requests into the dynamic scripts that process data. We will begin by looking at the original specification for passing data, CGI (Common Gateway Interface). We'll look at the benefits and drawbacks of the specification, and use it to create some simple interactions."
msgstr ""

#: ../outline.rst:78
msgid "Then we will investigate a more modern take on the same problem, WSGI (Web Services Gateway Interface). We'll see the ways in which WSGI is similar to CGI, and look at the ways in which it differs. We'll create a simple interaction using WSGI and see what benefits and drawbacks it confers."
msgstr ""

#: ../outline.rst:85
msgid "Session 4 - APIs and Mashups"
msgstr ""

#: ../outline.rst:87
msgid "The internet is a treasure trove of information. But meaning can be hard to find among all that data. Mashups offer a way to combine data from disparate sources in order to derive meaning. Data online can be offered in forms ripe for consumption. APIs built in XMLRPC, SOAP or REST offer rich tools for extraction, but even simple websites can be scraped using tools like BeautifulSoup."
msgstr ""

#: ../outline.rst:94
msgid "We'll explore the differences between various 'Web Services' formats, learning how to serve information and consume it. We'll also explore using BeautifulSoup to help extract information from the sea of HTML in the wild."
msgstr ""

#: ../outline.rst:98
msgid "Along the way, we'll create a mashup of our own, using the tools we learn to build a script that can produce derived meaning out of data we find online."
msgstr ""

#: ../outline.rst:104
msgid "`BeautifulSoup <http://www.crummy.com/software/BeautifulSoup/bs4/doc/>`_"
msgstr ""

#: ../outline.rst:105
msgid "`requests <http://requests.readthedocs.org/en/latest/>`_"
msgstr ""

#: ../outline.rst:106
msgid "`json <http://docs.python.org/2/library/json.html>`_"
msgstr ""

#: ../outline.rst:107
msgid "`geocoder <http://geocoder.readthedocs.org/en/latest/>`_"
msgstr ""

#: ../outline.rst:109
msgid "`htmlparser <http://docs.python.org/2/library/htmlparser.html>`_"
msgstr ""

#: ../outline.rst:110
msgid "`xmlrpclib <http://docs.python.org/2/library/xmlrpclib.html>`_"
msgstr ""

#: ../outline.rst:111
msgid "`DocXMLRPCServer <http://docs.python.org/2/library/docxmlrpcserver.html>`_"
msgstr ""

#: ../outline.rst:115
msgid "Session 5 - MVC Applications and Data Persistence"
msgstr ""

#: ../outline.rst:117
msgid "In this session we will begin by introducing the idea of an MVC (*Model View Controller*) application.  We'll discuss this popular application design pattern and talk about the ways in which it does and does not apply to the world of web applications."
msgstr ""

#: ../outline.rst:122
msgid "We'll get started with our first application, a learning journal written in the lignt but powerful *Pyramid* web framework. We'll set up a development environment and install the framework and dependencies. We'll create our first *models* and experiment with persisting data to a database."
msgstr ""

#: ../outline.rst:132
msgid "Preparation for Session 6"
msgstr ""

#: ../outline.rst:134
msgid "In preparation for session 6, please read the following materials:"
msgstr ""

#: ../outline.rst:136
msgid "`Jinja2 Template Tutorial <presentations/template_tutorial-plain.html>`_"
msgstr ""

#: ../outline.rst:138
msgid "`HTML5 Site Layout Tutorial <http://www.smashingmagazine.com/2009/08/04/designing-a-html-5-layout-from-scratch/>`_"
msgstr ""

#: ../outline.rst:142
msgid "Session 6 - Pyramid Views, Renderers and Forms"
msgstr ""

#: ../outline.rst:144
msgid "In this session we extend our understanding of the MVC design pattern by learning how Pyramid implements the *view* and *controller* aspects."
msgstr ""

#: ../outline.rst:147
msgid "Pyramid *views* represent the *controller* part of the MVC pattern, and we'll create a number of them. We'll also learn how Pyramid uses *routes* to properly connect the *path* requested by a client to the *views* run by a server."
msgstr ""

#: ../outline.rst:151
msgid "We'll meet with Pyramid's *renderers*, the *view* in MVC.  We'll start by using a built-in renderer that simply turns view data into strings sent back to the client as plain text responses.  We'll then install a template-based renderer and use the *jinja2* template language to create visible HTML pages the brower can load to show our learning journal entries."
msgstr ""

#: ../outline.rst:158
msgid "Prepraration for Session 7"
msgstr ""

#: ../outline.rst:160
msgid "In preparation for session 7, please read up on getting started with `Heroku and Python`_.  We'll be deploying our learning journal to Heroku by the end of that session."
msgstr ""

#: ../outline.rst:167
msgid "Sesstion 7 - Pyramid Authentication and Deployment"
msgstr ""

#: ../outline.rst:169
msgid "In this session we will learn the basic elements of access control: authentication and authorization. We'll learn how Pyramid implements these two aspects of security, and will implement a basic security policy for our learning journal."
msgstr ""

#: ../outline.rst:174
msgid "Once complete, we will deploy our application to Heroku.  We'll make a few changes to how our app is configured to fit with the Heroku model and will be able to see our application in action by the end of the session."
msgstr ""

#: ../outline.rst:178
msgid "Time permitting, we will enhance our application with a few special features such as Markdown formatting, and code highlighting. A list of potential future enhancements will give you plenty to think about for the rest of the week."
msgstr ""

#: ../outline.rst:184
msgid "Preparation for Session 8"
msgstr ""

#: ../outline.rst:186
msgid "Please walk through this tutorial before session 8 begins."
msgstr ""

#: ../outline.rst:188
msgid "`An Introduction to Django <presentations/django_intro.html>`_"
msgstr ""

#: ../outline.rst:192
msgid "Session 8 - Basic Django"
msgstr ""

#: ../outline.rst:194
msgid "In this class we'll get introduced to arguably the most popular full-stack Python web framework, Django. We'll install the framework, learn about how to get it running and how to get started creating your very own app."
msgstr ""

#: ../outline.rst:198
msgid "We'll be learning about the Django ORM and how Django Models can help shield developers from much of the complexity of SQL."
msgstr ""

#: ../outline.rst:201
msgid "During the week leading up to this session, we'll `get started building`_ a blog app in Django. We'll learn how to use the tools Django provides to explore and interact with your models while designing them. We'll also get a brief introduction to the Django admin, Django's *killer feature*."
msgstr ""

#: ../outline.rst:209
msgid "Along the way, we'll build a nicely functional blog application.  We'll learn about model relationships, customizing the Django admin, and adding front-end views so users can see our work. We'll even learn how we can update our database code and keep it in sync with our progressing development work."
msgstr ""

#: ../outline.rst:214
msgid "Along the way we'll learn that the Django template language is quite similar to the Jinja2 language (in fact, Jinja2 was modelled on the Django version). We'll also get a chance to learn a bit more about the features that the Django test framework provides over and above the standard Python ``unittest`` library."
msgstr ""

#: ../outline.rst:222
msgid "Session 9 - Extending Django"
msgstr ""

#: ../outline.rst:224
msgid "During this session, we will continue our exploration of Django, and of pair programming. Students will pair up and work together to implement one or more feature extending the basic Django app we created previously."
msgstr ""

#: ../outline.rst:228
msgid "Finally, we'll discuss some of the strengths and weaknesses of Django.  What makes it a good choice for some projects but not for others."
msgstr ""

#: ../outline.rst:232
msgid "Preparation for Session 10"
msgstr ""

#: ../outline.rst:234
msgid "In preparation for session 10, you'll need to sign up for an account with Amazon Web Services."
msgstr ""

#: ../outline.rst:239
msgid "Session 10 - Deploying Django"
msgstr ""

#: ../outline.rst:241
msgid "During this session, we will deploy our Django application to Amazon Web Services. To do so, we'll use a popular Python-based configuration management tool, Ansible."
msgstr ""

