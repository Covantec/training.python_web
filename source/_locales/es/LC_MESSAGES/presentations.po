# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, Cris Ewing
# This file is distributed under the same license as the Internet
# Programming with Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Internet Programming with Python 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-06 07:25-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.0\n"

#: ../source/presentations/django_intro.rst:6
msgid "An Introduction To Django"
msgstr ""

#: ../source/presentations/django_intro.rst:13
msgid ""
"In this tutorial, you'll walk through creating a very simple microblog "
"application using Django."
msgstr ""

#: ../source/presentations/django_intro.rst:17
msgid "Practice Safe Development"
msgstr ""

#: ../source/presentations/django_intro.rst:19
msgid ""
"We'll install Django and any other packages we use with it in a "
"virtualenv."
msgstr ""

#: ../source/presentations/django_intro.rst:21
msgid ""
"This will ensure that it is isolated from everything else we do in class "
"(and vice versa)"
msgstr ""

#: ../source/presentations/django_intro.rst:24
msgid "Remember the basic format for creating a virtualenv::"
msgstr ""

#: ../source/presentations/django_intro.rst:32
msgid "Set Up a VirtualEnv"
msgstr ""

#: ../source/presentations/django_intro.rst:34
msgid "Start by creating your virtualenv::"
msgstr ""

#: ../source/presentations/django_intro.rst:41
msgid "Then, activate it::"
msgstr ""

#: ../source/presentations/django_intro.rst:49
msgid "Install Django"
msgstr ""

#: ../source/presentations/django_intro.rst:51
msgid "Finally, install Django 1.7.4 using ``pip``::"
msgstr ""

#: ../source/presentations/django_intro.rst:63
msgid "Our Project"
msgstr ""

#: ../source/presentations/django_intro.rst:65
msgid ""
"Everything in Django stems from the *project*. To get started learning, "
"we'll create one. We'll use a script installed by Django, ``django-"
"admin.py``:"
msgstr ""

#: ../source/presentations/django_intro.rst:72
msgid "If you're on windows, that command is slightly different:"
msgstr ""

#: ../source/presentations/django_intro.rst:78
msgid ""
"If you run into trouble at this stage, please consult the `installation "
"documentation`_. For windows users, see also `this guide to installation "
"on Windows`_"
msgstr ""

#: ../source/presentations/django_intro.rst:86
msgid ""
"This will create a folder called 'mysite'. The folder contains the "
"following structure::"
msgstr ""

#: ../source/presentations/django_intro.rst:97
msgid ""
"If what you see doesn't match that, you're using an older version of "
"Django. Make sure you've installed 1.7.4"
msgstr ""

#: ../source/presentations/django_intro.rst:102
msgid "What Got Created"
msgstr ""

#: ../source/presentations/django_intro.rst:104
msgid ""
"**outer *mysite* folder**: this is just a container and can be renamed or"
" moved at will"
msgstr ""

#: ../source/presentations/django_intro.rst:106
msgid ""
"**inner *mysite* folder**: this is your project directory. It should not "
"be renamed."
msgstr ""

#: ../source/presentations/django_intro.rst:108
msgid "**__init__.py**: magic file that makes *mysite* a python package."
msgstr ""

#: ../source/presentations/django_intro.rst:109
msgid ""
"**settings.py**: file which holds configuration for your project, more "
"soon."
msgstr ""

#: ../source/presentations/django_intro.rst:110
msgid ""
"**urls.py**: file which holds top-level URL configuration for your "
"project, more soon."
msgstr ""

#: ../source/presentations/django_intro.rst:112
msgid ""
"**wsgi.py**: binds a wsgi application created from your project to the "
"symbol ``application``"
msgstr ""

#: ../source/presentations/django_intro.rst:114
msgid "**manage.py**: a management control script."
msgstr ""

#: ../source/presentations/django_intro.rst:116
msgid "*django-admin* provides a hook for administrative tasks and abilities:"
msgstr ""

#: ../source/presentations/django_intro.rst:118
msgid "creating a new project or app"
msgstr ""

#: ../source/presentations/django_intro.rst:119
msgid "running the development server"
msgstr ""

#: ../source/presentations/django_intro.rst:120
msgid "executing tests"
msgstr ""

#: ../source/presentations/django_intro.rst:121
msgid "entering a python interpreter"
msgstr ""

#: ../source/presentations/django_intro.rst:122
msgid "entering a database shell session with your database"
msgstr ""

#: ../source/presentations/django_intro.rst:123
msgid "much much more (run ``django-admin`` without an argument)"
msgstr ""

#: ../source/presentations/django_intro.rst:125
msgid ""
"*manage.py* wraps this functionality, adding the full environment of your"
" project."
msgstr ""

#: ../source/presentations/django_intro.rst:130
msgid "How *manage.py* Works"
msgstr ""

#: ../source/presentations/django_intro.rst:132
msgid "Look in the ``manage.py`` script Django created for you. You'll see this:"
msgstr ""

#: ../source/presentations/django_intro.rst:147
msgid ""
"The environmental var ``DJANGO_SETTINGS_MODULE`` is how the ``manage.py``"
" script is made aware of your project's environment. This is why you "
"shouldn't rename the project package."
msgstr ""

#: ../source/presentations/django_intro.rst:153
msgid "Development Server"
msgstr ""

#: ../source/presentations/django_intro.rst:155
msgid "At this point, you should be ready to use the development server::"
msgstr ""

#: ../source/presentations/django_intro.rst:161
msgid ""
"You'll see a scary warning about unapplied migrations.  Ignore it for a "
"moment. Instead, load ``http://localhost:8000`` in your browser. You "
"should see this:"
msgstr ""

#: ../source/presentations/django_intro.rst:170
msgid "**Do you?**"
msgstr ""

#: ../source/presentations/django_intro.rst:174
msgid "Connecting A Database"
msgstr ""

#: ../source/presentations/django_intro.rst:176
msgid ""
"Django supplies its own ORM (Object-Relational Mapper). This ORM sits on "
"top of the DB-API implementation you choose. You must provide connection "
"information through Django configuration."
msgstr ""

#: ../source/presentations/django_intro.rst:180
msgid ""
"All Django configuration takes place in ``settings.py`` in your project "
"folder."
msgstr ""

#: ../source/presentations/django_intro.rst:183
msgid "Edit your ``settings.py`` to match:"
msgstr ""

#: ../source/presentations/django_intro.rst:195
msgid ""
"There are other database settings, but they are not used with sqlite3, "
"we'll ignore them for now."
msgstr ""

#: ../source/presentations/django_intro.rst:198
msgid ""
"Django's ORM provides a layer of *abstraction* between you and SQL. You "
"write Python classes called *models* describing the objects that make up "
"your system. The ORM handles converting data from these objects into SQL "
"statements (and back). We'll learn much more about this in a bit."
msgstr ""

#: ../source/presentations/django_intro.rst:203
msgid ""
"The final step in preparing to work is to set up the database. You do "
"this by running *migrations*.  These migrations create the tables needed "
"to support the models that are required by Django out of the box."
msgstr ""

#: ../source/presentations/django_intro.rst:207
msgid "Run the following command:"
msgstr ""

#: ../source/presentations/django_intro.rst:220
msgid ""
"Great!  Now we can set up an initial user who'll be able to do anything, "
"a *superuser*.  Again, we'll use ``manage.py``:"
msgstr ""

#: ../source/presentations/django_intro.rst:232
msgid ""
"Notice that as you type your password, it will not appear on the screen."
"  Don't worry, it's actually being recorded.  You just can't see it (and "
"neither can that snoopy git looking over your shoulder)."
msgstr ""

#: ../source/presentations/django_intro.rst:237
msgid "Projects and Apps"
msgstr ""

#: ../source/presentations/django_intro.rst:239
msgid ""
"We've created a Django *project*. In Django a project represents a whole "
"website:"
msgstr ""

#: ../source/presentations/django_intro.rst:242
msgid "global configuration settings"
msgstr ""

#: ../source/presentations/django_intro.rst:243
msgid "inclusion points for additional functionality"
msgstr ""

#: ../source/presentations/django_intro.rst:244
msgid "master list of URL endpoints"
msgstr ""

#: ../source/presentations/django_intro.rst:246
msgid "A Django *app* encapsulates a unit of functionality:"
msgstr ""

#: ../source/presentations/django_intro.rst:248
msgid "A blog section"
msgstr ""

#: ../source/presentations/django_intro.rst:249
msgid "A discussion forum"
msgstr ""

#: ../source/presentations/django_intro.rst:250
msgid "A content tagging system"
msgstr ""

#: ../source/presentations/django_intro.rst:252
msgid "One *project* can (and likely will) consist of many *apps*"
msgstr ""

#: ../source/presentations/django_intro.rst:254
msgid "Django already includes some *apps* for you."
msgstr ""

#: ../source/presentations/django_intro.rst:258
msgid "They're in ``settings.py`` in the ``INSTALLED_APPS`` setting:"
msgstr ""

#: ../source/presentations/django_intro.rst:274
msgid "Our Class App"
msgstr ""

#: ../source/presentations/django_intro.rst:276
msgid ""
"We are going to build an *app* to add to our *project*. To start with our"
" app will be a simple blog. As stated above, an *app* represents a unit "
"within a system, the *project*. We have a project, we need to create an "
"*app*"
msgstr ""

#: ../source/presentations/django_intro.rst:280
msgid ""
"This is accomplished using ``manage.py``. In your terminal, make sure you"
" are in the *outer* mysite directory, where the file ``manage.py`` is "
"located. Then:"
msgstr ""

#: ../source/presentations/django_intro.rst:288
msgid "This should leave you with the following structure:"
msgstr ""

#: ../source/presentations/django_intro.rst:311
msgid ""
"Like our Pyramid site, Django divides up functionality by module. You'll "
"create ORM model classes in the ``models.py`` file, view code in the "
"``views.py`` file, and so on."
msgstr ""

#: ../source/presentations/django_intro.rst:315
msgid ""
"We'll start by defining the main Python class for our blog system, a "
"``Post``."
msgstr ""

#: ../source/presentations/django_intro.rst:319
msgid "Django Models"
msgstr ""

#: ../source/presentations/django_intro.rst:321
msgid ""
"Any Python class in Django that is meant to be persisted *must* inherit "
"from the Django ``Model`` class. This base class hooks in to the ORM "
"functionality converting Python code to SQL. You can override methods "
"from the base ``Model`` class to alter how this works or write new "
"methods to add functionality."
msgstr ""

#: ../source/presentations/django_intro.rst:326
msgid ""
"Learn more about `models "
"<https://docs.djangoproject.com/en/1.9/topics/db/models/>`_"
msgstr ""

#: ../source/presentations/django_intro.rst:330
msgid "Our Post Model"
msgstr ""

#: ../source/presentations/django_intro.rst:332
msgid ""
"Open the ``models.py`` file created in our ``myblog`` package. Add the "
"following:"
msgstr ""

#: ../source/presentations/django_intro.rst:348
msgid ""
"This code defines a subclass of the Django ``Model`` class and added a "
"bunch of attributes."
msgstr ""

#: ../source/presentations/django_intro.rst:351
msgid "These attributes are all instances of ``Field`` classes defined in Django"
msgstr ""

#: ../source/presentations/django_intro.rst:352
msgid "Field attributes on a model map to columns in a database table"
msgstr ""

#: ../source/presentations/django_intro.rst:353
msgid "The arguments you provide to each Field customize how it works"
msgstr ""

#: ../source/presentations/django_intro.rst:355
msgid "This means *both* how it operates in Django *and* how it is defined in SQL"
msgstr ""

#: ../source/presentations/django_intro.rst:357
msgid "There are arguments shared by all Field types"
msgstr ""

#: ../source/presentations/django_intro.rst:358
msgid "There are also arguments specific to individual types"
msgstr ""

#: ../source/presentations/django_intro.rst:360
msgid ""
"You can read much more about `Model Fields and options "
"<https://docs.djangoproject.com/en/1.9/ref/models/fields/>`_"
msgstr ""

#: ../source/presentations/django_intro.rst:363
msgid ""
"There are some features of our fields worth mentioning in specific. "
"Notice we have no field that is designated as the *primary key*"
msgstr ""

#: ../source/presentations/django_intro.rst:366
msgid ""
"You *can* make a field the primary key by adding ``primary_key=True`` in "
"the arguments"
msgstr ""

#: ../source/presentations/django_intro.rst:368
msgid ""
"If you do not, Django will **automatically** create one. This field is "
"always called ``id``"
msgstr ""

#: ../source/presentations/django_intro.rst:370
msgid ""
"No matter what the primary key field is called, its *value* is always "
"available on a model instance as the ``pk`` attribute: ``instance.pk``"
msgstr ""

#: ../source/presentations/django_intro.rst:375
msgid "Field Details"
msgstr ""

#: ../source/presentations/django_intro.rst:381
msgid "The required ``max_length`` argument is specific to ``CharField`` fields."
msgstr ""

#: ../source/presentations/django_intro.rst:382
msgid "It affects *both* the Python and SQL behavior of a field."
msgstr ""

#: ../source/presentations/django_intro.rst:383
msgid ""
"In python, it is used to *validate* supplied values during *model "
"validation*"
msgstr ""

#: ../source/presentations/django_intro.rst:384
msgid "In SQL it is used in the column definition: ``VARCHAR(128)``"
msgstr ""

#: ../source/presentations/django_intro.rst:390
msgid "Django also models SQL *relationships* as specific field types."
msgstr ""

#: ../source/presentations/django_intro.rst:391
msgid "The required positional argument is the class of the related Model."
msgstr ""

#: ../source/presentations/django_intro.rst:392
msgid ""
"By default, the reverse relation is implemented as the attribute "
"``<fieldname>_set``."
msgstr ""

#: ../source/presentations/django_intro.rst:394
msgid "You can override this by providing the ``related_name`` argument."
msgstr ""

#: ../source/presentations/django_intro.rst:401
msgid ""
"``auto_now_add`` is available on all date and time fields. It sets the "
"value of the field to *now* when an instance is first saved."
msgstr ""

#: ../source/presentations/django_intro.rst:403
msgid ""
"``auto_now`` is similar, but sets the value anew each time an instance is"
" saved."
msgstr ""

#: ../source/presentations/django_intro.rst:405
msgid ""
"Setting either of these will cause the ``editable`` attribute of a field "
"to be set to ``False``."
msgstr ""

#: ../source/presentations/django_intro.rst:407
msgid ""
"This does not mean you can't update these values, only that they will not"
" show in forms by default."
msgstr ""

#: ../source/presentations/django_intro.rst:416
msgid ""
"The argument ``blank`` is shared across all field types. The default is "
"``False``"
msgstr ""

#: ../source/presentations/django_intro.rst:418
msgid ""
"This argument affects only the Python behavior of a field, determining if"
" the field is *required*"
msgstr ""

#: ../source/presentations/django_intro.rst:420
msgid ""
"The related ``null`` argument affects the SQL definition of a field: is "
"the column NULL or NOT NULL"
msgstr ""

#: ../source/presentations/django_intro.rst:422
msgid ""
"Django recommends that you **not** use the ``null`` option for text "
"fields. It will automatically insert an empty string into the database if"
" the field is left blank."
msgstr ""

#: ../source/presentations/django_intro.rst:428
msgid "Installing Apps"
msgstr ""

#: ../source/presentations/django_intro.rst:430
msgid ""
"In order to use our new model, we need Django to know about our *app*. "
"This is accomplished by configuration in the ``settings.py`` file. Open "
"that file now, in your editor, and find the INSTALLED_APPS setting."
msgstr ""

#: ../source/presentations/django_intro.rst:434
msgid ""
"You extend Django functionality by *installing apps*. This is pretty "
"simple:"
msgstr ""

#: ../source/presentations/django_intro.rst:449
msgid ""
"Once Django is made aware of the existence of this new app, it can  make "
"a new *migration* that will set up the tables for this new class "
"automatically."
msgstr ""

#: ../source/presentations/django_intro.rst:459
msgid "And now you can run that migration to make the changes to your database:"
msgstr ""

#: ../source/presentations/django_intro.rst:472
msgid "The Django Shell"
msgstr ""

#: ../source/presentations/django_intro.rst:474
msgid "Django provides a management command ``shell``:"
msgstr ""

#: ../source/presentations/django_intro.rst:476
msgid ""
"Shares the same ``sys.path`` as your project, so all installed python "
"packages are present."
msgstr ""

#: ../source/presentations/django_intro.rst:478
msgid ""
"Imports the ``settings.py`` file from your project, and so shares all "
"installed apps and other settings."
msgstr ""

#: ../source/presentations/django_intro.rst:480
msgid ""
"Handles connections to your database, so you can interact with live data "
"directly."
msgstr ""

#: ../source/presentations/django_intro.rst:483
msgid ""
"The Django ``shell`` will use more advanced Python interpreters such as "
"``iPython`` if they are available. Let's go ahead and install iPython in "
"our ``djangoenv`` to get this advantage:"
msgstr ""

#: ../source/presentations/django_intro.rst:492
msgid "Let's explore the Model Instance API directly using this shell:"
msgstr ""

#: ../source/presentations/django_intro.rst:498
msgid "Instances of our model can be created by simple instantiation:"
msgstr ""

#: ../source/presentations/django_intro.rst:508
msgid "We can also validate that our new object is okay before we try to save it:"
msgstr ""

#: ../source/presentations/django_intro.rst:519
msgid "Django Model Managers"
msgstr ""

#: ../source/presentations/django_intro.rst:521
msgid ""
"We have to hook our ``Post`` to an author, which must be a ``User``. To "
"do this, we need to have an instance of the ``User`` class. We can use "
"the ``User`` *model manager* to run table-level operations like "
"``SELECT``."
msgstr ""

#: ../source/presentations/django_intro.rst:526
msgid ""
"All Django models have a *manager*. By default it is accessed through the"
" ``objects`` class attribute."
msgstr ""

#: ../source/presentations/django_intro.rst:529
msgid "Let's use the *manager* to get an instance of the ``User`` class:"
msgstr ""

#: ../source/presentations/django_intro.rst:539
msgid "And now our instance should validate properly:"
msgstr ""

#: ../source/presentations/django_intro.rst:548
msgid "Saving New Objects"
msgstr ""

#: ../source/presentations/django_intro.rst:550
msgid ""
"Our model has three date fields, two of which are supposed to be auto-"
"populated:"
msgstr ""

#: ../source/presentations/django_intro.rst:560
msgid ""
"Although we've instantiated a Post object, it doesn't have these values "
"yet. That's because a model is not *created* until it's saved into the "
"database. When we save our post, these fields will get values assigned:"
msgstr ""

#: ../source/presentations/django_intro.rst:574
msgid "Updating An Instance"
msgstr ""

#: ../source/presentations/django_intro.rst:576
msgid ""
"Models operate much like 'normal' python objects. To change the value of "
"a field, simply set the instance attribute to a new value. Call "
"``save()`` to persist the change:"
msgstr ""

#: ../source/presentations/django_intro.rst:589
msgid "Create a Few Posts"
msgstr ""

#: ../source/presentations/django_intro.rst:591
msgid ""
"Let's create a few more posts so we can explore the Django model manager "
"query API:"
msgstr ""

#: ../source/presentations/django_intro.rst:610
msgid "The Django Query API"
msgstr ""

#: ../source/presentations/django_intro.rst:612
msgid ""
"The *manager* on each model class supports a full-featured query API. API"
" methods take keyword arguments, where the keywords are special "
"constructions combining field names with field *lookups*.  The double-"
"underscore character separates the name of a field from the *lookup* "
"value."
msgstr ""

#: ../source/presentations/django_intro.rst:619
msgid "title__exact=\"The exact title\""
msgstr ""

#: ../source/presentations/django_intro.rst:620
msgid "text__contains=\"decoration\""
msgstr ""

#: ../source/presentations/django_intro.rst:621
msgid "id__in=range(1,4)"
msgstr ""

#: ../source/presentations/django_intro.rst:622
msgid "published_date__lte=datetime.datetime.now()"
msgstr ""

#: ../source/presentations/django_intro.rst:624
msgid ""
"Each keyword argument adds to the query that will be used to find "
"matching objects."
msgstr ""

#: ../source/presentations/django_intro.rst:629
msgid "QuerySets"
msgstr ""

#: ../source/presentations/django_intro.rst:631
msgid ""
"A ``QuerySet`` is a special type of object that maintains a relationship "
"to the database. Query API methods can be divided into two basic groups: "
"methods that return ``QuerySets`` and those that do not."
msgstr ""

#: ../source/presentations/django_intro.rst:635
msgid "The former may be chained without hitting the database:"
msgstr ""

#: ../source/presentations/django_intro.rst:647
msgid "Conversely, the latter will issue an SQL query when executed."
msgstr ""

#: ../source/presentations/django_intro.rst:656
msgid "QuerySets and SQL"
msgstr ""

#: ../source/presentations/django_intro.rst:658
msgid "If you are curious, you can see the SQL that a given QuerySet will use:"
msgstr ""

#: ../source/presentations/django_intro.rst:672
msgid "The SQL will vary depending on which DBAPI backend you use (yay ORM!!!)"
msgstr ""

#: ../source/presentations/django_intro.rst:674
msgid "Incidentally, using this as a way to learn SQL is not a bad idea."
msgstr ""

#: ../source/presentations/django_intro.rst:678
msgid "Exploring the QuerySet API"
msgstr ""

#: ../source/presentations/django_intro.rst:680
msgid "See https://docs.djangoproject.com/en/1.9/ref/models/querysets"
msgstr ""

#: ../source/presentations/django_intro.rst:701
msgid ""
"Do all of those make sense to you?  Especially consider the difference "
"between those last two results? Can you explain that?"
msgstr ""

#: ../source/presentations/django_intro.rst:706
msgid "Updating via QuerySets"
msgstr ""

#: ../source/presentations/django_intro.rst:708
msgid ""
"You can update all the objects in a QuerySet at the same time. Changes "
"are persisted without calling the ``save`` instance method:"
msgstr ""

#: ../source/presentations/django_intro.rst:731
msgid "Testing Our Model"
msgstr ""

#: ../source/presentations/django_intro.rst:733
msgid ""
"As with any project, we want to test our work. Django provides a testing "
"framework to allow this. Django supports both *unit tests* and "
"*doctests*. I strongly suggest using *unit tests*. You add tests for your"
" *app* to the file ``tests.py``, which should be at the same package "
"level as ``models.py``."
msgstr ""

#: ../source/presentations/django_intro.rst:738
msgid "Locate and open this file in your editor."
msgstr ""

#: ../source/presentations/django_intro.rst:742
msgid "Django TestCase Classes"
msgstr ""

#: ../source/presentations/django_intro.rst:744
msgid "**SimpleTestCase** is for basic unit testing with no ORM requirements"
msgstr ""

#: ../source/presentations/django_intro.rst:746
msgid ""
"**TransactionTestCase** is useful if you need to test transactional "
"actions (commit and rollback) in the ORM"
msgstr ""

#: ../source/presentations/django_intro.rst:749
msgid "**TestCase** is used when you require ORM access and a test client"
msgstr ""

#: ../source/presentations/django_intro.rst:751
msgid ""
"**LiveServerTestCase** launches the django server during test runs for "
"front-end acceptance tests."
msgstr ""

#: ../source/presentations/django_intro.rst:754
msgid ""
"Sometimes testing requires base data to be present. We need a User for "
"ours. Django provides *fixtures* to handle this need. Create a directory "
"called ``fixtures`` inside your ``myblog`` app directory. This new folder"
" should be adjacent to the ``tests.py`` file."
msgstr ""

#: ../source/presentations/django_intro.rst:761
msgid ""
"Copy the file ``myblog_test_fixture.json`` from the "
"``resources/session08`` into this directory, it contains users for our "
"tests."
msgstr ""

#: ../source/presentations/django_intro.rst:764
msgid "Now that we have a fixture, we need to instruct our tests to use it."
msgstr ""

#: ../source/presentations/django_intro.rst:766
msgid "Edit ``tests.py`` to look like this:"
msgstr ""

#: ../source/presentations/django_intro.rst:782
msgid "Our First Enhancement"
msgstr ""

#: ../source/presentations/django_intro.rst:784
msgid "Look at the way our Post represents itself in the Django shell:"
msgstr ""

#: ../source/presentations/django_intro.rst:795
msgid ""
"Wouldn't it be nice if the posts showed their titles instead? In Django, "
"the ``__str__`` method is used to determine how a Model instance "
"represents itself. Then, calling ``str(instance)`` gives the desired "
"result."
msgstr ""

#: ../source/presentations/django_intro.rst:799
msgid "Let's write a test that demonstrates our desired outcome:"
msgstr ""

#: ../source/presentations/django_intro.rst:814
msgid ""
"To run tests, use the ``test`` management command. Without arguments, it "
"will run all TestCases it finds in all installed *apps*. You can pass the"
" name of a single app to focus on those tests."
msgstr ""

#: ../source/presentations/django_intro.rst:818
msgid "Quit your Django shell and in your terminal run the test we wrote:"
msgstr ""

#: ../source/presentations/django_intro.rst:824
msgid "We have yet to implement this enhancement, so our test should fail:"
msgstr ""

#: ../source/presentations/django_intro.rst:844
msgid "Let's add an appropriate ``__str__`` method to our Post class."
msgstr ""

#: ../source/presentations/django_intro.rst:846
msgid "It will take ``self`` as its only argument"
msgstr ""

#: ../source/presentations/django_intro.rst:847
msgid "And it should return its own title as the result"
msgstr ""

#: ../source/presentations/django_intro.rst:848
msgid "Go ahead and take a stab at this in ``models.py``"
msgstr ""

#: ../source/presentations/django_intro.rst:858
msgid "Re-run the tests to see if that worked::"
msgstr ""

#: ../source/presentations/django_intro.rst:871
msgid "**YIPEEEE!**"
msgstr ""

#: ../source/presentations/django_intro.rst:875
msgid "What to Test"
msgstr ""

#: ../source/presentations/django_intro.rst:877
msgid ""
"In any framework, the question arises of what to test. Much of your app's"
" functionality is provided by framework tools. Does that need testing? I "
"*usually* don't write tests covering features provided directly by the "
"framework. I *do* write tests for functionality I add, and for places "
"where I make changes to how the default functionality works. This is "
"largely a matter of style and taste (and of budget)."
msgstr ""

#: ../source/presentations/django_intro.rst:884
msgid ""
"We've only begun to test our blog app. We'll be adding many more tests "
"later. In between, you might want to take a look at the `Django testing "
"documentation`_:"
msgstr ""

#: ../source/presentations/django_intro.rst:891
msgid "The Django Admin"
msgstr ""

#: ../source/presentations/django_intro.rst:893
msgid ""
"There are some who believe that Django has been Python's *killer app*. "
"And without doubt the Django Admin is a *killer feature* for Django. To "
"demonstrate this, we are going to set up the admin for our blog"
msgstr ""

#: ../source/presentations/django_intro.rst:897
msgid ""
"The Django Admin is, itself, an *app*, installed by default (as of 1.6). "
"Open the ``settings.py`` file from our ``mysite`` project package and "
"verify that you see it in the list:"
msgstr ""

#: ../source/presentations/django_intro.rst:908
msgid ""
"What we need now is to allow the admin to be seen through a web browser. "
"To do that, we'll have to add some URLs to our project."
msgstr ""

#: ../source/presentations/django_intro.rst:913
msgid "Django URL Resolution"
msgstr ""

#: ../source/presentations/django_intro.rst:915
msgid ""
"Like Pyramid, Django has a system for dispatching requests to code: the "
"*urlconf*."
msgstr ""

#: ../source/presentations/django_intro.rst:917
msgid "A urlconf is an iterable of calls to the ``django.conf.urls.url`` function"
msgstr ""

#: ../source/presentations/django_intro.rst:918
msgid "This function takes:"
msgstr ""

#: ../source/presentations/django_intro.rst:920
msgid "a regexp *rule*, representing the URL"
msgstr ""

#: ../source/presentations/django_intro.rst:921
msgid "a ``callable`` to be invoked (or a name identifying one)"
msgstr ""

#: ../source/presentations/django_intro.rst:922
msgid "an optional *name* kwarg, used to *reverse* the URL"
msgstr ""

#: ../source/presentations/django_intro.rst:923
msgid "other optional arguments we will skip for now"
msgstr ""

#: ../source/presentations/django_intro.rst:925
msgid ""
"The function returns a *resolver* that matches the request path to the "
"callable"
msgstr ""

#: ../source/presentations/django_intro.rst:928
msgid ""
"I said above that a urlconf is an iterable. That iterable is generally "
"built by calling the ``django.conf.urls.patterns`` function. It's best to"
" build it that way, but in reality, any iterable will do."
msgstr ""

#: ../source/presentations/django_intro.rst:932
msgid ""
"However, the name you give this iterable is **not flexible**. Django will"
" load the urlconf named ``urlpatterns`` that it finds in the file named "
"in ``settings.ROOT_URLCONF``."
msgstr ""

#: ../source/presentations/django_intro.rst:936
msgid ""
"Many Django add-on *apps*, like the Django Admin, come with their own "
"urlconf. It is standard to include these urlconfs by rooting them at some"
" path in your site."
msgstr ""

#: ../source/presentations/django_intro.rst:940
msgid ""
"You can do this by using the ``django.conf.urls.include`` function as the"
" callable in a ``url`` call:"
msgstr ""

#: ../source/presentations/django_intro.rst:949
msgid "Including the Admin"
msgstr ""

#: ../source/presentations/django_intro.rst:951
msgid ""
"We can use this to add *all* the URLs provided by the Django admin in one"
" stroke."
msgstr ""

#: ../source/presentations/django_intro.rst:954
msgid "verify the following lines in ``urls.py``:"
msgstr ""

#: ../source/presentations/django_intro.rst:966
msgid "We can now view the admin.  We'll use the Django development server."
msgstr ""

#: ../source/presentations/django_intro.rst:970
msgid ""
"In your terminal, use the ``runserver`` management command to start the "
"development server:"
msgstr ""

#: ../source/presentations/django_intro.rst:987
msgid "Viewing the Admin"
msgstr ""

#: ../source/presentations/django_intro.rst:989
msgid "Load ``http://localhost:8000/admin/``.  You should see this:"
msgstr ""

#: ../source/presentations/django_intro.rst:997
msgid "Login with the name and password you created before."
msgstr ""

#: ../source/presentations/django_intro.rst:1001
msgid "The Admin Index"
msgstr ""

#: ../source/presentations/django_intro.rst:1003
msgid ""
"The index will provide a list of all the installed *apps* and each model "
"registered.  You should see this:"
msgstr ""

#: ../source/presentations/django_intro.rst:1012
msgid ""
"Click on ``Users``. Find yourself? Edit yourself, but **don't** uncheck "
"``superuser``."
msgstr ""

#: ../source/presentations/django_intro.rst:1017
msgid "Add Posts to the Admin"
msgstr ""

#: ../source/presentations/django_intro.rst:1019
msgid ""
"Okay, let's add our app model to the admin. Find the ``admin.py`` file in"
" the ``myblog`` package. Open it, add the following and save the file:"
msgstr ""

#: ../source/presentations/django_intro.rst:1029
msgid ""
"Reload the admin index page in your browser. You should now see a listing"
" for the Myblog app, and an entry for Posts."
msgstr ""

#: ../source/presentations/django_intro.rst:1032
msgid ""
"Visit the admin page for Posts. You should see the posts we created "
"earlier in the Django shell. Look at the listing of Posts. Because of our"
" ``__str__`` method we see a nice title."
msgstr ""

#: ../source/presentations/django_intro.rst:1036
msgid ""
"Are there other fields you'd like to see listed? Click on a Post, note "
"what is and is not shown."
msgstr ""

#: ../source/presentations/django_intro.rst:1041
msgid "Next Steps"
msgstr ""

#: ../source/presentations/django_intro.rst:1043
msgid ""
"We've learned a great deal about Django's ORM and Models. We've also "
"spent some time getting to know the Query API provided by model managers "
"and QuerySets."
msgstr ""

#: ../source/presentations/django_intro.rst:1046
msgid "We've also hooked up the Django Admin and noted some shortcomings."
msgstr ""

#: ../source/presentations/django_intro.rst:1048
msgid ""
"In class we'll learn how to put a front end on this, add new models, and "
"customize the admin experience."
msgstr ""

#: ../source/presentations/index.rst:5
msgid "Course Presentations"
msgstr ""

#: ../source/presentations/index.rst:12
msgid ""
"Each presentation is the material presented in class for a session of "
"this course."
msgstr ""

#: ../source/presentations/session01.rst:3
msgid "Session 01"
msgstr ""

#: ../source/presentations/session01.rst:9
msgid "**Networking and Sockets**"
msgstr ""

#: ../source/presentations/session01.rst:12
msgid "Computer Communications"
msgstr ""

#: ../source/presentations/session01.rst:16
msgid "Wherein we learn about how computers speak to each-other over a network."
msgstr ""

#: ../source/presentations/session01.rst:19
#: ../source/presentations/session02.rst:36
#: ../source/presentations/session03.rst:22
#: ../source/presentations/session06.rst:19
#: ../source/presentations/session07.rst:27
msgid "But First"
msgstr ""

#: ../source/presentations/session01.rst:24
msgid "Class presentations are available online for your use"
msgstr ""

#: ../source/presentations/session01.rst:28
msgid "https://github.com/UWPCE-PythonCert/training.python_web"
msgstr ""

#: ../source/presentations/session01.rst:33
msgid "Licensed with Creative Commons BY-NC-SA"
msgstr ""

#: ../source/presentations/session01.rst:37
msgid "You must attribute the work"
msgstr ""

#: ../source/presentations/session01.rst:38
msgid "You may not use the work for commercial purposes"
msgstr ""

#: ../source/presentations/session01.rst:39
msgid "You have to share your versions just like this one"
msgstr ""

#: ../source/presentations/session01.rst:41
msgid "Find mistakes? See improvements? Make a pull request."
msgstr ""

#: ../source/presentations/session01.rst:45
msgid "The rendered documentation is available as well:"
msgstr ""

#: ../source/presentations/session01.rst:47
msgid "http://uwpce-pythoncert.github.io"
msgstr ""

#: ../source/presentations/session01.rst:49
msgid "Please check frequently. I will update with great regularity"
msgstr ""

#: ../source/presentations/session01.rst:53
#: ../source/presentations/session01.rst:70
msgid "**Classroom Protocol**"
msgstr ""

#: ../source/presentations/session01.rst:58
msgid "Questions to ask:"
msgstr ""

#: ../source/presentations/session01.rst:62
msgid "What did you just say?"
msgstr ""

#: ../source/presentations/session01.rst:63
msgid "Please explain what we just did again?"
msgstr ""

#: ../source/presentations/session01.rst:64
msgid "How did that work?"
msgstr ""

#: ../source/presentations/session01.rst:65
msgid "Why didn't that work for me?"
msgstr ""

#: ../source/presentations/session01.rst:66
msgid "Is that a typo?"
msgstr ""

#: ../source/presentations/session01.rst:75
msgid "Questions **not** to ask:"
msgstr ""

#: ../source/presentations/session01.rst:79
msgid "**Hypotheticals**: What happens if I do X?"
msgstr ""

#: ../source/presentations/session01.rst:80
msgid "**Research**: Can Python do Y?"
msgstr ""

#: ../source/presentations/session01.rst:81
msgid "**Syllabus**: Are we going to cover Z in class?"
msgstr ""

#: ../source/presentations/session01.rst:82
msgid "**Marketing questions**: please just don't."
msgstr ""

#: ../source/presentations/session01.rst:83
msgid "**Performance questions**: Is Python fast enough?"
msgstr ""

#: ../source/presentations/session01.rst:84
msgid "**Unpythonic**: Why doesn't Python do it some other way?"
msgstr ""

#: ../source/presentations/session01.rst:85
msgid "**Show off**: Look what I just did!"
msgstr ""

#: ../source/presentations/session01.rst:91
msgid "Introductions"
msgstr ""

#: ../source/presentations/session01.rst:95
msgid "TCP/IP"
msgstr ""

#: ../source/presentations/session01.rst:100
#: ../source/presentations/session01.rst:116
msgid "http://en.wikipedia.org/wiki/Internet_Protocol_Suite"
msgstr ""

#: ../source/presentations/session01.rst:104
msgid "processes can communicate"
msgstr ""

#: ../source/presentations/session01.rst:105
msgid "inside one machine"
msgstr ""

#: ../source/presentations/session01.rst:106
msgid "between two machines"
msgstr ""

#: ../source/presentations/session01.rst:107
msgid "among many machines"
msgstr ""

#: ../source/presentations/session01.rst:120
msgid "Process divided into 'layers'"
msgstr ""

#: ../source/presentations/session01.rst:121
msgid "'Layers' are mostly arbitrary"
msgstr ""

#: ../source/presentations/session01.rst:122
msgid "Different descriptions have different layers"
msgstr ""

#: ../source/presentations/session01.rst:123
msgid "Most common is the 'TCP/IP Stack'"
msgstr ""

#: ../source/presentations/session01.rst:127
msgid "The TCP/IP Stack - Link"
msgstr ""

#: ../source/presentations/session01.rst:129
msgid "The bottom layer is the 'Link Layer'"
msgstr ""

#: ../source/presentations/session01.rst:133
msgid "Deals with the physical connections between machines, 'the wire'"
msgstr ""

#: ../source/presentations/session01.rst:135
msgid "Packages data for physical transport"
msgstr ""

#: ../source/presentations/session01.rst:137
msgid "Executes transmission over a physical medium"
msgstr ""

#: ../source/presentations/session01.rst:141
msgid "what that medium is is arbitrary"
msgstr ""

#: ../source/presentations/session01.rst:143
msgid "Implemented in the Network Interface Card(s) (NIC) in your computer"
msgstr ""

#: ../source/presentations/session01.rst:147
msgid "The TCP/IP Stack - Internet"
msgstr ""

#: ../source/presentations/session01.rst:149
msgid "Moving up, we have the 'Internet Layer'"
msgstr ""

#: ../source/presentations/session01.rst:153
msgid "Deals with addressing and routing"
msgstr ""

#: ../source/presentations/session01.rst:157
msgid "Where are we going and how do we get there?"
msgstr ""

#: ../source/presentations/session01.rst:159
msgid "Agnostic as to physical medium (IP over Avian Carrier - IPoAC)"
msgstr ""

#: ../source/presentations/session01.rst:161
msgid "Makes no promises of reliability"
msgstr ""

#: ../source/presentations/session01.rst:163
msgid "Two addressing systems"
msgstr ""

#: ../source/presentations/session01.rst:167
msgid "IPv4 (current, limited '192.168.1.100')"
msgstr ""

#: ../source/presentations/session01.rst:169
msgid ""
"IPv6 (future, 3.4 x 10^38 addresses, "
"'2001:0db8:85a3:0042:0000:8a2e:0370:7334')"
msgstr ""

#: ../source/presentations/session01.rst:176
msgid "That's 4.3 x 10^28 addresses *per person alive today*"
msgstr ""

#: ../source/presentations/session01.rst:180
msgid "The TCP/IP Stack - Transport"
msgstr ""

#: ../source/presentations/session01.rst:182
msgid "Next up is the 'Transport Layer'"
msgstr ""

#: ../source/presentations/session01.rst:186
msgid "Deals with transmission and reception of data"
msgstr ""

#: ../source/presentations/session01.rst:188
msgid "error correction, flow control, congestion management"
msgstr ""

#: ../source/presentations/session01.rst:190
msgid "Common protocols include TCP & UDP"
msgstr ""

#: ../source/presentations/session01.rst:192
msgid "TCP: Tranmission Control Protocol"
msgstr ""

#: ../source/presentations/session01.rst:194
msgid "UDP: User Datagram Protocol"
msgstr ""

#: ../source/presentations/session01.rst:196
msgid "Not all Transport Protocols are 'reliable'"
msgstr ""

#: ../source/presentations/session01.rst:200
msgid "TCP ensures that dropped packets are resent"
msgstr ""

#: ../source/presentations/session01.rst:202
msgid "UDP makes no such assurance"
msgstr ""

#: ../source/presentations/session01.rst:204
msgid "Reliability is slow and expensive"
msgstr ""

#: ../source/presentations/session01.rst:209
msgid "The 'Transport Layer' also establishes the concept of a **port**"
msgstr ""

#: ../source/presentations/session01.rst:216
msgid "IP Addresses designate a specific *machine* on the network"
msgstr ""

#: ../source/presentations/session01.rst:218
msgid ""
"A **port** provides addressing for individual *applications* in a single "
"host"
msgstr ""

#: ../source/presentations/session01.rst:221
msgid "192.168.1.100:80  (the *:80* part is the **port**)"
msgstr ""

#: ../source/presentations/session01.rst:223
msgid "[2001:db8:85a3:8d3:1319:8a2e:370:7348]:443 (*:443* is the **port**)"
msgstr ""

#: ../source/presentations/session01.rst:225
msgid ""
"This means that you don't have to worry about information intended for "
"your web browser being accidentally read by your email client."
msgstr ""

#: ../source/presentations/session01.rst:231
msgid ""
"There are certain **ports** which are commonly understood to belong to "
"given applications or protocols:"
msgstr ""

#: ../source/presentations/session01.rst:239
msgid "80/443 - HTTP/HTTPS"
msgstr ""

#: ../source/presentations/session01.rst:240
msgid "20 - FTP"
msgstr ""

#: ../source/presentations/session01.rst:241
msgid "22 - SSH"
msgstr ""

#: ../source/presentations/session01.rst:242
msgid "23 - Telnet"
msgstr ""

#: ../source/presentations/session01.rst:243
msgid "25 - SMTP"
msgstr ""

#: ../source/presentations/session01.rst:244
#: ../source/presentations/session04.rst:336
#: ../source/presentations/session04.rst:345
#: ../source/presentations/session05.rst:700
#: ../source/presentations/session05.rst:1068
msgid "..."
msgstr ""

#: ../source/presentations/session01.rst:246
msgid "These ports are often referred to as **well-known ports**"
msgstr ""

#: ../source/presentations/session01.rst:250
msgid "(see http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers)"
msgstr ""

#: ../source/presentations/session01.rst:254
msgid "Ports are grouped into a few different classes"
msgstr ""

#: ../source/presentations/session01.rst:258
msgid "Ports numbered 0 - 1023 are *reserved*"
msgstr ""

#: ../source/presentations/session01.rst:260
msgid "Ports numbered 1024 - 65535 are *open*"
msgstr ""

#: ../source/presentations/session01.rst:262
msgid "Ports numbered 1024 - 49151 may be *registered*"
msgstr ""

#: ../source/presentations/session01.rst:264
msgid "Ports numbered 49152 - 65535 are called *ephemeral*"
msgstr ""

#: ../source/presentations/session01.rst:268
msgid "The TCP/IP Stack - Application"
msgstr ""

#: ../source/presentations/session01.rst:270
msgid "The topmost layer is the 'Application Layer'"
msgstr ""

#: ../source/presentations/session01.rst:277
msgid "Deals directly with data produced or consumed by an application"
msgstr ""

#: ../source/presentations/session01.rst:279
msgid "Reads or writes data using a set of understood, well-defined **protocols**"
msgstr ""

#: ../source/presentations/session01.rst:281
msgid "HTTP, SMTP, FTP etc."
msgstr ""

#: ../source/presentations/session01.rst:283
msgid "Does not know (or need to know) about lower layer functionality"
msgstr ""

#: ../source/presentations/session01.rst:285
msgid "The exception to this rule is **endpoint** data (or IP:Port)"
msgstr ""

#: ../source/presentations/session01.rst:289
msgid "**this is where we live and work**"
msgstr ""

#: ../source/presentations/session01.rst:293
msgid "Sockets"
msgstr ""

#: ../source/presentations/session01.rst:295
msgid ""
"Think back for a second to what we just finished discussing, the TCP/IP "
"stack."
msgstr ""

#: ../source/presentations/session01.rst:302
msgid "The *Internet* layer gives us an **IP Address**"
msgstr ""

#: ../source/presentations/session01.rst:304
msgid "The *Transport* layer establishes the idea of a **port**."
msgstr ""

#: ../source/presentations/session01.rst:306
msgid "The *Application* layer doesn't care about what happens below..."
msgstr ""

#: ../source/presentations/session01.rst:308
msgid "*Except for* **endpoint data** (IP:Port)"
msgstr ""

#: ../source/presentations/session01.rst:310
msgid "A **Socket** is the software representation of that endpoint."
msgstr ""

#: ../source/presentations/session01.rst:312
msgid ""
"Opening a **socket** creates a kind of transceiver that can send and/or "
"receive *bytes* at a given IP address and Port."
msgstr ""

#: ../source/presentations/session01.rst:317
msgid "Sockets in Python"
msgstr ""

#: ../source/presentations/session01.rst:319
msgid ""
"Python provides a standard library module which provides socket "
"functionality. It is called **socket**."
msgstr ""

#: ../source/presentations/session01.rst:325
msgid ""
"The library is really just a very thin wrapper around the system "
"implementation of *BSD Sockets*"
msgstr ""

#: ../source/presentations/session01.rst:328
msgid "Let's spend a few minutes getting to know this module."
msgstr ""

#: ../source/presentations/session01.rst:330
msgid ""
"We're going to do this next part together, so open up a terminal and "
"start an iPython interpreter"
msgstr ""

#: ../source/presentations/session01.rst:336
msgid ""
"The Python sockets library allows us to find out what port a *service* "
"uses:"
msgstr ""

#: ../source/presentations/session01.rst:348
msgid ""
"You can also do a *reverse lookup*, finding what service uses a given "
"*port*:"
msgstr ""

#: ../source/presentations/session01.rst:358
msgid ""
"The sockets library also provides tools for finding out information about"
" *hosts*. For example, you can find out about the hostname and IP address"
" of the machine you are currently using:"
msgstr ""

#: ../source/presentations/session01.rst:372
msgid ""
"You can also find out about machines that are located elsewhere, assuming"
" you know their hostname. For example:"
msgstr ""

#: ../source/presentations/session01.rst:389
msgid ""
"The ``gethostbyname_ex`` method of the ``socket`` library provides more "
"information about the machines we are exploring:"
msgstr ""

#: ../source/presentations/session01.rst:407
msgid ""
"To create a socket, you use the **socket** method of the ``socket`` "
"library. It takes up to three optional positional arguments (here we use "
"none to get the default behavior):"
msgstr ""

#: ../source/presentations/session01.rst:421
msgid ""
"A socket has some properties that are immediately important to us. These "
"include the *family*, *type* and *protocol* of the socket:"
msgstr ""

#: ../source/presentations/session01.rst:438
msgid ""
"You might notice that the values for these properties are integers.  In "
"fact, these integers are **constants** defined in the socket library."
msgstr ""

#: ../source/presentations/session01.rst:444
msgid ""
"Let's define a method in place to help us see these constants. It will "
"take a single argument, the shared prefix for a defined set of constants:"
msgstr ""

#: ../source/presentations/session01.rst:450
#: ../source/presentations/session01.rst:705
msgid "(you can also find this in ``resources/session01/socket_tools.py``)"
msgstr ""

#: ../source/presentations/session01.rst:464
msgid "Socket Families"
msgstr ""

#: ../source/presentations/session01.rst:466
msgid ""
"Think back a moment to our discussion of the *Internet* layer of the "
"TCP/IP stack.  There were a couple of different types of IP addresses:"
msgstr ""

#: ../source/presentations/session01.rst:474
msgid "IPv4 ('192.168.1.100')"
msgstr ""

#: ../source/presentations/session01.rst:476
msgid "IPv6 ('2001:0db8:85a3:0042:0000:8a2e:0370:7334')"
msgstr ""

#: ../source/presentations/session01.rst:479
msgid ""
"The **family** of a socket corresponds to the *addressing system* it uses"
" for connecting."
msgstr ""

#: ../source/presentations/session01.rst:484
msgid "Families defined in the ``socket`` library are prefixed by ``AF_``:"
msgstr ""

#: ../source/presentations/session01.rst:502
msgid "*Your results may vary*"
msgstr ""

#: ../source/presentations/session01.rst:504
msgid ""
"Of all of these, the ones we care most about are ``2`` (IPv4) and ``30`` "
"(IPv6)."
msgstr ""

#: ../source/presentations/session01.rst:511
msgid ""
"When you are on a machine with an operating system that is Unix-like, you"
" will find another generally useful socket family: ``AF_UNIX``, or Unix "
"Domain Sockets. Sockets in this family:"
msgstr ""

#: ../source/presentations/session01.rst:517
msgid "connect processes **on the same machine**"
msgstr ""

#: ../source/presentations/session01.rst:519
msgid "are generally a bit slower than IPC connnections"
msgstr ""

#: ../source/presentations/session01.rst:521
msgid ""
"have the benefit of allowing the same API for programs that might run on "
"one machine __or__ across the network"
msgstr ""

#: ../source/presentations/session01.rst:524
msgid "use an 'address' that looks like a pathname ('/tmp/foo.sock')"
msgstr ""

#: ../source/presentations/session01.rst:529
msgid "What is the *default* family for the socket we created just a moment ago?"
msgstr ""

#: ../source/presentations/session01.rst:534
msgid "(remember we bound the socket to the symbol ``foo``)"
msgstr ""

#: ../source/presentations/session01.rst:536
msgid "How did you figure this out?"
msgstr ""

#: ../source/presentations/session01.rst:540
msgid "Socket Types"
msgstr ""

#: ../source/presentations/session01.rst:542
msgid "The socket *type* determines the semantics of socket communications."
msgstr ""

#: ../source/presentations/session01.rst:547
msgid "Look up socket type constants with the ``SOCK_`` prefix:"
msgstr ""

#: ../source/presentations/session01.rst:561
msgid ""
"The most common are ``1`` (Stream communication (TCP)) and ``2`` "
"(Datagram communication (UDP))."
msgstr ""

#: ../source/presentations/session01.rst:567
msgid "What is the *default* type for our generic socket, ``foo``?"
msgstr ""

#: ../source/presentations/session01.rst:571
msgid "Socket Protocols"
msgstr ""

#: ../source/presentations/session01.rst:573
msgid ""
"A socket also has a designated *protocol*. The constants for these are "
"prefixed by ``IPPROTO_``:"
msgstr ""

#: ../source/presentations/session01.rst:592
msgid ""
"The choice of which protocol to use for a socket is determined by the "
"*internet layer* protocol you intend to use. ``TCP``? ``UDP``? ``ICMP``? "
"``IGMP``?"
msgstr ""

#: ../source/presentations/session01.rst:599
msgid "What is the *default* protocol used by our generic socket, ``foo``?"
msgstr ""

#: ../source/presentations/session01.rst:603
msgid "Customizing Sockets"
msgstr ""

#: ../source/presentations/session01.rst:605
msgid ""
"These three properties of a socket correspond to the three positional "
"arguments you may pass to the socket constructor."
msgstr ""

#: ../source/presentations/session01.rst:611
msgid ""
"Using them allows you to create sockets with specific communications "
"profiles:"
msgstr ""

#: ../source/presentations/session01.rst:627
#: ../source/presentations/session02.rst:600
#: ../source/presentations/session04.rst:1092
msgid "Break Time"
msgstr ""

#: ../source/presentations/session01.rst:629
msgid "So far we have:"
msgstr ""

#: ../source/presentations/session01.rst:636
msgid "learned about the \"layers\" of the TCP/IP Stack"
msgstr ""

#: ../source/presentations/session01.rst:637
msgid "discussed *families*, *types* and *protocols* in sockets"
msgstr ""

#: ../source/presentations/session01.rst:638
msgid "learned how to create sockets with a specific communications profile."
msgstr ""

#: ../source/presentations/session01.rst:640
msgid ""
"When we return we'll learn how to find the communcations profiles of "
"remote sockets, how to connect to them, and how to send and receive "
"messages."
msgstr ""

#: ../source/presentations/session01.rst:643
msgid ""
"Take a few minutes now to clear your head (do not quit your python "
"interpreter)."
msgstr ""

#: ../source/presentations/session01.rst:648
msgid "Address Information"
msgstr ""

#: ../source/presentations/session01.rst:650
msgid ""
"When you are creating a socket to communicate with a remote service, the "
"remote socket will have a specific communications profile."
msgstr ""

#: ../source/presentations/session01.rst:656
msgid "The local socket you create must match that communications profile."
msgstr ""

#: ../source/presentations/session01.rst:658
msgid "How can you determine the *correct* values to use?"
msgstr ""

#: ../source/presentations/session01.rst:662
msgid "**You ask.**"
msgstr ""

#: ../source/presentations/session01.rst:666
msgid ""
"The function ``socket.getaddrinfo`` provides information about available "
"connections on a given host."
msgstr ""

#: ../source/presentations/session01.rst:676
msgid ""
"This provides all you need to make a proper connection to a socket on a "
"remote host. The value returned is a tuple of:"
msgstr ""

#: ../source/presentations/session01.rst:681
msgid "socket family"
msgstr ""

#: ../source/presentations/session01.rst:682
msgid "socket type"
msgstr ""

#: ../source/presentations/session01.rst:683
msgid "socket protocol"
msgstr ""

#: ../source/presentations/session01.rst:684
msgid "canonical name (usually empty, unless requested by flag)"
msgstr ""

#: ../source/presentations/session01.rst:685
msgid "socket address (tuple of IP and Port)"
msgstr ""

#: ../source/presentations/session01.rst:690
msgid ""
"Again, let's create a utility method in-place so we can see this in "
"action:"
msgstr ""

#: ../source/presentations/session01.rst:710
msgid ""
"Now, ask your own machine what possible connections are available for "
"'http':"
msgstr ""

#: ../source/presentations/session01.rst:730
msgid "What answers do you get?"
msgstr ""

#: ../source/presentations/session01.rst:753
msgid "Try a few other servers you know about."
msgstr ""

#: ../source/presentations/session01.rst:757
msgid "Client Side"
msgstr ""

#: ../source/presentations/session01.rst:764
msgid "Let's put this to use"
msgstr ""

#: ../source/presentations/session01.rst:766
msgid "We'll communicate with a remote server as a *client*"
msgstr ""

#: ../source/presentations/session01.rst:770
#: ../source/presentations/session01.rst:941
msgid "Construct a Socket"
msgstr ""

#: ../source/presentations/session01.rst:772
msgid ""
"We've already made a socket ``foo`` using the generic constructor without"
" any arguments.  We can make a better one now by using real address "
"information from a real server online [**do not type this yet**]:"
msgstr ""

#: ../source/presentations/session01.rst:794
msgid "Connecting a Socket"
msgstr ""

#: ../source/presentations/session01.rst:796
msgid ""
"Once the socket is constructed with the appropriate *family*, *type* and "
"*protocol*, we can connect it to the address of our remote server:"
msgstr ""

#: ../source/presentations/session01.rst:805
msgid "a successful connection returns ``None``"
msgstr ""

#: ../source/presentations/session01.rst:807
msgid "a failed connection raises an error"
msgstr ""

#: ../source/presentations/session01.rst:809
msgid ""
"you can use the *type* of error returned to tell why the connection "
"failed."
msgstr ""

#: ../source/presentations/session01.rst:813
msgid "Sending a Message"
msgstr ""

#: ../source/presentations/session01.rst:815
msgid ""
"Send a message to the server on the other end of our connection (we'll "
"learn in session 2 about the message we are sending):"
msgstr ""

#: ../source/presentations/session01.rst:829
msgid "the transmission continues until all data is sent or an error occurs"
msgstr ""

#: ../source/presentations/session01.rst:830
msgid "success returns ``None``"
msgstr ""

#: ../source/presentations/session01.rst:831
msgid "failure to send raises an error"
msgstr ""

#: ../source/presentations/session01.rst:832
msgid "the type of error can tell you why the transmission failed"
msgstr ""

#: ../source/presentations/session01.rst:833
msgid "but you **cannot** know how much, if any, of your data was sent"
msgstr ""

#: ../source/presentations/session01.rst:837
msgid "Messages Are Bytes"
msgstr ""

#: ../source/presentations/session01.rst:839
msgid "One detail from the previous code should stand out:"
msgstr ""

#: ../source/presentations/session01.rst:847
msgid "You can **only** send bytes through a socket, **never** unicode"
msgstr ""

#: ../source/presentations/session01.rst:861
msgid "Receiving a Reply"
msgstr ""

#: ../source/presentations/session01.rst:863
msgid ""
"Whatever reply we get is received by the socket we created. We can read "
"it back out (again, **do not type this yet**):"
msgstr ""

#: ../source/presentations/session01.rst:874
msgid ""
"The sole required argument is ``buffer_size`` (an integer). It should be "
"a power of 2 and smallish (~4096)"
msgstr ""

#: ../source/presentations/session01.rst:876
msgid ""
"It returns a byte string of ``buffer_size`` (or smaller if less data was "
"received)"
msgstr ""

#: ../source/presentations/session01.rst:878
msgid ""
"If the response is longer than ``buffer size``, you can call the method "
"repeatedly. The last bunch will be less than ``buffer size``."
msgstr ""

#: ../source/presentations/session01.rst:883
#: ../source/presentations/venv_intro.rst:312
msgid "Cleaning Up"
msgstr ""

#: ../source/presentations/session01.rst:885
msgid "When you are finished with a connection, you should always close it::"
msgstr ""

#: ../source/presentations/session01.rst:891
msgid "Putting it all together"
msgstr ""

#: ../source/presentations/session01.rst:893
msgid "First, connect and send a message:"
msgstr ""

#: ../source/presentations/session01.rst:910
msgid "Then, receive a reply, iterating until it is complete:"
msgstr ""

#: ../source/presentations/session01.rst:929
msgid "Server Side"
msgstr ""

#: ../source/presentations/session01.rst:936
msgid "What about the other half of the equation?"
msgstr ""

#: ../source/presentations/session01.rst:938
msgid "Let's build a server and see how that part works."
msgstr ""

#: ../source/presentations/session01.rst:943
msgid "**For the moment, stop typing this into your interpreter.**"
msgstr ""

#: ../source/presentations/session01.rst:948
msgid ""
"Again, we begin by constructing a socket. Since we are actually the "
"server this time, we get to choose family, type and protocol:"
msgstr ""

#: ../source/presentations/session01.rst:964
msgid "Bind the Socket"
msgstr ""

#: ../source/presentations/session01.rst:966
msgid ""
"Our server socket needs to be **bound** to an address. This is the IP "
"Address and Port to which clients must connect:"
msgstr ""

#: ../source/presentations/session01.rst:977
msgid ""
"**Terminology Note**: In a server/client relationship, the server *binds*"
" to an address and port. The client *connects*"
msgstr ""

#: ../source/presentations/session01.rst:981
msgid "Listen for Connections"
msgstr ""

#: ../source/presentations/session01.rst:983
msgid ""
"Once our socket is bound to an address, we can listen for attempted "
"connections:"
msgstr ""

#: ../source/presentations/session01.rst:992
msgid "The argument to ``listen`` is the *backlog*"
msgstr ""

#: ../source/presentations/session01.rst:993
msgid ""
"The *backlog* is the **maximum** number of connection requests that the "
"socket will queue"
msgstr ""

#: ../source/presentations/session01.rst:995
msgid "Once the limit is reached, the socket refuses new connections."
msgstr ""

#: ../source/presentations/session01.rst:999
msgid "Accept A Connection"
msgstr ""

#: ../source/presentations/session01.rst:1001
msgid "When a socket is listening, it can receive incoming connection requests:"
msgstr ""

#: ../source/presentations/session01.rst:1009
msgid ""
"The call to ``socket.accept()`` is a *blocking* call.  It will not return"
" values until a client *connects*"
msgstr ""

#: ../source/presentations/session01.rst:1011
msgid ""
"The ``connection`` returned by a call to ``accept`` is a **new socket**. "
"This new socket is used to communicate with the client"
msgstr ""

#: ../source/presentations/session01.rst:1013
msgid ""
"The ``client_address`` is a two-tuple of IP Address and Port for the "
"client socket"
msgstr ""

#: ../source/presentations/session01.rst:1015
msgid ""
"When a connection request is 'accepted', it is removed from the backlog "
"queue."
msgstr ""

#: ../source/presentations/session01.rst:1020
msgid "Communicate"
msgstr ""

#: ../source/presentations/session01.rst:1022
msgid ""
"The ``connection`` socket can now be used to receive messages from the "
"client which made the connection:"
msgstr ""

#: ../source/presentations/session01.rst:1029
msgid "It may also be used to return a reply:"
msgstr ""

#: ../source/presentations/session01.rst:1037
msgid "Clean Up"
msgstr ""

#: ../source/presentations/session01.rst:1039
msgid ""
"Once a transaction between the client and server is complete, the "
"``connection`` socket should be closed:"
msgstr ""

#: ../source/presentations/session01.rst:1049
msgid ""
"At this point, the ``server_socket`` can again accept a new client "
"connection."
msgstr ""

#: ../source/presentations/session01.rst:1052
msgid ""
"Note that the ``server_socket`` is *never* closed as long as the server "
"continues to run."
msgstr ""

#: ../source/presentations/session01.rst:1057
msgid "Getting the Flow"
msgstr ""

#: ../source/presentations/session01.rst:1062
msgid ""
"The flow of this interaction can be a bit confusing.  Let's see it in "
"action step-by-step."
msgstr ""

#: ../source/presentations/session01.rst:1070
msgid ""
"Open a second iPython interpreter and place it next to your first so you "
"can see both of them at the same time."
msgstr ""

#: ../source/presentations/session01.rst:1075
msgid "Create a Server"
msgstr ""

#: ../source/presentations/session01.rst:1077
msgid ""
"In your first python interpreter, create a server socket and prepare it "
"for connections:"
msgstr ""

#: ../source/presentations/session01.rst:1094
msgid ""
"At this point, you should **not** get back a prompt. The server socket is"
" waiting for a connection to be made."
msgstr ""

#: ../source/presentations/session01.rst:1099
msgid "Create a Client"
msgstr ""

#: ../source/presentations/session01.rst:1101
msgid ""
"In your second interpreter, create a client socket and prepare to send a "
"message:"
msgstr ""

#: ../source/presentations/session01.rst:1115
msgid "Before connecting, keep your eye on the server interpreter:"
msgstr ""

#: ../source/presentations/session01.rst:1123
msgid "Send a Message Client->Server"
msgstr ""

#: ../source/presentations/session01.rst:1125
msgid ""
"As soon as you made the connection above, you should have seen the prompt"
" return in your server interpreter. The ``accept`` method finally "
"returned a new connection socket."
msgstr ""

#: ../source/presentations/session01.rst:1132
msgid "When you're ready, type the following in the *client* interpreter:"
msgstr ""

#: ../source/presentations/session01.rst:1140
msgid "Receive and Respond"
msgstr ""

#: ../source/presentations/session01.rst:1142
msgid ""
"Back in your server interpreter, go ahead and receive the message from "
"your client:"
msgstr ""

#: ../source/presentations/session01.rst:1154
msgid "Send a message back, and then close up your connection:"
msgstr ""

#: ../source/presentations/session01.rst:1162
msgid "Finish Up"
msgstr ""

#: ../source/presentations/session01.rst:1164
msgid ""
"Back in your client interpreter, take a look at the response to your "
"message, then be sure to close your client socket too:"
msgstr ""

#: ../source/presentations/session01.rst:1177
msgid ""
"And now that we're done, we can close up the server socket too (back in "
"the server interpreter):"
msgstr ""

#: ../source/presentations/session01.rst:1189
msgid "You've run your first client-server interaction"
msgstr ""

#: ../source/presentations/session01.rst:1193
#: ../source/presentations/session02.rst:1472
#: ../source/presentations/session03.rst:1308
#: ../source/presentations/session04.rst:1817
#: ../source/presentations/session05.rst:1424
#: ../source/presentations/session06.rst:1470
#: ../source/presentations/session07.rst:1863
#: ../source/presentations/session08.rst:1446
#: ../source/presentations/session09.rst:107
msgid "Homework"
msgstr ""

#: ../source/presentations/session01.rst:1198
msgid ""
"Your homework assignment for this week is to take what you've learned "
"here and build a simple \"echo\" server."
msgstr ""

#: ../source/presentations/session01.rst:1204
msgid ""
"The server should automatically return to any client that connects "
"*exactly* what it receives (it should **echo** all messages)."
msgstr ""

#: ../source/presentations/session01.rst:1207
msgid ""
"You will also write a python script that, when run, will send a message "
"to the server and receive the reply, printing it to ``stdout``."
msgstr ""

#: ../source/presentations/session01.rst:1210
msgid "Finally, you'll do all of this so that it can be tested."
msgstr ""

#: ../source/presentations/session01.rst:1214
msgid "Your Task"
msgstr ""

#: ../source/presentations/session01.rst:1216
msgid "In our class repository, there is a folder ``resources/session01``."
msgstr ""

#: ../source/presentations/session01.rst:1221
msgid "Inside that folder, you should find:"
msgstr ""

#: ../source/presentations/session01.rst:1225
msgid "A file ``tasks.txt`` that contains these instructions"
msgstr ""

#: ../source/presentations/session01.rst:1227
msgid "A skeleton for your server in ``echo_server.py``"
msgstr ""

#: ../source/presentations/session01.rst:1229
msgid "A skeleton for your client script in ``echo_client.py``"
msgstr ""

#: ../source/presentations/session01.rst:1231
msgid "Some simple tests in ``tests.py``"
msgstr ""

#: ../source/presentations/session01.rst:1233
msgid "Your task is to make the tests pass."
msgstr ""

#: ../source/presentations/session01.rst:1237
msgid "Running the Tests"
msgstr ""

#: ../source/presentations/session01.rst:1239
msgid "To run the tests, you'll have to set the server running in one terminal:"
msgstr ""

#: ../source/presentations/session01.rst:1248
msgid "Then, in a second terminal, you will execute the tests:"
msgstr ""

#: ../source/presentations/session01.rst:1254
msgid "You should see output like this:"
msgstr ""

#: ../source/presentations/session01.rst:1263
#: ../source/presentations/session02.rst:1644
msgid "Submitting Your Homework"
msgstr ""

#: ../source/presentations/session01.rst:1265
#: ../source/presentations/session02.rst:1646
#: ../source/presentations/session03.rst:1345
msgid "To submit your homework:"
msgstr ""

#: ../source/presentations/session01.rst:1272
msgid "Create a new repository in GitHub.  Call it ``echo_sockets``."
msgstr ""

#: ../source/presentations/session01.rst:1274
msgid ""
"Put the ``echo_server.py``, ``echo_client.py`` and ``tests.py`` files in "
"this repository."
msgstr ""

#: ../source/presentations/session01.rst:1277
msgid "Send us an email with a link to your repository when you are done."
msgstr ""

#: ../source/presentations/session01.rst:1280
msgid "We will clone your repository and run the tests as described above."
msgstr ""

#: ../source/presentations/session01.rst:1282
msgid "And we'll make comments inline on your repository."
msgstr ""

#: ../source/presentations/session01.rst:1286
#: ../source/presentations/session08.rst:167
msgid "Going Further"
msgstr ""

#: ../source/presentations/session01.rst:1288
msgid ""
"In ``resources/session01/tasks.txt`` you'll find a few extra problems to "
"try."
msgstr ""

#: ../source/presentations/session01.rst:1293
msgid ""
"If you finish the first part of the homework in less than 3-4 hours give "
"one or more of these a whirl."
msgstr ""

#: ../source/presentations/session01.rst:1296
msgid ""
"They are not required, but if you include solutions in your repository, "
"we'll review your work."
msgstr ""

#: ../source/presentations/session02.rst:7
msgid "Session 02"
msgstr ""

#: ../source/presentations/session02.rst:13
msgid "Web Protocols"
msgstr ""

#: ../source/presentations/session02.rst:16
msgid "The Languages Computers Speak"
msgstr ""

#: ../source/presentations/session02.rst:21
msgid "Programming languages like Python are the languages we speak to computers."
msgstr ""

#: ../source/presentations/session02.rst:23
msgid "*Protocols* are the languages that computers speak to each-other."
msgstr ""

#: ../source/presentations/session02.rst:25
msgid "This sesson we'll look at a few of them and"
msgstr ""

#: ../source/presentations/session02.rst:29
msgid "Learn what makes them similar"
msgstr ""

#: ../source/presentations/session02.rst:30
msgid "Learn what makes them different"
msgstr ""

#: ../source/presentations/session02.rst:31
msgid "Learn about Python's tools for speaking them"
msgstr ""

#: ../source/presentations/session02.rst:32
msgid "Learn how to speak one (HTTP) ourselves"
msgstr ""

#: ../source/presentations/session02.rst:40
msgid "Questions from the Homework?"
msgstr ""

#: ../source/presentations/session02.rst:47
msgid "Examples of an echo server using ``select``"
msgstr ""

#: ../source/presentations/session02.rst:51
msgid "What is a Protocol?"
msgstr ""

#: ../source/presentations/session02.rst:56
msgid "**a set of rules or conventions**"
msgstr ""

#: ../source/presentations/session02.rst:58
msgid "**governing communications**"
msgstr ""

#: ../source/presentations/session02.rst:63
msgid "Life has lots of sets of rules for how to do things."
msgstr ""

#: ../source/presentations/session02.rst:67
msgid "What do you say when you get on the elevator?"
msgstr ""

#: ../source/presentations/session02.rst:69
msgid "What do you do on a first date?"
msgstr ""

#: ../source/presentations/session02.rst:71
msgid "What do you wear to a job interview?"
msgstr ""

#: ../source/presentations/session02.rst:73
msgid "What do (and don't) you talk about at a dinner party?"
msgstr ""

#: ../source/presentations/session02.rst:75
msgid "...?"
msgstr ""

#: ../source/presentations/session02.rst:84
msgid "http://blog.xkcd.com/2009/09/02/urinal-protocol-vulnerability/"
msgstr ""

#: ../source/presentations/session02.rst:89
msgid "Digital life has lots of rules too:"
msgstr ""

#: ../source/presentations/session02.rst:93
msgid "how to say hello"
msgstr ""

#: ../source/presentations/session02.rst:95
msgid "how to identify yourself"
msgstr ""

#: ../source/presentations/session02.rst:97
msgid "how to ask for information"
msgstr ""

#: ../source/presentations/session02.rst:99
msgid "how to provide answers"
msgstr ""

#: ../source/presentations/session02.rst:101
msgid "how to say goodbye"
msgstr ""

#: ../source/presentations/session02.rst:105
msgid "Real Protocol Examples"
msgstr ""

#: ../source/presentations/session02.rst:107
msgid "What does this look like in practice?"
msgstr ""

#: ../source/presentations/session02.rst:111
msgid ""
"SMTP (Simple Message Transfer Protocol) |br| "
"http://tools.ietf.org/html/rfc5321#appendix-D"
msgstr ""

#: ../source/presentations/session02.rst:114
msgid ""
"POP3 (Post Office Protocol) |br| "
"http://www.faqs.org/docs/artu/ch05s03.html"
msgstr ""

#: ../source/presentations/session02.rst:117
msgid ""
"IMAP (Internet Message Access Protocol) |br| "
"http://www.faqs.org/docs/artu/ch05s03.html"
msgstr ""

#: ../source/presentations/session02.rst:120
msgid ""
"HTTP (Hyper-Text Transfer Protocol) |br| "
"http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol"
msgstr ""

#: ../source/presentations/session02.rst:126
msgid "Over the next few slides we'll be looking at server/client interactions."
msgstr ""

#: ../source/presentations/session02.rst:131
msgid "Each interaction is line-based, each line represents one message."
msgstr ""

#: ../source/presentations/session02.rst:133
msgid "Messages from the Server to the Client are prefaced with ``S (<--)``"
msgstr ""

#: ../source/presentations/session02.rst:135
msgid "Messages from the Client to the Server are prefaced with ``C (-->)``"
msgstr ""

#: ../source/presentations/session02.rst:137
msgid "**All** lines end with the character sequence ``<CRLF>`` (``\\r\\n``)"
msgstr ""

#: ../source/presentations/session02.rst:141
msgid "SMTP"
msgstr ""

#: ../source/presentations/session02.rst:143
msgid "What does SMTP look like?"
msgstr ""

#: ../source/presentations/session02.rst:148
msgid "SMTP (Say hello and identify yourself)::"
msgstr ""

#: ../source/presentations/session02.rst:165
msgid "SMTP (Ask for information, provide answers)::"
msgstr ""

#: ../source/presentations/session02.rst:186
msgid "SMTP (Say goodbye)::"
msgstr ""

#: ../source/presentations/session02.rst:196
#: ../source/presentations/session02.rst:274
#: ../source/presentations/session02.rst:393
msgid "Interaction consists of commands and replies"
msgstr ""

#: ../source/presentations/session02.rst:197
msgid ""
"Each command or reply is *one line* terminated by <CRLF> |br| (there are "
"exceptions, see the ``250`` reply to ``EHLO`` above)"
msgstr ""

#: ../source/presentations/session02.rst:199
#: ../source/presentations/session02.rst:276
msgid "The exception is message payload, terminated by <CRLF>.<CRLF>"
msgstr ""

#: ../source/presentations/session02.rst:200
#: ../source/presentations/session02.rst:277
#: ../source/presentations/session02.rst:395
msgid "Each command has a *verb* and one or more *arguments*"
msgstr ""

#: ../source/presentations/session02.rst:201
#: ../source/presentations/session02.rst:278
#: ../source/presentations/session02.rst:396
msgid "Each reply has a formal *code* and an informal *explanation*"
msgstr ""

#: ../source/presentations/session02.rst:205
msgid "POP3"
msgstr ""

#: ../source/presentations/session02.rst:207
msgid "What does POP3 look like?"
msgstr ""

#: ../source/presentations/session02.rst:212
msgid "POP3 (Say hello and identify yourself)::"
msgstr ""

#: ../source/presentations/session02.rst:228
#: ../source/presentations/session02.rst:244
msgid "POP3 (Ask for information, provide answers)::"
msgstr ""

#: ../source/presentations/session02.rst:260
msgid "POP3 (Say goodbye)::"
msgstr ""

#: ../source/presentations/session02.rst:275
#: ../source/presentations/session02.rst:394
msgid "Each command or reply is *one line* terminated by <CRLF>"
msgstr ""

#: ../source/presentations/session02.rst:280
msgid "The codes don't really look the same, though, do they?"
msgstr ""

#: ../source/presentations/session02.rst:285
msgid "The exception to the one-line-per-message rule is *payload*"
msgstr ""

#: ../source/presentations/session02.rst:290
msgid "In both SMTP and POP3 this is terminated by <CRLF>.<CRLF>"
msgstr ""

#: ../source/presentations/session02.rst:292
msgid "In SMTP, the *client* has this ability"
msgstr ""

#: ../source/presentations/session02.rst:294
msgid "But in POP3, it belongs to the *server*."
msgstr ""

#: ../source/presentations/session02.rst:298
#: ../source/presentations/session08.rst:402
msgid "Why?"
msgstr ""

#: ../source/presentations/session02.rst:301
msgid "IMAP"
msgstr ""

#: ../source/presentations/session02.rst:303
msgid "What does IMAP look like?"
msgstr ""

#: ../source/presentations/session02.rst:308
msgid "IMAP (Say hello and identify yourself)::"
msgstr ""

#: ../source/presentations/session02.rst:322
msgid "IMAP (Ask for information, provide answers [connect to an inbox])::"
msgstr ""

#: ../source/presentations/session02.rst:338
msgid "IMAP (Ask for information, provide answers [Get message sizes])::"
msgstr ""

#: ../source/presentations/session02.rst:351
msgid "IMAP (Ask for information, provide answers [Get first message header])::"
msgstr ""

#: ../source/presentations/session02.rst:366
msgid "IMAP (Ask for information, provide answers [Get first message body])::"
msgstr ""

#: ../source/presentations/session02.rst:381
msgid "IMAP (Say goodbye)::"
msgstr ""

#: ../source/presentations/session02.rst:406
msgid "Commands and replies are prefixed by 'sequence identifier'"
msgstr ""

#: ../source/presentations/session02.rst:407
msgid ""
"Payloads are prefixed by message size, rather than terminated by reserved"
" sequence"
msgstr ""

#: ../source/presentations/session02.rst:410
msgid "Compared with POP3, what do these differences suggest?"
msgstr ""

#: ../source/presentations/session02.rst:414
msgid "Using IMAP in Python"
msgstr ""

#: ../source/presentations/session02.rst:416
msgid "Let's try this out for ourselves!"
msgstr ""

#: ../source/presentations/session02.rst:423
msgid "Fire up your python interpreters and prepare to type."
msgstr ""

#: ../source/presentations/session02.rst:428
msgid ""
"Begin by importing the ``imaplib`` module from the Python Standard "
"Library:"
msgstr ""

#: ../source/presentations/session02.rst:446
msgid "Setting ``imap.Debug`` shows us what is sent and received"
msgstr ""

#: ../source/presentations/session02.rst:451
msgid ""
"I've prepared a server for us to use, but we'll need to set up a client "
"to speak to it."
msgstr ""

#: ../source/presentations/session02.rst:457
msgid ""
"Our server requires SSL (Secure Socket Layer) for connecting to IMAP "
"servers, so let's initialize an IMAP4_SSL client and authenticate:"
msgstr ""

#: ../source/presentations/session02.rst:478
msgid "We can start by listing the mailboxes we have on the server:"
msgstr ""

#: ../source/presentations/session02.rst:501
msgid ""
"To interact with our email, we must select a mailbox from the list we "
"received earlier:"
msgstr ""

#: ../source/presentations/session02.rst:521
msgid ""
"We can search our selected mailbox for messages matching one or more "
"criteria."
msgstr ""

#: ../source/presentations/session02.rst:526
msgid ""
"The return value is a list of bytestrings containing the UIDs of messages"
" that match our search:"
msgstr ""

#: ../source/presentations/session02.rst:539
msgid ""
"Once we've found a message we want to look at, we can use the ``fetch`` "
"command to read it from the server."
msgstr ""

#: ../source/presentations/session02.rst:545
msgid "IMAP allows fetching each part of a message independently:"
msgstr ""

#: ../source/presentations/session02.rst:561
msgid "What does the message say?"
msgstr ""

#: ../source/presentations/session02.rst:565
msgid ""
"Python even includes an *email* library that would allow us to interact "
"with this message in an *OO* style."
msgstr ""

#: ../source/presentations/session02.rst:572
msgid "*Neat, Huh?*"
msgstr ""

#: ../source/presentations/session02.rst:575
msgid "What Have We Learned?"
msgstr ""

#: ../source/presentations/session02.rst:582
msgid "Protocols are just a set of rules for how to communicate"
msgstr ""

#: ../source/presentations/session02.rst:584
msgid "Protocols tell us how to parse and delimit messages"
msgstr ""

#: ../source/presentations/session02.rst:586
msgid "Protocols tell us what messages are valid"
msgstr ""

#: ../source/presentations/session02.rst:588
msgid ""
"If we properly format request messages to a server, we can get response "
"messages"
msgstr ""

#: ../source/presentations/session02.rst:591
msgid "Python supports a number of these protocols"
msgstr ""

#: ../source/presentations/session02.rst:593
msgid "So we don't have to remember how to format the commands ourselves"
msgstr ""

#: ../source/presentations/session02.rst:595
msgid ""
"But in every case we've seen, we could do the same thing with a socket "
"and some strings"
msgstr ""

#: ../source/presentations/session02.rst:602
msgid "Let's take a few minutes here to clear our heads."
msgstr ""

#: ../source/presentations/session02.rst:607
msgid "When we return, we'll learn about the king of protocols,"
msgstr ""

#: ../source/presentations/session02.rst:611
#: ../source/presentations/session02.rst:615
msgid "HTTP"
msgstr ""

#: ../source/presentations/session02.rst:620
msgid "HTTP is no different"
msgstr ""

#: ../source/presentations/session02.rst:625
msgid "HTTP is also message-centered, with two-way communications:"
msgstr ""

#: ../source/presentations/session02.rst:629
msgid "Requests (Asking for information)"
msgstr ""

#: ../source/presentations/session02.rst:630
msgid "Responses (Providing answers)"
msgstr ""

#: ../source/presentations/session02.rst:634
msgid "What does HTTP look like?"
msgstr ""

#: ../source/presentations/session02.rst:636
msgid "HTTP (Ask for information):"
msgstr ""

#: ../source/presentations/session02.rst:646
msgid ""
"the ``<CRLF>`` you see here is a visualization of the ``\\r\\n`` "
"character sequence."
msgstr ""

#: ../source/presentations/session02.rst:657
msgid "HTTP (Provide answers):"
msgstr ""

#: ../source/presentations/session02.rst:673
msgid "Pay particular attention to the ``<CRLF>`` on a line by itself."
msgstr ""

#: ../source/presentations/session02.rst:678
msgid "In HTTP, both *request* and *response* share a common basic format:"
msgstr ""

#: ../source/presentations/session02.rst:682
msgid "Line separators are <CRLF> (familiar, no?)"
msgstr ""

#: ../source/presentations/session02.rst:683
msgid "A required initial line (a command or a response code)"
msgstr ""

#: ../source/presentations/session02.rst:684
msgid "A (mostly) optional set of headers, one per line"
msgstr ""

#: ../source/presentations/session02.rst:685
msgid "A blank line"
msgstr ""

#: ../source/presentations/session02.rst:686
msgid "An optional body"
msgstr ""

#: ../source/presentations/session02.rst:690
msgid "Implementing HTTP"
msgstr ""

#: ../source/presentations/session02.rst:692
msgid "Let's investigate the HTTP protocol a bit in real life."
msgstr ""

#: ../source/presentations/session02.rst:697
msgid "We'll do so by building a simplified HTTP server, one step at a time."
msgstr ""

#: ../source/presentations/session02.rst:699
msgid ""
"There is a copy of the echo server from last time in "
"``resources/session02``. It's called ``http_server.py``."
msgstr ""

#: ../source/presentations/session02.rst:702
msgid ""
"In a terminal, move into that directory. We'll be doing our work here for"
" the rest of the session"
msgstr ""

#: ../source/presentations/session02.rst:708
msgid "Test Driven Development (TDD) is all the rage these days."
msgstr ""

#: ../source/presentations/session02.rst:713
msgid ""
"It means that before you write code, you first write tests demonstrating "
"what you want your code to do."
msgstr ""

#: ../source/presentations/session02.rst:716
msgid ""
"When all your tests pass, you are finished. You did this for your last "
"assignment."
msgstr ""

#: ../source/presentations/session02.rst:719
msgid "We'll be doing it again today."
msgstr ""

#: ../source/presentations/session02.rst:724
msgid ""
"From inside ``resources/session02`` start a second python interpreter and"
" run ``$ python http_server.py``"
msgstr ""

#: ../source/presentations/session02.rst:730
msgid "In your first interpreter run the tests. You should see similar output:"
msgstr ""

#: ../source/presentations/session02.rst:740
msgid "Let's take a few minutes here to look at these tests and understand them."
msgstr ""

#: ../source/presentations/session02.rst:745
msgid "Our job is to make all those tests pass."
msgstr ""

#: ../source/presentations/session02.rst:750
msgid ""
"First, though, let's pretend this server really is a functional HTTP "
"server."
msgstr ""

#: ../source/presentations/session02.rst:753
msgid ""
"This time, instead of using the echo client to make a connection to the "
"server, let's use a web browser!"
msgstr ""

#: ../source/presentations/session02.rst:756
msgid "Point your favorite browser at ``http://localhost:10000``"
msgstr ""

#: ../source/presentations/session02.rst:761
msgid "First, look at the printed output from your echo server."
msgstr ""

#: ../source/presentations/session02.rst:766
msgid "Second, note that your browser is still waiting to finish loading the page"
msgstr ""

#: ../source/presentations/session02.rst:768
msgid ""
"Moreover, your server should also be hung, waiting for more from the "
"'client'"
msgstr ""

#: ../source/presentations/session02.rst:771
msgid "This is because the server is waiting for the browser to respond"
msgstr ""

#: ../source/presentations/session02.rst:773
msgid ""
"And at the same time, the browser is waiting for the server to indicate "
"it is done."
msgstr ""

#: ../source/presentations/session02.rst:776
msgid ""
"Our server does not yet speak the HTTP protocol, but the browser is "
"expecting it."
msgstr ""

#: ../source/presentations/session02.rst:781
msgid ""
"Kill your server with ``ctrl-c`` (the keyboard interrupt) and you should "
"see some printed content in your browser:"
msgstr ""

#: ../source/presentations/session02.rst:800
msgid ""
"Your server is simply echoing what it receives, so this is an *HTTP "
"Request* as sent by your browser."
msgstr ""

#: ../source/presentations/session02.rst:806
msgid ""
"When working on HTTP applications, it's nice to be able to see all this "
"going back and forth."
msgstr ""

#: ../source/presentations/session02.rst:812
msgid "Good browsers support this with a set of developer tools built-in."
msgstr ""

#: ../source/presentations/session02.rst:816
msgid "firefox -> ctrl-shift-K or cmd-opt-K (os X)"
msgstr ""

#: ../source/presentations/session02.rst:817
msgid "safari -> enable in preferences:advanced then cmd-opt-i"
msgstr ""

#: ../source/presentations/session02.rst:818
msgid "chrome -> ctrl-shift-i or cmd-opt-i (os X)"
msgstr ""

#: ../source/presentations/session02.rst:819
msgid "IE (7.0+) -> F12 or tools menu -> developer tools"
msgstr ""

#: ../source/presentations/session02.rst:821
msgid ""
"The 'Net(work)' pane of these tools can show you both request and "
"response, headers and all. Very useful."
msgstr ""

#: ../source/presentations/session02.rst:829
msgid "**Let's take a quick look**"
msgstr ""

#: ../source/presentations/session02.rst:834
msgid ""
"Sometimes you need or want to debug http requests that are not going "
"through your browser."
msgstr ""

#: ../source/presentations/session02.rst:840
msgid ""
"Or perhaps you need functionality that is not supported by in-browser "
"tools (request munging, header mangling, decryption of https "
"request/responses)"
msgstr ""

#: ../source/presentations/session02.rst:843
msgid "Then it might be time for an HTTP debugging proxy:"
msgstr ""

#: ../source/presentations/session02.rst:847
msgid "windows: http://www.fiddler2.com/fiddler2/"
msgstr ""

#: ../source/presentations/session02.rst:848
msgid "win/osx/linux: http://www.charlesproxy.com/"
msgstr ""

#: ../source/presentations/session02.rst:850
msgid ""
"We won't cover any of these tools here today.  But you can check them out"
" when you have the time."
msgstr ""

#: ../source/presentations/session02.rst:855
msgid "Step 1: Basic HTTP Protocol"
msgstr ""

#: ../source/presentations/session02.rst:857
msgid "In HTTP 1.0, the only required line in an HTTP request is this:"
msgstr ""

#: ../source/presentations/session02.rst:867
msgid ""
"As virtual hosting grew more common, that was not enough, so HTTP 1.1 "
"adds a single required *header*, **Host**:"
msgstr ""

#: ../source/presentations/session02.rst:879
msgid ""
"In both HTTP 1.0 and 1.1, a proper response consists of an intial line, "
"followed by optional headers, a single blank line, and then optionally a "
"response body:"
msgstr ""

#: ../source/presentations/session02.rst:893
msgid "Let's update our server to return such a response."
msgstr ""

#: ../source/presentations/session02.rst:897
msgid ""
"Begin by implementing a new function in your ``http_server.py`` script "
"called `response_ok`."
msgstr ""

#: ../source/presentations/session02.rst:903
msgid "It can be super-simple for now.  We'll improve it later."
msgstr ""

#: ../source/presentations/session02.rst:907
msgid "It needs to return our minimal response from above:"
msgstr ""

#: ../source/presentations/session02.rst:916
msgid ""
"**Remember, <CRLF> is a placeholder for the** ``\\r\\n`` **character "
"sequence**"
msgstr ""

#: ../source/presentations/session02.rst:932
msgid "Did you remember that sockets only accept bytes?"
msgstr ""

#: ../source/presentations/session02.rst:937
msgid ""
"We've now implemented a function that is tested by our tests. Let's run "
"them again:"
msgstr ""

#: ../source/presentations/session02.rst:952
msgid "Great!  We've now got 4 tests that pass.  Good work."
msgstr ""

#: ../source/presentations/session02.rst:956
msgid ""
"Next, we need to rebuild the server loop from our echo server for it's "
"new purpose:"
msgstr ""

#: ../source/presentations/session02.rst:962
msgid ""
"It should now wait for an incoming request to be *finished*, *then* send "
"a response back to the client."
msgstr ""

#: ../source/presentations/session02.rst:965
msgid ""
"The response it sends can be the result of calling our new "
"``response_ok`` function for now."
msgstr ""

#: ../source/presentations/session02.rst:968
msgid ""
"We could also bump up the ``recv`` buffer size to something more "
"reasonable for HTTP traffic, say 1024."
msgstr ""

#: ../source/presentations/session02.rst:996
msgid "Once you've got that set, restart your server::"
msgstr ""

#: ../source/presentations/session02.rst:1003
msgid "Then you can re-run your tests:"
msgstr ""

#: ../source/presentations/session02.rst:1014
msgid "Five tests now pass!"
msgstr ""

#: ../source/presentations/session02.rst:1017
msgid "Step 2: Handling HTTP Methods"
msgstr ""

#: ../source/presentations/session02.rst:1019
msgid ""
"Every HTTP request **must** begin with a single line, broken by "
"whitespace into three parts:"
msgstr ""

#: ../source/presentations/session02.rst:1029
msgid "The three parts are the *method*, the *URI*, and the *protocol*"
msgstr ""

#: ../source/presentations/session02.rst:1031
msgid "Let's look at each in turn."
msgstr ""

#: ../source/presentations/session02.rst:1036
msgid "**GET** ``/path/to/index.html HTTP/1.1``"
msgstr ""

#: ../source/presentations/session02.rst:1040
msgid "Every HTTP request must start with a *method*"
msgstr ""

#: ../source/presentations/session02.rst:1041
msgid "There are four main HTTP methods:"
msgstr ""

#: ../source/presentations/session02.rst:1045
#: ../source/presentations/session02.rst:1078
#: ../source/presentations/session02.rst:1102
msgid "GET"
msgstr ""

#: ../source/presentations/session02.rst:1046
#: ../source/presentations/session02.rst:1082
#: ../source/presentations/session02.rst:1108
msgid "POST"
msgstr ""

#: ../source/presentations/session02.rst:1047
#: ../source/presentations/session02.rst:1083
#: ../source/presentations/session02.rst:1103
msgid "PUT"
msgstr ""

#: ../source/presentations/session02.rst:1048
#: ../source/presentations/session02.rst:1084
#: ../source/presentations/session02.rst:1104
msgid "DELETE"
msgstr ""

#: ../source/presentations/session02.rst:1050
msgid "There are others, notably HEAD, but you won't see them too much"
msgstr ""

#: ../source/presentations/session02.rst:1055
msgid ""
"These four methods are mapped to the four basic steps (*CRUD*) of "
"persistent storage:"
msgstr ""

#: ../source/presentations/session02.rst:1060
msgid "POST = Create"
msgstr ""

#: ../source/presentations/session02.rst:1061
msgid "GET = Read"
msgstr ""

#: ../source/presentations/session02.rst:1062
msgid "PUT = Update"
msgstr ""

#: ../source/presentations/session02.rst:1063
msgid "DELETE = Delete"
msgstr ""

#: ../source/presentations/session02.rst:1068
msgid ""
"HTTP methods can be categorized as **safe** or **unsafe**, based on "
"whether they might change something on the server:"
msgstr ""

#: ../source/presentations/session02.rst:1076
msgid "Safe HTTP Methods"
msgstr ""

#: ../source/presentations/session02.rst:1080
msgid "Unsafe HTTP Methods"
msgstr ""

#: ../source/presentations/session02.rst:1086
msgid "This is a *normative* distinction, which is to say **be careful**"
msgstr ""

#: ../source/presentations/session02.rst:1091
msgid "HTTP methods can be categorized as **idempotent**."
msgstr ""

#: ../source/presentations/session02.rst:1096
msgid "This means that a given request will always have the same result:"
msgstr ""

#: ../source/presentations/session02.rst:1100
msgid "Idempotent HTTP Methods"
msgstr ""

#: ../source/presentations/session02.rst:1106
msgid "Non-Idempotent HTTP Methods"
msgstr ""

#: ../source/presentations/session02.rst:1110
msgid ""
"Again, *normative*. The developer is responsible for ensuring that it is "
"true."
msgstr ""

#: ../source/presentations/session02.rst:1115
msgid "Let's keep things simple, our server will only respond to *GET* requests."
msgstr ""

#: ../source/presentations/session02.rst:1120
msgid ""
"We need to create a function that parses a request and determines if we "
"can respond to it: ``parse_request``."
msgstr ""

#: ../source/presentations/session02.rst:1123
msgid "If the request method is not *GET*, our method should raise an error"
msgstr ""

#: ../source/presentations/session02.rst:1125
msgid ""
"Remember, although a request is more than one line long, all we care "
"about here is the first line"
msgstr ""

#: ../source/presentations/session02.rst:1143
msgid "We'll also need to update the server code. It should"
msgstr ""

#: ../source/presentations/session02.rst:1147
msgid "save the request as it comes in"
msgstr ""

#: ../source/presentations/session02.rst:1148
msgid "check the request using our new function"
msgstr ""

#: ../source/presentations/session02.rst:1149
msgid "send an OK response if things go well"
msgstr ""

#: ../source/presentations/session02.rst:1178
msgid "Quit and restart your server now that you've updated the code::"
msgstr ""

#: ../source/presentations/session02.rst:1185
msgid "At this point, we should have seven tests passing:"
msgstr ""

#: ../source/presentations/session02.rst:1197
msgid ""
"The server quit during the tests, but an HTTP request from the browser "
"should work fine now."
msgstr ""

#: ../source/presentations/session02.rst:1203
msgid ""
"Restart the server and reload your browser.  You should see your OK "
"response."
msgstr ""

#: ../source/presentations/session02.rst:1206
msgid ""
"We can use the ``simple_client.py`` script in our resources to test our "
"error condition.  In a second terminal window run the script like so::"
msgstr ""

#: ../source/presentations/session02.rst:1211
msgid "This should cause the server to crash."
msgstr ""

#: ../source/presentations/session02.rst:1215
msgid "Step 3: Error Responses"
msgstr ""

#: ../source/presentations/session02.rst:1217
msgid ""
"Okay, so the outcome there was pretty ugly. The client went off the "
"rails, and our server has terminated as well."
msgstr ""

#: ../source/presentations/session02.rst:1225
msgid "**why?**"
msgstr ""

#: ../source/presentations/session02.rst:1227
msgid "The HTTP protocol allows us to handle errors like this more gracefully."
msgstr ""

#: ../source/presentations/session02.rst:1231
msgid "**Enter the Response Code**"
msgstr ""

#: ../source/presentations/session02.rst:1236
msgid "``HTTP/1.1`` **200 OK**"
msgstr ""

#: ../source/presentations/session02.rst:1238
msgid ""
"All HTTP responses must include a **response code** indicating the "
"outcome of the request."
msgstr ""

#: ../source/presentations/session02.rst:1246
msgid "1xx (HTTP 1.1 only) - Informational message"
msgstr ""

#: ../source/presentations/session02.rst:1247
msgid "2xx - Success of some kind"
msgstr ""

#: ../source/presentations/session02.rst:1248
msgid "3xx - Redirection of some kind"
msgstr ""

#: ../source/presentations/session02.rst:1249
msgid "4xx - Client Error of some kind"
msgstr ""

#: ../source/presentations/session02.rst:1250
msgid "5xx - Server Error of some kind"
msgstr ""

#: ../source/presentations/session02.rst:1252
msgid "The text bit makes the code more human-readable"
msgstr ""

#: ../source/presentations/session02.rst:1257
msgid ""
"There are certain HTTP response codes you are likely to see (and use) "
"most often:"
msgstr ""

#: ../source/presentations/session02.rst:1265
msgid "``200 OK`` - Everything is good"
msgstr ""

#: ../source/presentations/session02.rst:1266
msgid "``301 Moved Permanently`` - You should update your link"
msgstr ""

#: ../source/presentations/session02.rst:1267
msgid "``304 Not Modified`` - You should load this from cache"
msgstr ""

#: ../source/presentations/session02.rst:1268
msgid "``404 Not Found`` - You've asked for something that doesn't exist"
msgstr ""

#: ../source/presentations/session02.rst:1269
msgid "``500 Internal Server Error`` - Something bad happened"
msgstr ""

#: ../source/presentations/session02.rst:1271
msgid ""
"Do not be afraid to use other, less common codes in building good apps. "
"There are a lot of them for a reason."
msgstr ""

#: ../source/presentations/session02.rst:1274
msgid "See http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
msgstr ""

#: ../source/presentations/session02.rst:1279
msgid "Luckily, there's an error code that is tailor-made for this situation."
msgstr ""

#: ../source/presentations/session02.rst:1284
msgid "The client has made a request using a method we do not support"
msgstr ""

#: ../source/presentations/session02.rst:1286
msgid "``405 Method Not Allowed``"
msgstr ""

#: ../source/presentations/session02.rst:1288
msgid ""
"Let's add a new function that returns this error code. It should be "
"called ``response_method_not_allowed``"
msgstr ""

#: ../source/presentations/session02.rst:1291
msgid "Remember, it must be a complete HTTP Response with the correct *code*"
msgstr ""

#: ../source/presentations/session02.rst:1308
msgid ""
"Again, we'll need to update the server to handle this error condition "
"correctly.  It should"
msgstr ""

#: ../source/presentations/session02.rst:1313
msgid "catch the exception raised by the ``parse_request`` function"
msgstr ""

#: ../source/presentations/session02.rst:1314
msgid "create our new error response as a result"
msgstr ""

#: ../source/presentations/session02.rst:1315
msgid "if no exception is raised, then create the OK response"
msgstr ""

#: ../source/presentations/session02.rst:1316
msgid "return the generated response to the user"
msgstr ""

#: ../source/presentations/session02.rst:1343
msgid "Start your server (or restart it if by some miracle it's still going)."
msgstr ""

#: ../source/presentations/session02.rst:1348
msgid "Then run the tests again::"
msgstr ""

#: ../source/presentations/session02.rst:1356
msgid ""
"Wahoo! All our tests are passing. That means we are done writing code for"
" now."
msgstr ""

#: ../source/presentations/session02.rst:1361
msgid "Step 4: Serving Resources"
msgstr ""

#: ../source/presentations/session02.rst:1363
msgid ""
"We've got a very simple server that accepts a request and sends a "
"response. But what happens if we make a different request?"
msgstr ""

#: ../source/presentations/session02.rst:1371
msgid "In your web browser, enter the following URL::"
msgstr ""

#: ../source/presentations/session02.rst:1377
msgid "What happened? What happens if you use this URL::"
msgstr ""

#: ../source/presentations/session02.rst:1384
msgid "We expect different urls to result in different responses."
msgstr ""

#: ../source/presentations/session02.rst:1389
msgid "Each separate *path* provided should map to a *resource*"
msgstr ""

#: ../source/presentations/session02.rst:1391
msgid "But this isn't happening with our server, for obvious reasons."
msgstr ""

#: ../source/presentations/session02.rst:1393
msgid ""
"It brings us back to the second element of that first line of an HTTP "
"request."
msgstr ""

#: ../source/presentations/session02.rst:1398
msgid "**The Return of the URI**"
msgstr ""

#: ../source/presentations/session02.rst:1403
msgid "``GET`` **/path/to/index.html** ``HTTP/1.1``"
msgstr ""

#: ../source/presentations/session02.rst:1407
msgid ""
"Every HTTP request must include a **URI** used to determine the "
"**resource** to be returned"
msgstr ""

#: ../source/presentations/session02.rst:1410
msgid ""
"URI?? http://stackoverflow.com/questions/176264/whats-the-difference-"
"between-a-uri-and-a-url/1984225#1984225"
msgstr ""

#: ../source/presentations/session02.rst:1413
msgid "Resource?  Files (html, img, .js, .css), but also:"
msgstr ""

#: ../source/presentations/session02.rst:1417
msgid "Dynamic scripts"
msgstr ""

#: ../source/presentations/session02.rst:1418
msgid "Raw data"
msgstr ""

#: ../source/presentations/session02.rst:1419
msgid "API endpoints"
msgstr ""

#: ../source/presentations/session02.rst:1423
msgid ""
"Our ``parse_request`` method actually already finds the ``uri`` in the "
"first line of a request"
msgstr ""

#: ../source/presentations/session02.rst:1429
msgid "All we need to do is update the method so that it *returns* that uri"
msgstr ""

#: ../source/presentations/session02.rst:1431
msgid "Then we can use it."
msgstr ""

#: ../source/presentations/session02.rst:1448
msgid ""
"Now we can update our server code so that it uses the return value of "
"``parse_request``."
msgstr ""

#: ../source/presentations/session02.rst:1454
msgid "That's a pretty simple change:"
msgstr ""

#: ../source/presentations/session02.rst:1477
msgid ""
"You may have noticed that we just added calls to functions that don't yet"
" exist"
msgstr ""

#: ../source/presentations/session02.rst:1483
msgid "It's a program that shows you what you want to do, but won't actually run."
msgstr ""

#: ../source/presentations/session02.rst:1486
msgid ""
"For your homework this week you will create these functions, completing "
"the HTTP server."
msgstr ""

#: ../source/presentations/session02.rst:1489
msgid "Your starting point will be what we've made here in class."
msgstr ""

#: ../source/presentations/session02.rst:1491
msgid "I've added a directory to ``resources/session02`` called ``homework``."
msgstr ""

#: ../source/presentations/session02.rst:1493
msgid ""
"In it, you'll find this ``http_server.py`` file we've just written in "
"class."
msgstr ""

#: ../source/presentations/session02.rst:1496
msgid ""
"That file also contains enough stub code for the missing functions to let"
" the server run."
msgstr ""

#: ../source/presentations/session02.rst:1499
msgid "And there are more tests for you to make pass!"
msgstr ""

#: ../source/presentations/session02.rst:1502
msgid "One Step At A Time"
msgstr ""

#: ../source/presentations/session02.rst:1504
msgid ""
"Take the following steps one at a time. Run the tests in "
"``assignments/session02/homework`` between to ensure that you are getting"
" it right."
msgstr ""

#: ../source/presentations/session02.rst:1510
msgid ""
"Complete the stub ``resolve_uri`` function so that it handles looking up "
"resources on disk using the URI returned by ``parse_request``."
msgstr ""

#: ../source/presentations/session02.rst:1513
msgid ""
"Make sure that if the URI does not map to a file that exists, it raises "
"an appropriate error for our server to handle."
msgstr ""

#: ../source/presentations/session02.rst:1516
msgid ""
"Complete the ``response_not_found`` function stub so that it returns a "
"404 response."
msgstr ""

#: ../source/presentations/session02.rst:1519
msgid ""
"Update ``response_ok`` so that it uses the values returned by "
"``resolve_uri`` by the URI. (these have already been added to the "
"function signature)"
msgstr ""

#: ../source/presentations/session02.rst:1522
msgid ""
"You'll plug those values into the response you generate in the way "
"required by the protocol"
msgstr ""

#: ../source/presentations/session02.rst:1527
#: ../source/presentations/session02.rst:1543
msgid "HTTP Headers"
msgstr ""

#: ../source/presentations/session02.rst:1529
msgid ""
"Along the way, you'll discover that simply returning the content of a "
"file as an HTTP response body is insufficient. Different *types* of "
"content need to be identified to your browser"
msgstr ""

#: ../source/presentations/session02.rst:1536
msgid ""
"We can fix this by passing information about exactly what we are "
"returning as part of the response."
msgstr ""

#: ../source/presentations/session02.rst:1539
msgid "HTTP provides for this type of thing with the generic idea of *Headers*"
msgstr ""

#: ../source/presentations/session02.rst:1545
msgid ""
"Both requests and responses can contain **headers** of the form ``Name: "
"Value``"
msgstr ""

#: ../source/presentations/session02.rst:1552
msgid "HTTP 1.0 has 16 valid headers, 1.1 has 46"
msgstr ""

#: ../source/presentations/session02.rst:1553
msgid "Any number of spaces or tabs may separate the *name* from the *value*"
msgstr ""

#: ../source/presentations/session02.rst:1554
msgid ""
"If a header line starts with spaces or tabs, it is considered part of the"
" value for the previous header"
msgstr ""

#: ../source/presentations/session02.rst:1556
msgid "Header *names* are **not** case-sensitive, but *values* may be"
msgstr ""

#: ../source/presentations/session02.rst:1558
msgid "read more about HTTP headers: http://www.cs.tut.fi/~jkorpela/http.html"
msgstr ""

#: ../source/presentations/session02.rst:1562
msgid "Content-Type Header"
msgstr ""

#: ../source/presentations/session02.rst:1564
msgid ""
"A very common header used in HTTP responses is ``Content-Type``. It tells"
" the client what to expect."
msgstr ""

#: ../source/presentations/session02.rst:1572
msgid "uses **mime-type** (Multi-purpose Internet Mail Extensions)"
msgstr ""

#: ../source/presentations/session02.rst:1573
msgid "foo.jpeg - ``Content-Type: image/jpeg``"
msgstr ""

#: ../source/presentations/session02.rst:1574
msgid "foo.png - ``Content-Type: image/png``"
msgstr ""

#: ../source/presentations/session02.rst:1575
msgid "bar.txt - ``Content-Type: text/plain``"
msgstr ""

#: ../source/presentations/session02.rst:1576
msgid "baz.html - ``Content-Type: text/html``"
msgstr ""

#: ../source/presentations/session02.rst:1578
msgid ""
"There are *many* mime-type identifiers: http://www.freeformatter.com"
"/mime-types-list.html"
msgstr ""

#: ../source/presentations/session02.rst:1583
msgid "Mapping Mime-types"
msgstr ""

#: ../source/presentations/session02.rst:1585
msgid "By mapping a given file to a mime-type, we can write a header."
msgstr ""

#: ../source/presentations/session02.rst:1590
msgid "The standard lib module ``mimetypes`` does just this."
msgstr ""

#: ../source/presentations/session02.rst:1592
msgid ""
"We can guess the mime-type of a file based on the filename or map a file "
"extension to a type:"
msgstr ""

#: ../source/presentations/session02.rst:1605
msgid "Resolving a URI"
msgstr ""

#: ../source/presentations/session02.rst:1607
msgid "Your ``resolve_uri`` function will need to accomplish the following tasks:"
msgstr ""

#: ../source/presentations/session02.rst:1611
msgid "It should take a URI as the sole argument"
msgstr ""

#: ../source/presentations/session02.rst:1613
msgid ""
"It should map the pathname represented by the URI to a filesystem "
"location."
msgstr ""

#: ../source/presentations/session02.rst:1615
msgid "It should have a 'home directory', and look only in that location."
msgstr ""

#: ../source/presentations/session02.rst:1617
msgid ""
"If the URI is a directory, it should return a plain-text listing of the "
"directory contents and the mimetype ``text/plain``."
msgstr ""

#: ../source/presentations/session02.rst:1620
msgid ""
"If the URI is a file, it should return the contents of that file and its "
"correct mimetype."
msgstr ""

#: ../source/presentations/session02.rst:1623
msgid ""
"If the URI does not map to a real location, it should raise an exception "
"that the server can catch to return a 404 response."
msgstr ""

#: ../source/presentations/session02.rst:1628
msgid "Use Your Tests"
msgstr ""

#: ../source/presentations/session02.rst:1630
msgid ""
"One of the benefits of test-driven development is that the tests that are"
" failing should tell you what code you need to write."
msgstr ""

#: ../source/presentations/session02.rst:1636
msgid ""
"As you work your way through the steps outlined above, look at your "
"tests. Write code that makes them pass."
msgstr ""

#: ../source/presentations/session02.rst:1639
msgid ""
"If all the tests in ``assignments/session02/tests.py`` are passing, "
"you've completed the assignment."
msgstr ""

#: ../source/presentations/session02.rst:1653
msgid ""
"Do your work in the ``assignments/session02`` directory of **your fork** "
"of the class respository"
msgstr ""

#: ../source/presentations/session02.rst:1656
msgid ""
"When you have all tests passing, push your work to **your fork** in "
"github."
msgstr ""

#: ../source/presentations/session02.rst:1658
msgid "Using the github web interface, send me a pull request."
msgstr ""

#: ../source/presentations/session02.rst:1660
msgid ""
"I will review your work when I receive your pull requests, make comments "
"on it there, and then close the pull request."
msgstr ""

#: ../source/presentations/session02.rst:1665
msgid "A Few Steps Further"
msgstr ""

#: ../source/presentations/session02.rst:1667
msgid ""
"If you are able to finish the above in less than 4-6 hours, consider "
"taking on one or more of the following challenges:"
msgstr ""

#: ../source/presentations/session02.rst:1672
msgid "Format directory listings as HTML, so you can link to files."
msgstr ""

#: ../source/presentations/session02.rst:1673
msgid ""
"Add a GMT ``Date:`` header in the proper format (RFC-1123) to responses. "
"*hint: see email.utils.formatdate in the python standard library*"
msgstr ""

#: ../source/presentations/session02.rst:1675
msgid ""
"Add a ``Content-Length:`` header for ``OK`` responses that provides a "
"correct value."
msgstr ""

#: ../source/presentations/session02.rst:1677
msgid ""
"Protect your server against errors by providing, and using, a function "
"that returns a ``500 Internal Server Error`` response."
msgstr ""

#: ../source/presentations/session02.rst:1679
msgid ""
"Instead of returning the python script in ``webroot`` as plain text, "
"execute the file and return the results as HTML."
msgstr ""

#: ../source/presentations/session03.rst:7
msgid "Session 03"
msgstr ""

#: ../source/presentations/session03.rst:13
msgid ""
"The Wandering Angel "
"http://www.flickr.com/photos/wandering_angel/1467802750/ - CC-BY"
msgstr ""

#: ../source/presentations/session03.rst:16
msgid "CGI, WSGI and Living Online"
msgstr ""

#: ../source/presentations/session03.rst:18
msgid "Wherein we discover the gateways to dynamic processes on a server."
msgstr ""

#: ../source/presentations/session03.rst:26
msgid "Homework Review and Questions"
msgstr ""

#: ../source/presentations/session03.rst:30
msgid "Previously"
msgstr ""

#: ../source/presentations/session03.rst:34
msgid "You've learned about passing messages back and forth with sockets"
msgstr ""

#: ../source/presentations/session03.rst:35
msgid "You've created a simple HTTP server using sockets"
msgstr ""

#: ../source/presentations/session03.rst:36
msgid ""
"You may even have made your server *dynamic* by returning the output of a"
" python script."
msgstr ""

#: ../source/presentations/session03.rst:42
msgid "What if you want to pass information to that script?"
msgstr ""

#: ../source/presentations/session03.rst:44
msgid ""
"How can you give the script access to information about the HTTP request "
"itself?"
msgstr ""

#: ../source/presentations/session03.rst:49
msgid "Stepping Away: The Environment"
msgstr ""

#: ../source/presentations/session03.rst:51
msgid "A computer has an *environment*:"
msgstr ""

#: ../source/presentations/session03.rst:56
msgid "in \\*nix, you can see this in a shell:"
msgstr ""

#: ../source/presentations/session03.rst:64
msgid "or in Windows at the command prompt:"
msgstr ""

#: ../source/presentations/session03.rst:72
#: ../source/presentations/session03.rst:103
msgid "or in PowerShell:"
msgstr ""

#: ../source/presentations/session03.rst:87
msgid "In a ``bash`` shell we can do this:"
msgstr ""

#: ../source/presentations/session03.rst:95
msgid "or at a Windows command prompt:"
msgstr ""

#: ../source/presentations/session03.rst:114
msgid "These new values are now part of the *environment*"
msgstr ""

#: ../source/presentations/session03.rst:119
msgid "\\*nix:"
msgstr ""

#: ../source/presentations/session03.rst:127
msgid "Windows:"
msgstr ""

#: ../source/presentations/session03.rst:135
msgid "PowerShell:"
msgstr ""

#: ../source/presentations/session03.rst:145
msgid "We can see this *environment* in Python, too::"
msgstr ""

#: ../source/presentations/session03.rst:161
msgid "You can alter os environment values while in Python:"
msgstr ""

#: ../source/presentations/session03.rst:172
msgid "But that doesn't change the original value, *outside* Python:"
msgstr ""

#: ../source/presentations/session03.rst:191
msgid "Subprocesses inherit their environment from their Parent"
msgstr ""

#: ../source/presentations/session03.rst:192
msgid "Parents do not see changes to environment in subprocesses"
msgstr ""

#: ../source/presentations/session03.rst:193
msgid ""
"In Python, you can actually set the environment for a subprocess "
"explicitly"
msgstr ""

#: ../source/presentations/session03.rst:206
msgid "CGI - The Web Environment"
msgstr ""

#: ../source/presentations/session03.rst:210
msgid "CGI is little more than a set of standard environmental variables"
msgstr ""

#: ../source/presentations/session03.rst:214
msgid "What is CGI"
msgstr ""

#: ../source/presentations/session03.rst:216
msgid ""
"First discussed in 1993, formalized in 1997, the current version (1.1) "
"has been in place since 2004."
msgstr ""

#: ../source/presentations/session03.rst:219
msgid "From the preamble::"
msgstr ""

#: ../source/presentations/session03.rst:253
msgid "Running CGI"
msgstr ""

#: ../source/presentations/session03.rst:255
msgid "You have a couple of options:"
msgstr ""

#: ../source/presentations/session03.rst:262
msgid "Python Standard Library CGIHTTPServer"
msgstr ""

#: ../source/presentations/session03.rst:263
msgid "Apache"
msgstr ""

#: ../source/presentations/session03.rst:264
msgid "IIS (on Windows)"
msgstr ""

#: ../source/presentations/session03.rst:265
msgid "Some other HTTP server that implements CGI (lighttpd, ...?)"
msgstr ""

#: ../source/presentations/session03.rst:267
msgid "Let's keep it simple by using the Python module"
msgstr ""

#: ../source/presentations/session03.rst:272
msgid ""
"In the class resources for this session, you'll find a directory named "
"``cgi``."
msgstr ""

#: ../source/presentations/session03.rst:277
msgid "Make a copy of that folder in your class working directory."
msgstr ""

#: ../source/presentations/session03.rst:279
msgid ""
"Windows Users, you may have to edit the first line of ``cgi/cgi-"
"bin/cgi_1.py`` to point to your python executable."
msgstr ""

#: ../source/presentations/session03.rst:284
msgid "Open *two* terminal windows in this ``cgi`` directory"
msgstr ""

#: ../source/presentations/session03.rst:285
msgid "In the first terminal, run ``python -m http.server --cgi``"
msgstr ""

#: ../source/presentations/session03.rst:286
msgid "Open a web browser and load ``http://localhost:8000/``"
msgstr ""

#: ../source/presentations/session03.rst:287
msgid "Click on *CGI Test 1*"
msgstr ""

#: ../source/presentations/session03.rst:294
msgid "Your browser might show a 404 or 403 error"
msgstr ""

#: ../source/presentations/session03.rst:295
msgid ""
"If you see something like that, check the permissions for ``cgi-bin`` "
"*and* ``cgi_1.py``"
msgstr ""

#: ../source/presentations/session03.rst:297
msgid ""
"The file must be executable, the ``cgi-bin`` directory needs to be "
"readable *and* executable."
msgstr ""

#: ../source/presentations/session03.rst:304
msgid ""
"Remember that you can use the bash ``chmod`` command to change "
"permissions in \\*nix: ``chmod a+x cgi-bin/cgi_1.py``"
msgstr ""

#: ../source/presentations/session03.rst:307
msgid ""
"Windows users, use the 'properties' context menu to get to permissions, "
"just grant 'full'"
msgstr ""

#: ../source/presentations/session03.rst:313
msgid "Problems with permissions can lead to failure. So can scripting errors"
msgstr ""

#: ../source/presentations/session03.rst:320
msgid "Open ``cgi/cgi-bin/cgi_1.py`` in an editor"
msgstr ""

#: ../source/presentations/session03.rst:321
msgid "Before where it says ``cgi.test()``, add a single line:"
msgstr ""

#: ../source/presentations/session03.rst:327
msgid "Reload your browser, what happens now?"
msgstr ""

#: ../source/presentations/session03.rst:332
msgid "CGI is famously difficult to debug.  There are reasons for this:"
msgstr ""

#: ../source/presentations/session03.rst:336
msgid "CGI is designed to provide access to runnable processes to *the internet*"
msgstr ""

#: ../source/presentations/session03.rst:337
msgid "The internet is a wretched hive of scum and villainy"
msgstr ""

#: ../source/presentations/session03.rst:338
msgid "Revealing error conditions can expose data that could be exploited"
msgstr ""

#: ../source/presentations/session03.rst:343
msgid "Back in your editor, add the following lines, just below ``import cgi``:"
msgstr ""

#: ../source/presentations/session03.rst:353
msgid "Now, reload again."
msgstr ""

#: ../source/presentations/session03.rst:364
msgid ""
"Let's fix the error from our traceback.  Edit your ``cgi_1.py`` file to "
"match:"
msgstr ""

#: ../source/presentations/session03.rst:379
msgid "Notice the first line of that script: ``#!/usr/bin/env python``."
msgstr ""

#: ../source/presentations/session03.rst:381
msgid "This is called a *shebang* (short for hash-bang)"
msgstr ""

#: ../source/presentations/session03.rst:383
msgid ""
"It tells the system what executable program to use when running the "
"script."
msgstr ""

#: ../source/presentations/session03.rst:387
msgid "CGI Process Execution"
msgstr ""

#: ../source/presentations/session03.rst:389
msgid ""
"Servers like ``http.server --cgi`` run CGI scripts as a system user "
"called ``nobody``."
msgstr ""

#: ../source/presentations/session03.rst:395
msgid "This is just like you calling::"
msgstr ""

#: ../source/presentations/session03.rst:399
msgid ""
"In fact try that now in your second terminal (use the real path), what do"
" you get?"
msgstr ""

#: ../source/presentations/session03.rst:402
msgid "Windows folks, you may need ``C:\\>python cgi-bin/cgi_1.py``"
msgstr ""

#: ../source/presentations/session03.rst:404
msgid "Notice what is missing?"
msgstr ""

#: ../source/presentations/session03.rst:409
msgid "There are a couple of important facts about CGI that derive from this:"
msgstr ""

#: ../source/presentations/session03.rst:413
msgid ""
"The script **must** include a *shebang* so that the system knows how to "
"run it."
msgstr ""

#: ../source/presentations/session03.rst:415
msgid "The script **must** be executable."
msgstr ""

#: ../source/presentations/session03.rst:416
msgid ""
"The *executable* named in the *shebang* will be called as the *nobody* "
"user."
msgstr ""

#: ../source/presentations/session03.rst:417
msgid ""
"This is a security feature to prevent CGI scripts from running as a user "
"with any privileges."
msgstr ""

#: ../source/presentations/session03.rst:419
msgid ""
"This means that the *executable* from the script *shebang* must be one "
"that *anyone* can run."
msgstr ""

#: ../source/presentations/session03.rst:425
msgid "CGI is largely a set of agreed-upon environmental variables."
msgstr ""

#: ../source/presentations/session03.rst:430
msgid ""
"We've seen how environmental variables are found in python in "
"``os.environ``"
msgstr ""

#: ../source/presentations/session03.rst:433
msgid ""
"We've also seen that at least some of the variables in CGI are **not** "
"part of the system environment."
msgstr ""

#: ../source/presentations/session03.rst:436
msgid "Where do they come from?"
msgstr ""

#: ../source/presentations/session03.rst:441
msgid "Let's find 'em.  In a terminal fire up python:"
msgstr ""

#: ../source/presentations/session03.rst:453
msgid ""
"If you don't have the ``subl`` command, or another one that starts your "
"editor, copy this path and open it in your text editor."
msgstr ""

#: ../source/presentations/session03.rst:459
msgid ""
"From ``http/server.py``, in the ``CGIHTTPRequestHandler`` class, in the "
"``run_cgi`` method:"
msgstr ""

#: ../source/presentations/session03.rst:492
msgid ""
"And that's it, the big secret. The server takes care of setting up the "
"environment so it has what is needed."
msgstr ""

#: ../source/presentations/session03.rst:498
msgid ""
"Now, in reverse. How does the information that a script creates end up in"
" your browser?"
msgstr ""

#: ../source/presentations/session03.rst:501
msgid "A CGI Script must print its results to stdout."
msgstr ""

#: ../source/presentations/session03.rst:503
msgid ""
"Use the same method as above to import and open the source file for the "
"``cgi`` module. Note what ``test`` does for an example of this."
msgstr ""

#: ../source/presentations/session03.rst:525
msgid "What the Server Does:"
msgstr ""

#: ../source/presentations/session03.rst:529
msgid "parses the request"
msgstr ""

#: ../source/presentations/session03.rst:530
msgid "sets up the environment, including HTTP and SERVER variables"
msgstr ""

#: ../source/presentations/session03.rst:531
msgid "sends a ``HTTP/1.1 200 OK\\r\\n`` first line to the client"
msgstr ""

#: ../source/presentations/session03.rst:532
msgid "figures out if the URI points to a CGI script and runs it"
msgstr ""

#: ../source/presentations/session03.rst:533
msgid "appends what comes from the script on stdout and sends that back"
msgstr ""

#: ../source/presentations/session03.rst:535
msgid "What the Script Does:"
msgstr ""

#: ../source/presentations/session03.rst:539
msgid "names appropriate *executable* in the *shebang* line"
msgstr ""

#: ../source/presentations/session03.rst:540
msgid "uses os.environ to read information from the HTTP request"
msgstr ""

#: ../source/presentations/session03.rst:541
msgid ""
"builds *any and all* extra **HTTP Headers** |br| (Content-type:, Content-"
"length:, ...)"
msgstr ""

#: ../source/presentations/session03.rst:543
msgid "prints the headers, empty line and script output (body) to stdout"
msgstr ""

#: ../source/presentations/session03.rst:547
msgid "In-Class Exercise I"
msgstr ""

#: ../source/presentations/session03.rst:549
msgid ""
"You've seen the output from the ``cgi.test()`` method from the ``cgi`` "
"module. Let's make our own version of this."
msgstr ""

#: ../source/presentations/session03.rst:557
msgid "In the directory ``cgi-bin`` you will find the file ``cgi_2.py``."
msgstr ""

#: ../source/presentations/session03.rst:558
msgid "Open that file in your editor."
msgstr ""

#: ../source/presentations/session03.rst:559
msgid "The script contains some html with text containing placeholders."
msgstr ""

#: ../source/presentations/session03.rst:560
msgid "You should use Python and the CGI environment to fill the the blanks."
msgstr ""

#: ../source/presentations/session03.rst:561
msgid ""
"You can view the results of your work by loading "
"``http://localhost:8000/`` and clicking on *Exercise One*"
msgstr ""

#: ../source/presentations/session03.rst:564
msgid "**GO**"
msgstr ""

#: ../source/presentations/session03.rst:568
msgid "Getting Data from Users"
msgstr ""

#: ../source/presentations/session03.rst:570
msgid "All this is well and good, but where's the *dynamic* stuff?"
msgstr ""

#: ../source/presentations/session03.rst:575
msgid "It'd be nice if a user could pass form data to our script for it to use."
msgstr ""

#: ../source/presentations/session03.rst:577
msgid ""
"In HTTP, data is often passed to the server as a part of a URL called the"
" *query string*"
msgstr ""

#: ../source/presentations/session03.rst:580
msgid ""
"The URL query string is formatted as ``name=value`` pairs, separated by "
"the ampersand (``&``) character"
msgstr ""

#: ../source/presentations/session03.rst:583
msgid ""
"The entire query string is separated from other parts of the URL by a "
"question mark::"
msgstr ""

#: ../source/presentations/session03.rst:591
msgid ""
"In the ``cgi`` module, we get access to the query string with the "
"``FieldStorage`` class:"
msgstr ""

#: ../source/presentations/session03.rst:604
msgid "The values in the ``FieldStorage`` are *always* strings"
msgstr ""

#: ../source/presentations/session03.rst:605
msgid ""
"``getvalue`` allows you to return a default, in case the field isn't "
"present"
msgstr ""

#: ../source/presentations/session03.rst:606
msgid ""
"``getlist`` always returns a list: empty, one-valued, or as many values "
"as are present"
msgstr ""

#: ../source/presentations/session03.rst:611
msgid "In-Class Exercise II"
msgstr ""

#: ../source/presentations/session03.rst:613
msgid "Let's create a dynamic adding machine."
msgstr ""

#: ../source/presentations/session03.rst:617
msgid "In the ``cgi-bin`` directory you'll find ``cgi_sums.py``."
msgstr ""

#: ../source/presentations/session03.rst:618
msgid ""
"In the ``index.html`` file in the ``cgi`` directory, the third link leads"
" to this file."
msgstr ""

#: ../source/presentations/session03.rst:620
msgid ""
"You will use the structure of that link, and what you learned just now "
"about ``cgi.FieldStorage``."
msgstr ""

#: ../source/presentations/session03.rst:622
msgid ""
"Complete the cgi script in ``cgi_sums.py`` so that the result of adding "
"all operands sent via the url query is returned."
msgstr ""

#: ../source/presentations/session03.rst:624
msgid ""
"Return the results as plain text, with the appropriate ``Content-Type`` "
"header."
msgstr ""

#: ../source/presentations/session03.rst:653
msgid "Let's take a break here, before continuing"
msgstr ""

#: ../source/presentations/session03.rst:657
msgid "WSGI"
msgstr ""

#: ../source/presentations/session03.rst:661
msgid "The Web Server Gateway Interface"
msgstr ""

#: ../source/presentations/session03.rst:664
msgid "CGI Problems"
msgstr ""

#: ../source/presentations/session03.rst:666
msgid "CGI is great, but there are problems:"
msgstr ""

#: ../source/presentations/session03.rst:673
msgid "Code is executed *in a new process*"
msgstr ""

#: ../source/presentations/session03.rst:674
msgid "**Every** call to a CGI script starts a new process on the server"
msgstr ""

#: ../source/presentations/session03.rst:675
msgid "Starting a new process is expensive in terms of server resources"
msgstr ""

#: ../source/presentations/session03.rst:676
msgid "*Especially for interpreted languages like Python*"
msgstr ""

#: ../source/presentations/session03.rst:678
msgid "How do we overcome this problem?"
msgstr ""

#: ../source/presentations/session03.rst:682
msgid ""
"The most popular approach is to have a long-running process *inside* the "
"server that handles CGI scripts."
msgstr ""

#: ../source/presentations/session03.rst:688
msgid "FastCGI and SCGI are existing implementations of CGI in this fashion."
msgstr ""

#: ../source/presentations/session03.rst:690
msgid "The PHP scripting language works in much the same way."
msgstr ""

#: ../source/presentations/session03.rst:692
msgid ""
"The Apache module **mod_python** offers a similar capability for Python "
"code."
msgstr ""

#: ../source/presentations/session03.rst:697
msgid "Each of these options has a specific API"
msgstr ""

#: ../source/presentations/session03.rst:698
msgid "None are compatible with each-other"
msgstr ""

#: ../source/presentations/session03.rst:699
msgid "Code written for one is **not portable** to another"
msgstr ""

#: ../source/presentations/session03.rst:701
msgid "This makes it much more difficult to *share resources*"
msgstr ""

#: ../source/presentations/session03.rst:705
msgid "A Solution"
msgstr ""

#: ../source/presentations/session03.rst:707
msgid "Enter WSGI, the Web Server Gateway Interface."
msgstr ""

#: ../source/presentations/session03.rst:712
msgid "Other alternatives are specific implementations of the CGI standard."
msgstr ""

#: ../source/presentations/session03.rst:714
msgid "WSGI is itself a new standard, not an implementation."
msgstr ""

#: ../source/presentations/session03.rst:716
msgid "WSGI is generalized to describe a set of interactions."
msgstr ""

#: ../source/presentations/session03.rst:718
msgid "Developers can write WSGI-capable apps and deploy them on any WSGI server."
msgstr ""

#: ../source/presentations/session03.rst:720
msgid "Read the original WSGI spec: http://www.python.org/dev/peps/pep-0333"
msgstr ""

#: ../source/presentations/session03.rst:722
msgid ""
"There is also an update for Python 3: |br| "
"https://www.python.org/dev/peps/pep-3333"
msgstr ""

#: ../source/presentations/session03.rst:726
msgid "Apps and Servers"
msgstr ""

#: ../source/presentations/session03.rst:728
msgid "WSGI consists of two parts, a *server* and an *application*."
msgstr ""

#: ../source/presentations/session03.rst:735
msgid "A WSGI Server must:"
msgstr ""

#: ../source/presentations/session03.rst:739
msgid "set up an environment, much like the one in CGI"
msgstr ""

#: ../source/presentations/session03.rst:740
msgid "provide a method ``start_response(status, headers, exc_info=None)``"
msgstr ""

#: ../source/presentations/session03.rst:741
msgid ""
"build a response body by calling an *application*, passing "
"``environment`` and ``start_response`` as args"
msgstr ""

#: ../source/presentations/session03.rst:743
msgid "return a response with the status, headers and body"
msgstr ""

#: ../source/presentations/session03.rst:747
msgid "A WSGI Appliction must:"
msgstr ""

#: ../source/presentations/session03.rst:751
msgid "Be a callable (function, method, class)"
msgstr ""

#: ../source/presentations/session03.rst:752
msgid "Take an environment and a ``start_response`` callable as arguments"
msgstr ""

#: ../source/presentations/session03.rst:753
msgid "Call the ``start_response`` method."
msgstr ""

#: ../source/presentations/session03.rst:754
msgid ""
"Return an *iterable* of 0 or more strings, which are treated as the body "
"of the response."
msgstr ""

#: ../source/presentations/session03.rst:783
msgid ""
"Where the simplified server above is **not** functional, this *is* a "
"complete app:"
msgstr ""

#: ../source/presentations/session03.rst:799
msgid "A third part of the puzzle is something called WSGI *middleware*"
msgstr ""

#: ../source/presentations/session03.rst:806
msgid "Middleware implements both the *server* and *application* interfaces"
msgstr ""

#: ../source/presentations/session03.rst:807
msgid "Middleware acts as a server when viewed from an application"
msgstr ""

#: ../source/presentations/session03.rst:808
msgid "Middleware acts as an application when viewed from a server"
msgstr ""

#: ../source/presentations/session03.rst:822
msgid "WSGI Servers:"
msgstr ""

#: ../source/presentations/session03.rst:826
msgid "**HTTP <---> WSGI**"
msgstr ""

#: ../source/presentations/session03.rst:830
msgid "WSGI Applications:"
msgstr ""

#: ../source/presentations/session03.rst:834
msgid "**WSGI <---> app code**"
msgstr ""

#: ../source/presentations/session03.rst:839
msgid "The WSGI *Stack* can thus be expressed like so:"
msgstr ""

#: ../source/presentations/session03.rst:843
msgid "**HTTP <---> WSGI <---> app code**"
msgstr ""

#: ../source/presentations/session03.rst:848
msgid "The Python standard lib provides a reference implementation of WSGI:"
msgstr ""

#: ../source/presentations/session03.rst:857
msgid "You can also deploy with Apache as your HTTP server, using **mod_wsgi**:"
msgstr ""

#: ../source/presentations/session03.rst:866
msgid ""
"Finally, it is also common to see WSGI apps deployed via a proxied WSGI "
"server:"
msgstr ""

#: ../source/presentations/session03.rst:875
msgid "The WSGI Environment"
msgstr ""

#: ../source/presentations/session03.rst:878
msgid "REQUEST_METHOD:"
msgstr ""

#: ../source/presentations/session03.rst:878
msgid ""
"The HTTP request method, such as \"GET\" or \"POST\". This cannot ever be"
" an empty string, and so is always required."
msgstr ""

#: ../source/presentations/session03.rst:883
msgid "SCRIPT_NAME:"
msgstr ""

#: ../source/presentations/session03.rst:881
msgid ""
"The initial portion of the request URL's \"path\" that corresponds to the"
" application object, so that the application knows its virtual "
"\"location\". This may be an empty string, if the application corresponds"
" to the \"root\" of the server."
msgstr ""

#: ../source/presentations/session03.rst:888
msgid "PATH_INFO:"
msgstr ""

#: ../source/presentations/session03.rst:886
msgid ""
"The remainder of the request URL's \"path\", designating the virtual "
"\"location\" of the request's target within the application. This may be "
"an empty string, if the request URL targets the application root and does"
" not have a trailing slash."
msgstr ""

#: ../source/presentations/session03.rst:891
msgid "QUERY_STRING:"
msgstr ""

#: ../source/presentations/session03.rst:891
msgid ""
"The portion of the request URL that follows the \"?\", if any. May be "
"empty or absent."
msgstr ""

#: ../source/presentations/session03.rst:896
msgid "CONTENT_TYPE:"
msgstr ""

#: ../source/presentations/session03.rst:894
msgid ""
"The contents of any Content-Type fields in the HTTP request. May be empty"
" or absent."
msgstr ""

#: ../source/presentations/session03.rst:901
msgid "CONTENT_LENGTH:"
msgstr ""

#: ../source/presentations/session03.rst:901
msgid ""
"The contents of any Content-Length fields in the HTTP request. May be "
"empty or absent."
msgstr ""

#: ../source/presentations/session03.rst:907
msgid "SERVER_NAME, SERVER_PORT:"
msgstr ""

#: ../source/presentations/session03.rst:904
msgid ""
"When combined with SCRIPT_NAME and PATH_INFO, these variables can be used"
" to complete the URL. Note, however, that HTTP_HOST, if present, should "
"be used in preference to SERVER_NAME for reconstructing the request URL. "
"See the URL Reconstruction section below for more detail. SERVER_NAME and"
" SERVER_PORT can never be empty strings, and so are always required."
msgstr ""

#: ../source/presentations/session03.rst:917
msgid "SERVER_PROTOCOL:"
msgstr ""

#: ../source/presentations/session03.rst:910
msgid ""
"The version of the protocol the client used to send the request. "
"Typically this will be something like \"HTTP/1.0\" or \"HTTP/1.1\" and "
"may be used by the application to determine how to treat any HTTP request"
" headers. (This variable should probably be called REQUEST_PROTOCOL, "
"since it denotes the protocol used in the request, and is not necessarily"
" the protocol that will be used in the server's response. However, for "
"compatibility with CGI we have to keep the existing name.)"
msgstr ""

#: ../source/presentations/session03.rst:925
msgid "HTTP\\_ Variables:"
msgstr ""

#: ../source/presentations/session03.rst:922
msgid ""
"Variables corresponding to the client-supplied HTTP request headers "
"(i.e., variables whose names begin with \"HTTP\\_\"). The presence or "
"absence of these variables should correspond with the presence or absence"
" of the appropriate HTTP header in the request."
msgstr ""

#: ../source/presentations/session03.rst:929
msgid "**Seem Familiar?**"
msgstr ""

#: ../source/presentations/session03.rst:933
msgid "In-Class Exercise III"
msgstr ""

#: ../source/presentations/session03.rst:935
msgid ""
"Let's start simply.  We'll begin by repeating our first CGI exercise in "
"WSGI"
msgstr ""

#: ../source/presentations/session03.rst:939
msgid ""
"Find the ``wsgi`` directory in the class resources. Copy it to your "
"working directory."
msgstr ""

#: ../source/presentations/session03.rst:941
msgid "Open the file ``wsgi_1.py`` in your text editor."
msgstr ""

#: ../source/presentations/session03.rst:942
msgid ""
"We will fill in the missing values using Python and the wsgi ``environ``,"
" just as we use ``os.environ`` in cgi"
msgstr ""

#: ../source/presentations/session03.rst:947
msgid "**But First**"
msgstr ""

#: ../source/presentations/session03.rst:962
msgid "Note that we pass our ``application`` function to the server factory"
msgstr ""

#: ../source/presentations/session03.rst:964
msgid "We don't have to write a server, ``wsgiref`` does that for us."
msgstr ""

#: ../source/presentations/session03.rst:966
msgid "In fact, you should *never* have to write a WSGI server."
msgstr ""

#: ../source/presentations/session03.rst:987
msgid "We do not define ``start_response``, the application does that."
msgstr ""

#: ../source/presentations/session03.rst:989
msgid "We *are* responsible for determining the HTTP status."
msgstr ""

#: ../source/presentations/session03.rst:991
msgid "And the content we hand back *must* be ``bytes``, not unicode."
msgstr ""

#: ../source/presentations/session03.rst:995
msgid "You can run this script with python::"
msgstr ""

#: ../source/presentations/session03.rst:1002
msgid "This will start a wsgi server. What host and port will it use?"
msgstr ""

#: ../source/presentations/session03.rst:1004
msgid "Point your browser at ``http://localhost:8080/``. Did it work?"
msgstr ""

#: ../source/presentations/session03.rst:1006
msgid ""
"Go ahead and fill in the missing bits. Use the ``environ`` passed into "
"``application``"
msgstr ""

#: ../source/presentations/session03.rst:1012
msgid "WSGI is a long-running process."
msgstr ""

#: ../source/presentations/session03.rst:1017
msgid "The file you are editing is *not* reloaded after you edit it."
msgstr ""

#: ../source/presentations/session03.rst:1019
msgid "You'll need to quit and re-run the script between edits."
msgstr ""

#: ../source/presentations/session03.rst:1021
msgid ""
"Notice the use of ``pprint.pprint``, check your terminal for useful "
"output."
msgstr ""

#: ../source/presentations/session03.rst:1025
msgid "A WSGI Application"
msgstr ""

#: ../source/presentations/session03.rst:1027
msgid ""
"So now we've learned a bit about the WSGI specification and how a WSGI "
"application can get data that comes in via an HTTP request."
msgstr ""

#: ../source/presentations/session03.rst:1033
msgid "Let's create a multi-page wsgi application."
msgstr ""

#: ../source/presentations/session03.rst:1035
msgid "It will serve a small database of python books."
msgstr ""

#: ../source/presentations/session03.rst:1037
msgid "The database (with a very simple api) can be found in ``wsgi/bookdb.py``"
msgstr ""

#: ../source/presentations/session03.rst:1041
msgid "We'll need a listing page that shows the titles of all the books"
msgstr ""

#: ../source/presentations/session03.rst:1042
msgid "Each title will link to a details page for that book"
msgstr ""

#: ../source/presentations/session03.rst:1043
msgid ""
"The details page for each book will display all the information and have "
"a link back to the list"
msgstr ""

#: ../source/presentations/session03.rst:1049
msgid ""
"When viewing our first wsgi app, do we see the name of the wsgi "
"application script anywhere in the URL?"
msgstr ""

#: ../source/presentations/session03.rst:1055
msgid ""
"In our wsgi application script, how many applications did we actually "
"have?"
msgstr ""

#: ../source/presentations/session03.rst:1057
msgid ""
"How are we going to serve different types of information out of a single "
"application?"
msgstr ""

#: ../source/presentations/session03.rst:1063
msgid ""
"We have to write an app that will map our incoming request path to some "
"code that can handle that request."
msgstr ""

#: ../source/presentations/session03.rst:1069
msgid "This process is called ``dispatch``. There are many possible approaches."
msgstr ""

#: ../source/presentations/session03.rst:1071
msgid "Let's begin by designing this piece of our app."
msgstr ""

#: ../source/presentations/session03.rst:1073
msgid "Open ``bookapp.py`` from the ``wsgi`` folder.  We'll do our work here."
msgstr ""

#: ../source/presentations/session03.rst:1078
msgid "The wsgi environment gives us access to *PATH_INFO*."
msgstr ""

#: ../source/presentations/session03.rst:1083
msgid "This value is the URI from the client's HTTP request."
msgstr ""

#: ../source/presentations/session03.rst:1085
msgid "We can design the URLs that our app will use to assist us in routing."
msgstr ""

#: ../source/presentations/session03.rst:1087
msgid "Let's declare that any request for ``/`` will map to the list page."
msgstr ""

#: ../source/presentations/session03.rst:1091
msgid "We can also say that the URL for a book will look like this::"
msgstr ""

#: ../source/presentations/session03.rst:1096
msgid "Writing ``resolve_path``"
msgstr ""

#: ../source/presentations/session03.rst:1098
msgid "Let's write a function, called ``resolve_path`` in our application file."
msgstr ""

#: ../source/presentations/session03.rst:1102
msgid "It should take the *PATH_INFO* value from environ as an argument."
msgstr ""

#: ../source/presentations/session03.rst:1103
msgid "It should return the function that will be called."
msgstr ""

#: ../source/presentations/session03.rst:1104
msgid "It should also return any arguments needed to call that function."
msgstr ""

#: ../source/presentations/session03.rst:1105
msgid "This implies of course that the arguments should be part of the PATH"
msgstr ""

#: ../source/presentations/session03.rst:1130
msgid "We need to hook our new dispatch function into the application."
msgstr ""

#: ../source/presentations/session03.rst:1134
msgid "The path should be extracted from ``environ``."
msgstr ""

#: ../source/presentations/session03.rst:1135
msgid "The dispatch function should be used to get a function and arguments"
msgstr ""

#: ../source/presentations/session03.rst:1136
msgid ""
"The body to return should come from calling that function with those "
"arguments"
msgstr ""

#: ../source/presentations/session03.rst:1138
msgid ""
"If an error is raised by calling the function, an appropriate response "
"should be returned"
msgstr ""

#: ../source/presentations/session03.rst:1140
msgid ""
"If the router raises a NameError, the application should return a 404 "
"response"
msgstr ""

#: ../source/presentations/session03.rst:1172
#: ../source/presentations/session03.rst:1223
msgid "Test Your Work"
msgstr ""

#: ../source/presentations/session03.rst:1174
msgid "Once you've got your script settled, run it::"
msgstr ""

#: ../source/presentations/session03.rst:1181
msgid "Then point your browser at ``http://localhost:8080/``"
msgstr ""

#: ../source/presentations/session03.rst:1185
msgid "``http://localhost/book/id3``"
msgstr ""

#: ../source/presentations/session03.rst:1186
msgid "``http://localhost/book/id73/``"
msgstr ""

#: ../source/presentations/session03.rst:1187
msgid "``http://localhost/sponge/damp``"
msgstr ""

#: ../source/presentations/session03.rst:1189
msgid "Did that all work as you would have expected?"
msgstr ""

#: ../source/presentations/session03.rst:1193
msgid "Building the Book List"
msgstr ""

#: ../source/presentations/session03.rst:1195
msgid ""
"The function ``books`` should return an html list of book titles where "
"each title is a link to the detail page for that book"
msgstr ""

#: ../source/presentations/session03.rst:1200
msgid "You'll need all the ids and titles from the book database."
msgstr ""

#: ../source/presentations/session03.rst:1201
msgid "You'll need to build a list in HTML using this information"
msgstr ""

#: ../source/presentations/session03.rst:1202
msgid "Each list item should have the book title as a link"
msgstr ""

#: ../source/presentations/session03.rst:1203
msgid "The href for the link should be of the form ``/book/<id>``"
msgstr ""

#: ../source/presentations/session03.rst:1225
msgid "Quit and then restart your application script::"
msgstr ""

#: ../source/presentations/session03.rst:1234
msgid "Then reload the root of your application::"
msgstr ""

#: ../source/presentations/session03.rst:1238
msgid "You should see a nice list of the books in the database. Do you?"
msgstr ""

#: ../source/presentations/session03.rst:1240
msgid "Click on a link to view the detail page. Does it load without error?"
msgstr ""

#: ../source/presentations/session03.rst:1244
msgid "Showing Details"
msgstr ""

#: ../source/presentations/session03.rst:1246
msgid "The next step of course is to polish up those detail pages."
msgstr ""

#: ../source/presentations/session03.rst:1253
msgid "You'll need to retrieve a single book from the database"
msgstr ""

#: ../source/presentations/session03.rst:1254
msgid "You'll need to format the details about that book and return them as HTML"
msgstr ""

#: ../source/presentations/session03.rst:1255
msgid "You'll need to guard against ids that do not map to books"
msgstr ""

#: ../source/presentations/session03.rst:1257
msgid "In this last case, what's the right HTTP response code to send?"
msgstr ""

#: ../source/presentations/session03.rst:1284
msgid "Quit and restart your script one more time"
msgstr ""

#: ../source/presentations/session03.rst:1289
msgid "Then poke around at your application and see the good you've made"
msgstr ""

#: ../source/presentations/session03.rst:1291
msgid "And your application is portable and sharable"
msgstr ""

#: ../source/presentations/session03.rst:1293
msgid ""
"It should run equally well under any `wsgi server "
"<http://wsgi.readthedocs.org/en/latest/servers.html>`_"
msgstr ""

#: ../source/presentations/session03.rst:1298
msgid "Next steps for an app like this might be:"
msgstr ""

#: ../source/presentations/session03.rst:1300
msgid "Create a shared full page template and incorporate it into your app"
msgstr ""

#: ../source/presentations/session03.rst:1301
msgid "Improve the error handling by emitting error codes other than 404 and 500"
msgstr ""

#: ../source/presentations/session03.rst:1302
msgid "Swap out the basic backend here with a different one, maybe a Web Service?"
msgstr ""

#: ../source/presentations/session03.rst:1303
msgid ""
"Think about ways to make the application less tightly coupled to the "
"pages it serves"
msgstr ""

#: ../source/presentations/session03.rst:1313
msgid ""
"For your homework this week, you'll be creating a wsgi application of "
"your own."
msgstr ""

#: ../source/presentations/session03.rst:1319
msgid "You'll create an online calculator that can perform several operations"
msgstr ""

#: ../source/presentations/session03.rst:1321
msgid "You'll need to support:"
msgstr ""

#: ../source/presentations/session03.rst:1325
msgid "Addition"
msgstr ""

#: ../source/presentations/session03.rst:1326
msgid "Subtraction"
msgstr ""

#: ../source/presentations/session03.rst:1327
msgid "Multiplication"
msgstr ""

#: ../source/presentations/session03.rst:1328
msgid "Division"
msgstr ""

#: ../source/presentations/session03.rst:1332
msgid ""
"Your users should be able to send appropriate requests and get back "
"proper responses::"
msgstr ""

#: ../source/presentations/session03.rst:1349
msgid "Create a new github repository.  Call it ``wsgi-calc``."
msgstr ""

#: ../source/presentations/session03.rst:1350
msgid "Add a python script to it called ``calculator.py``."
msgstr ""

#: ../source/presentations/session03.rst:1351
msgid "Your script should be runnable using ``$ python calculator.py``"
msgstr ""

#: ../source/presentations/session03.rst:1352
msgid ""
"When the script is running, I should be able to view your application in "
"my browser."
msgstr ""

#: ../source/presentations/session03.rst:1354
msgid ""
"I should be able to see a home page that explains how to perform "
"calculations."
msgstr ""

#: ../source/presentations/session03.rst:1360
msgid "Your repository should include a README.md file."
msgstr ""

#: ../source/presentations/session03.rst:1362
msgid "Include all instructions I need to successfully run and view your script."
msgstr ""

#: ../source/presentations/session03.rst:1365
msgid ""
"When you are done, send Maria and I an email with a link to your "
"repository."
msgstr ""

#: ../source/presentations/session03.rst:1369
msgid "One Last Task"
msgstr ""

#: ../source/presentations/session03.rst:1371
msgid ""
"Next week we will be installing Python packages that are not part of the "
"standard library."
msgstr ""

#: ../source/presentations/session03.rst:1377
msgid "This is a common occurence in web development.  But it can be hazardous."
msgstr ""

#: ../source/presentations/session03.rst:1379
msgid ""
"In order to practice safe development I am going to ask you to read and "
"follow through a `brief tutorial`_ I've created on the subject."
msgstr ""

#: ../source/presentations/session03.rst:1382
msgid ""
"If you have any trouble, or if things do not work the way they are "
"supposed to, please reach out.  We will need this to be working next "
"week."
msgstr ""

#: ../source/presentations/session03.rst:1388
msgid "Wrap-Up"
msgstr ""

#: ../source/presentations/session03.rst:1390
msgid ""
"For educational purposes, you might wish to take a look at the source "
"code for the ``wsgiref`` module. It's the canonical example of a simple "
"wsgi server"
msgstr ""

#: ../source/presentations/session03.rst:1400
msgid "**See you Next Time**"
msgstr ""

#: ../source/presentations/session04.rst:3
msgid "Session 04"
msgstr ""

#: ../source/presentations/session04.rst:9
msgid "Paul Downey http://www.flickr.com/photos/psd/492139935/ - CC-BY"
msgstr ""

#: ../source/presentations/session04.rst:12
msgid "Scraping, APIs and Mashups"
msgstr ""

#: ../source/presentations/session04.rst:14
msgid "Wherein we learn how to make order from the chaos of the wild internet."
msgstr ""

#: ../source/presentations/session04.rst:18
msgid "A Dilemma"
msgstr ""

#: ../source/presentations/session04.rst:20
msgid "The internet makes a vast quantity of data available."
msgstr ""

#: ../source/presentations/session04.rst:25
msgid "But not always in the form or combination you want."
msgstr ""

#: ../source/presentations/session04.rst:27
msgid ""
"It would be nice to be able to combine data from different sources to "
"create *meaning*."
msgstr ""

#: ../source/presentations/session04.rst:32
msgid "The Big Question"
msgstr ""

#: ../source/presentations/session04.rst:36
msgid "But How?"
msgstr ""

#: ../source/presentations/session04.rst:40
msgid "The Big Answer"
msgstr ""

#: ../source/presentations/session04.rst:44
#: ../source/presentations/session04.rst:48
msgid "Mashups"
msgstr ""

#: ../source/presentations/session04.rst:50
msgid "A mashup is::"
msgstr ""

#: ../source/presentations/session04.rst:59
msgid "Data Sources"
msgstr ""

#: ../source/presentations/session04.rst:61
msgid "The key to mashups is the idea of data sources."
msgstr ""

#: ../source/presentations/session04.rst:66
msgid "These come in many flavors:"
msgstr ""

#: ../source/presentations/session04.rst:70
msgid "Simple websites with data in HTML"
msgstr ""

#: ../source/presentations/session04.rst:71
msgid "Web services providing structured data"
msgstr ""

#: ../source/presentations/session04.rst:72
msgid "Web services providing tranformative service (geocoding)"
msgstr ""

#: ../source/presentations/session04.rst:73
msgid "Web services providing presentation (mapping)"
msgstr ""

#: ../source/presentations/session04.rst:76
msgid "Web Scraping"
msgstr ""

#: ../source/presentations/session04.rst:81
msgid ""
"It would be nice if all online data were available in well-structured "
"formats."
msgstr ""

#: ../source/presentations/session04.rst:86
msgid "The reality is that much data is available only in HTML."
msgstr ""

#: ../source/presentations/session04.rst:88
msgid "Still we can get at it, with some effort."
msgstr ""

#: ../source/presentations/session04.rst:90
msgid "By scraping the data from the web pages."
msgstr ""

#: ../source/presentations/session04.rst:94
msgid "HTML"
msgstr ""

#: ../source/presentations/session04.rst:98
msgid "Ideally, it looks like this:"
msgstr ""

#: ../source/presentations/session04.rst:117
msgid "But in real life, it's more often like this:"
msgstr ""

#: ../source/presentations/session04.rst:138
msgid ""
"Photo by Matthew via Flickr "
"(http://www.flickr.com/photos/purplemattfish/3918004964/) - CC-BY-NC-ND"
msgstr ""

#: ../source/presentations/session04.rst:145
msgid "\"Be strict in what you send and tolerant in what you receive\""
msgstr ""

#: ../source/presentations/session04.rst:149
msgid "Taming the Mess"
msgstr ""

#: ../source/presentations/session04.rst:151
msgid "Luckily, there are tools to help with this."
msgstr ""

#: ../source/presentations/session04.rst:156
msgid "In python there are several candidates, but I like ``BeautifulSoup``."
msgstr ""

#: ../source/presentations/session04.rst:158
msgid "BeautifulSoup is a great tool, but it's not in the Standard Library."
msgstr ""

#: ../source/presentations/session04.rst:160
msgid "We'll need to install it."
msgstr ""

#: ../source/presentations/session04.rst:162
msgid "Create a virtualenv to do so:"
msgstr ""

#: ../source/presentations/session04.rst:170
msgid ""
"(remember, for Windows users that should be "
"``soupenv/Scripts/activate.bat``)"
msgstr ""

#: ../source/presentations/session04.rst:175
msgid ""
"Once the virtualenv is activated, you can simply use pip or easy_install "
"to install the libraries you want:"
msgstr ""

#: ../source/presentations/session04.rst:185
msgid "BeautifulSoup is built to use the Python HTMLParser."
msgstr ""

#: ../source/presentations/session04.rst:189
msgid "Batteries Included.  It's already there"
msgstr ""

#: ../source/presentations/session04.rst:190
msgid "It's not great, especially before Python 2.7.3"
msgstr ""

#: ../source/presentations/session04.rst:195
msgid "BeautifulSoup also supports using other parsers."
msgstr ""

#: ../source/presentations/session04.rst:197
msgid "There are two good choices: ``lxml`` and ``html5lib``."
msgstr ""

#: ../source/presentations/session04.rst:199
msgid "``lxml`` is better, but much harder to install.  Let's use ``html5lib``."
msgstr ""

#: ../source/presentations/session04.rst:204
msgid "Again, this is pretty simple::"
msgstr ""

#: ../source/presentations/session04.rst:211
msgid "Once installed, BeautifulSoup will choose it automatically."
msgstr ""

#: ../source/presentations/session04.rst:213
msgid "BeautifulSoup will choose the \"best\" available."
msgstr ""

#: ../source/presentations/session04.rst:215
msgid "You can specify the parser if you need to for some reason."
msgstr ""

#: ../source/presentations/session04.rst:217
msgid ""
"In fact, in recent versions of BeautifulSoup, you'll be warned if you "
"don't (though you can ignore the warning)."
msgstr ""

#: ../source/presentations/session04.rst:223
msgid ""
"Python provides tools for opening urls and communicating with servers. "
"It's spread across the ``urllib`` and ``urllib2`` packages."
msgstr ""

#: ../source/presentations/session04.rst:229
msgid "These packages have pretty unintuitive APIs."
msgstr ""

#: ../source/presentations/session04.rst:231
msgid ""
"The ``requests`` library is becoming the de-facto standard for this type "
"of work.  Let's install it too."
msgstr ""

#: ../source/presentations/session04.rst:240
msgid "Our Class Mashup"
msgstr ""

#: ../source/presentations/session04.rst:242
msgid "We're going to explore some tools for making a mashup today"
msgstr ""

#: ../source/presentations/session04.rst:247
msgid ""
"We'll be starting by scraping restaurant health code data for a given ZIP"
" code"
msgstr ""

#: ../source/presentations/session04.rst:250
msgid "Then, we'll look up the geographic location of those zipcodes using Google"
msgstr ""

#: ../source/presentations/session04.rst:252
msgid "Finally, we'll display the results of our work on a map"
msgstr ""

#: ../source/presentations/session04.rst:254
msgid "Start by opening a new file in your editor: ``mashup.py``."
msgstr ""

#: ../source/presentations/session04.rst:259
msgid ""
"The source for the data we'll be displaying is a search tool provided by "
"King County."
msgstr ""

#: ../source/presentations/session04.rst:265
msgid "It's supposed to have a web service, but the service is broken."
msgstr ""

#: ../source/presentations/session04.rst:267
msgid "Luckily, the HTML search works just fine."
msgstr ""

#: ../source/presentations/session04.rst:269
msgid "Open `the search form`_ in your browser."
msgstr ""

#: ../source/presentations/session04.rst:271
msgid "Fill in a ZIP code (perhaps 98101)."
msgstr ""

#: ../source/presentations/session04.rst:273
msgid "Add a start and end date (perhaps about 1 or 2 years apart)."
msgstr ""

#: ../source/presentations/session04.rst:275
msgid "Submit the form, and take a look at what you get."
msgstr ""

#: ../source/presentations/session04.rst:282
msgid "Next we want to automate the process."
msgstr ""

#: ../source/presentations/session04.rst:287
msgid ""
"Copy the domain and path of the url into your new ``mashup.py`` file like"
" so:"
msgstr ""

#: ../source/presentations/session04.rst:297
msgid ""
"Next, copy the query parameters from the URL and convert them to a "
"dictionary:"
msgstr ""

#: ../source/presentations/session04.rst:322
msgid "Fetching Search Results"
msgstr ""

#: ../source/presentations/session04.rst:324
msgid ""
"Next we'll use the ``requests`` library to write a function to fetch "
"these results on demand."
msgstr ""

#: ../source/presentations/session04.rst:330
msgid "In ``requests``, each HTTP method has a module-level function:"
msgstr ""

#: ../source/presentations/session04.rst:334
msgid "``GET`` == ``requests.get(url, **kwargs)``"
msgstr ""

#: ../source/presentations/session04.rst:335
msgid "``POST`` == ``requests.post(url, **kwargs)``"
msgstr ""

#: ../source/presentations/session04.rst:338
msgid "``kwargs`` represent other parts of an HTTP request:"
msgstr ""

#: ../source/presentations/session04.rst:342
msgid "``params``: a dict of url parameters (?foo=bar&baz=bim)"
msgstr ""

#: ../source/presentations/session04.rst:343
msgid "``headers``: a dict of headers to send with the request"
msgstr ""

#: ../source/presentations/session04.rst:344
msgid "``data``: the body of the request, if any (form data for POST goes here)"
msgstr ""

#: ../source/presentations/session04.rst:350
msgid ""
"The return value from one of these functions is a ``response`` object "
"which provides:"
msgstr ""

#: ../source/presentations/session04.rst:358
msgid "``response.status_code``: see the HTTP Status Code returned"
msgstr ""

#: ../source/presentations/session04.rst:359
msgid "``response.ok``: True if ``response.status_code`` is not an error"
msgstr ""

#: ../source/presentations/session04.rst:360
msgid "``response.raise_for_status()``: call to raise a python error if it is"
msgstr ""

#: ../source/presentations/session04.rst:361
msgid "``response.headers``: The headers sent from the server"
msgstr ""

#: ../source/presentations/session04.rst:362
msgid "``response.text``: Body of the response, decoded to unicode"
msgstr ""

#: ../source/presentations/session04.rst:363
msgid "``response.encoding``: The encoding used to decode"
msgstr ""

#: ../source/presentations/session04.rst:364
msgid "``response.content``: The original encoded response body as bytes"
msgstr ""

#: ../source/presentations/session04.rst:366
msgid "``requests documentation``: http://docs.python-requests.org/en/latest/"
msgstr ""

#: ../source/presentations/session04.rst:370
msgid "We'll start by writing a function ``get_inspection_page``"
msgstr ""

#: ../source/presentations/session04.rst:377
msgid "It will accept keyword arguments for each of the possible query values"
msgstr ""

#: ../source/presentations/session04.rst:378
msgid ""
"It will build a dictionary of request query parameters from incoming "
"keywords, using INSPECTION_PARAMS as a template"
msgstr ""

#: ../source/presentations/session04.rst:380
msgid ""
"It will make a request to the inspection service search page using this "
"query"
msgstr ""

#: ../source/presentations/session04.rst:382
msgid "It will return the encoded content and the encoding used as a tuple"
msgstr ""

#: ../source/presentations/session04.rst:384
msgid "Try writing this function. Put it in ``mashup.py``"
msgstr ""

#: ../source/presentations/session04.rst:388
#: ../source/presentations/session04.rst:441
#: ../source/presentations/session04.rst:483
msgid "My Solution"
msgstr ""

#: ../source/presentations/session04.rst:390
msgid "Here's the one I created:"
msgstr ""

#: ../source/presentations/session04.rst:410
msgid "Parse the Results"
msgstr ""

#: ../source/presentations/session04.rst:412
msgid "Next, we'll need to parse the results we get when we call that function"
msgstr ""

#: ../source/presentations/session04.rst:414
msgid "But before we start, a word about parsing HTML with BeautifulSoup"
msgstr ""

#: ../source/presentations/session04.rst:419
msgid ""
"The BeautifulSoup object can be instantiated with a string or a file-like"
" object as the sole argument:"
msgstr ""

#: ../source/presentations/session04.rst:436
msgid ""
"You might want to open the documentation as reference "
"(http://www.crummy.com/software/BeautifulSoup/bs4/doc)"
msgstr ""

#: ../source/presentations/session04.rst:443
msgid "Take a shot at writing this new function in ``mashup.py``"
msgstr ""

#: ../source/presentations/session04.rst:457
msgid "Put It Together"
msgstr ""

#: ../source/presentations/session04.rst:459
msgid "We'll need to make our script do something when run."
msgstr ""

#: ../source/presentations/session04.rst:471
msgid "Fetch a search results page"
msgstr ""

#: ../source/presentations/session04.rst:472
msgid "Parse the resulting HTML"
msgstr ""

#: ../source/presentations/session04.rst:473
msgid "For now, print out the results so we can see what we get"
msgstr ""

#: ../source/presentations/session04.rst:477
msgid "Use the ``prettify`` method on a BeautifulSoup object::"
msgstr ""

#: ../source/presentations/session04.rst:485
msgid "Try to come up with the proper code on your own.  Add it to ``mashup.py``"
msgstr ""

#: ../source/presentations/session04.rst:503
msgid ""
"Assuming your virtualenv is still active, you should be able to execute "
"the script."
msgstr ""

#: ../source/presentations/session04.rst:528
msgid "This script is available as ``resources/session04/mashup_1.py``"
msgstr ""

#: ../source/presentations/session04.rst:534
msgid ""
"Now, let's re-run the script, saving the output to a file so we can use "
"it later::"
msgstr ""

#: ../source/presentations/session04.rst:542
msgid "Then add a quick function to our script that will use these saved results:"
msgstr ""

#: ../source/presentations/session04.rst:550
msgid "Finally, bolt that in to your script to use it:"
msgstr ""

#: ../source/presentations/session04.rst:560
msgid "Extracting Data"
msgstr ""

#: ../source/presentations/session04.rst:562
msgid "Next we find the bits of this pile of HTML that matter to us."
msgstr ""

#: ../source/presentations/session04.rst:567
msgid ""
"Open the page you just wrote to disk in your web browser and open the "
"developer tools to inspect the page source."
msgstr ""

#: ../source/presentations/session04.rst:570
msgid ""
"You'll want to start by finding the element in the page that contains all"
" our search results."
msgstr ""

#: ../source/presentations/session04.rst:573
msgid "Look at the source and identify the single element we are looking for."
msgstr ""

#: ../source/presentations/session04.rst:577
msgid ""
"Having found it visually, we can now search for it automatically. In "
"BeautifulSoup:"
msgstr ""

#: ../source/presentations/session04.rst:585
msgid "All HTML elements (including the parsed document itself) are ``tags``"
msgstr ""

#: ../source/presentations/session04.rst:586
msgid "A ``tag`` can be searched using its ``find`` or ``find_all`` methods"
msgstr ""

#: ../source/presentations/session04.rst:587
msgid "This searches the descendents of the tag on which it is called."
msgstr ""

#: ../source/presentations/session04.rst:588
msgid "It takes arguments which act as *filters* on the search results"
msgstr ""

#: ../source/presentations/session04.rst:592
msgid "like so::"
msgstr ""

#: ../source/presentations/session04.rst:600
msgid "The ``find`` method allows us to pass *kwargs*."
msgstr ""

#: ../source/presentations/session04.rst:605
msgid ""
"Keywords that are not among the named parameters will be considered an "
"HTML attribute."
msgstr ""

#: ../source/presentations/session04.rst:608
msgid "We can use this to find the column that holds our search results:"
msgstr ""

#: ../source/presentations/session04.rst:614
msgid "Add that line to our mashup script and try it out:"
msgstr ""

#: ../source/presentations/session04.rst:633
msgid ""
"The next job is to find the inspection data we can see when we click on "
"the restaurant names in our page."
msgstr ""

#: ../source/presentations/session04.rst:639
msgid "Do you notice a pattern in how that data is structured?"
msgstr ""

#: ../source/presentations/session04.rst:641
msgid "For each restaurant in our results, there are *two* ``<div>`` tags."
msgstr ""

#: ../source/presentations/session04.rst:643
msgid ""
"The first contains the content you see at first, the second the content "
"that displays when we click."
msgstr ""

#: ../source/presentations/session04.rst:646
msgid "What can you see that identifies these items?"
msgstr ""

#: ../source/presentations/session04.rst:648
msgid "``<div id=\"PR0084952\"...>`` and ``<div id=\"PR0084952~\"...>``"
msgstr ""

#: ../source/presentations/session04.rst:650
msgid "Each pair shares an ID, and the stuff we want is in the second one"
msgstr ""

#: ../source/presentations/session04.rst:652
msgid "Each number is different for each restaurant"
msgstr ""

#: ../source/presentations/session04.rst:654
msgid "We can use a regular expression to help us here."
msgstr ""

#: ../source/presentations/session04.rst:658
msgid ""
"Let's write a function in ``mashup.py`` that will find all the divs in "
"our column with the right kind of id:"
msgstr ""

#: ../source/presentations/session04.rst:666
msgid "It should match ``<div>`` tags only"
msgstr ""

#: ../source/presentations/session04.rst:667
msgid "It should match ids that start with ``PR``"
msgstr ""

#: ../source/presentations/session04.rst:668
msgid "It should match ids that contain some number of *digits* after that"
msgstr ""

#: ../source/presentations/session04.rst:669
msgid "It should match ids that end with a *tilde* (``~``) character"
msgstr ""

#: ../source/presentations/session04.rst:684
msgid ""
"Let's add that step to the *main* block at the bottom of ``mashup.py`` "
"(only print the first of the many divs that match):"
msgstr ""

#: ../source/presentations/session04.rst:699
msgid "Finally, test it out:"
msgstr ""

#: ../source/presentations/session04.rst:710
msgid "This code is available as ``/resources/session04/mashup_2.py``"
msgstr ""

#: ../source/presentations/session04.rst:714
msgid "Parsing Restaurant Data"
msgstr ""

#: ../source/presentations/session04.rst:716
msgid "Now that we have the records we want, we need to parse them."
msgstr ""

#: ../source/presentations/session04.rst:721
msgid "We'll start by extracting information about the restaurants:"
msgstr ""

#: ../source/presentations/session04.rst:725
msgid "Name"
msgstr ""

#: ../source/presentations/session04.rst:726
msgid "Address"
msgstr ""

#: ../source/presentations/session04.rst:727
msgid "Location"
msgstr ""

#: ../source/presentations/session04.rst:729
msgid "How is this information contained in our records?"
msgstr ""

#: ../source/presentations/session04.rst:734
msgid "Each record consists of a table with a series of *rows* (``<tr>``)."
msgstr ""

#: ../source/presentations/session04.rst:739
msgid "The rows we want at this time all have two *cells* inside them."
msgstr ""

#: ../source/presentations/session04.rst:741
msgid ""
"The first contains the *label* of the data, the second contains the "
"*value*"
msgstr ""

#: ../source/presentations/session04.rst:743
msgid "We'll need a function in ``mashup.py`` that:"
msgstr ""

#: ../source/presentations/session04.rst:747
msgid "takes an HTML element as an argument"
msgstr ""

#: ../source/presentations/session04.rst:748
msgid "verifies that it is a ``<tr>`` element"
msgstr ""

#: ../source/presentations/session04.rst:749
msgid "verifies that it has two immediate children that are ``<td>`` elements"
msgstr ""

#: ../source/presentations/session04.rst:751
msgid "My solution:"
msgstr ""

#: ../source/presentations/session04.rst:763
msgid "Let's try this out in an interpreter:"
msgstr ""

#: ../source/presentations/session04.rst:778
msgid "We'd like to find all table rows in that div that contain *two* cells"
msgstr ""

#: ../source/presentations/session04.rst:783
msgid "The table rows are all contained in a ``<tbody>`` tag."
msgstr ""

#: ../source/presentations/session04.rst:785
msgid ""
"We only want the ones at the top of that tag (ones nested more deeply "
"contain other data)"
msgstr ""

#: ../source/presentations/session04.rst:805
msgid "Now we have a list of the rows that contain our data."
msgstr ""

#: ../source/presentations/session04.rst:810
msgid "Next we have to collect the data they contain"
msgstr ""

#: ../source/presentations/session04.rst:812
msgid ""
"The *label/value* structure of this data should suggest the right "
"container to store the information."
msgstr ""

#: ../source/presentations/session04.rst:815
msgid "Let's start by trying to get at the first label"
msgstr ""

#: ../source/presentations/session04.rst:825
msgid "That works well enough, but all that extra stuff is nasty"
msgstr ""

#: ../source/presentations/session04.rst:827
msgid "We need a method to clean up the text we get from these cells"
msgstr ""

#: ../source/presentations/session04.rst:829
msgid ""
"It should strip extra whitespace, and characters like ``-`` and ``:`` we "
"don't want."
msgstr ""

#: ../source/presentations/session04.rst:834
msgid "Try writing such a function for yourself now in ``mashup.py``"
msgstr ""

#: ../source/presentations/session04.rst:844
msgid "Add it to your interpreter and test it out:"
msgstr ""

#: ../source/presentations/session04.rst:855
msgid "Ahhh, much better"
msgstr ""

#: ../source/presentations/session04.rst:859
msgid "So we can get a list of the rows that contain label/value pairs."
msgstr ""

#: ../source/presentations/session04.rst:864
msgid "And we can extract clean values from the cells in these rows"
msgstr ""

#: ../source/presentations/session04.rst:866
msgid ""
"Now we need a function in ``mashup.py`` that will iterate through the "
"rows we find and build a dictionary of the pairs."
msgstr ""

#: ../source/presentations/session04.rst:869
msgid "We have to be cautious because some rows don't have a label."
msgstr ""

#: ../source/presentations/session04.rst:871
msgid "The values in these rows should go with the label from the previous row."
msgstr ""

#: ../source/presentations/session04.rst:875
msgid "Here's the version I came up with:"
msgstr ""

#: ../source/presentations/session04.rst:895
msgid "Add it to our script:"
msgstr ""

#: ../source/presentations/session04.rst:908
msgid "And then try it out:"
msgstr ""

#: ../source/presentations/session04.rst:919
msgid "This script is available as ``resources/session04/mashup_3.py``"
msgstr ""

#: ../source/presentations/session04.rst:923
msgid "Extracting Inspection Data"
msgstr ""

#: ../source/presentations/session04.rst:925
msgid "The final step is to extract the inspection data for each restaurant."
msgstr ""

#: ../source/presentations/session04.rst:930
msgid ""
"We want to capture only the score from each inspection, details we can "
"leave behind."
msgstr ""

#: ../source/presentations/session04.rst:933
msgid "We'd like to calculate the average score for all known inspections."
msgstr ""

#: ../source/presentations/session04.rst:935
msgid "We'd also like to know how many inspections there were in total."
msgstr ""

#: ../source/presentations/session04.rst:937
msgid ""
"Finally, we'd like to preserve the highest score of all inspections for a"
" restaurant."
msgstr ""

#: ../source/presentations/session04.rst:940
msgid "We'll add this information to our metadata about the restaurant."
msgstr ""

#: ../source/presentations/session04.rst:945
msgid ""
"Let's start by getting our bearings. Return to viewing the "
"``inspection_page.html`` you saved in a browser."
msgstr ""

#: ../source/presentations/session04.rst:951
msgid "Find a restaurant that has had an inspection or two."
msgstr ""

#: ../source/presentations/session04.rst:953
msgid ""
"What can you say about the HTML that contains the scores for these "
"inspections?"
msgstr ""

#: ../source/presentations/session04.rst:956
msgid "I notice four characteristics that let us isolate the information we want:"
msgstr ""

#: ../source/presentations/session04.rst:960
msgid "Inspection data is containd in ``<tr>`` elements"
msgstr ""

#: ../source/presentations/session04.rst:961
msgid "Rows with inspection data in them have four ``<td>`` children"
msgstr ""

#: ../source/presentations/session04.rst:962
msgid "The text in the first cell contains the word \"inspection\""
msgstr ""

#: ../source/presentations/session04.rst:963
msgid "But the text does not *start* with the word \"inspection\""
msgstr ""

#: ../source/presentations/session04.rst:965
msgid ""
"Let's try to write a filter function like the one above that will catch "
"these rows for us."
msgstr ""

#: ../source/presentations/session04.rst:970
msgid "Add this new function ``is_inspection_data_row`` to ``mashup.py``"
msgstr ""

#: ../source/presentations/session04.rst:988
msgid "We can test this function by adding it into our script:"
msgstr ""

#: ../source/presentations/session04.rst:1003
msgid "And try running the script in your terminal:"
msgstr ""

#: ../source/presentations/session04.rst:1017
msgid "Now we can isolate a list of the rows that contain inspection data."
msgstr ""

#: ../source/presentations/session04.rst:1022
msgid ""
"Next we need to calculate the average score, total number and highest "
"score for each restaurant."
msgstr ""

#: ../source/presentations/session04.rst:1025
msgid "Let's add a function to ``mashup.py`` that will:"
msgstr ""

#: ../source/presentations/session04.rst:1029
msgid "Take a div containing a restaurant record"
msgstr ""

#: ../source/presentations/session04.rst:1030
msgid "Extract the rows containing inspection data"
msgstr ""

#: ../source/presentations/session04.rst:1031
msgid "Keep track of the highest score recorded"
msgstr ""

#: ../source/presentations/session04.rst:1032
msgid "Sum the total of all inspections"
msgstr ""

#: ../source/presentations/session04.rst:1033
msgid "Count the number of inspections made"
msgstr ""

#: ../source/presentations/session04.rst:1034
msgid "Calculate the average score for inspections"
msgstr ""

#: ../source/presentations/session04.rst:1035
msgid "Return the three calculated values in a dictionary"
msgstr ""

#: ../source/presentations/session04.rst:1039
msgid "Try writing this routine yourself."
msgstr ""

#: ../source/presentations/session04.rst:1063
msgid "We can now incorporate this new routine into our ``mashup`` script."
msgstr ""

#: ../source/presentations/session04.rst:1068
msgid ""
"We'll want to add the data it produces to the metadata we've already "
"extracted."
msgstr ""

#: ../source/presentations/session04.rst:1079
msgid "And test it out at the command line:"
msgstr ""

#: ../source/presentations/session04.rst:1094
msgid "Once you have this working, take a break."
msgstr ""

#: ../source/presentations/session04.rst:1096
msgid "When we return, we'll try a saner approach to getting data from online"
msgstr ""

#: ../source/presentations/session04.rst:1101
msgid "Another Approach"
msgstr ""

#: ../source/presentations/session04.rst:1106
msgid "Scraping web pages is tedious and inherently brittle"
msgstr ""

#: ../source/presentations/session04.rst:1111
msgid "The owner of the website updates their layout, your code breaks"
msgstr ""

#: ../source/presentations/session04.rst:1113
msgid ""
"But there is another way to get information from the web in a more "
"normalized fashion"
msgstr ""

#: ../source/presentations/session04.rst:1118
msgid "**Web Services**"
msgstr ""

#: ../source/presentations/session04.rst:1122
msgid "Web Services"
msgstr ""

#: ../source/presentations/session04.rst:1124
msgid ""
"\"a software system designed to support interoperable machine-to-machine "
"interaction over a network\" - W3C"
msgstr ""

#: ../source/presentations/session04.rst:1129
msgid "provides a defined set of calls"
msgstr ""

#: ../source/presentations/session04.rst:1130
msgid "returns structured data"
msgstr ""

#: ../source/presentations/session04.rst:1135
msgid "**RSS** is one of the earliest forms of Web Services"
msgstr ""

#: ../source/presentations/session04.rst:1140
msgid ""
"A single web-based *endpoint* provides a dynamically updated listing of "
"content"
msgstr ""

#: ../source/presentations/session04.rst:1143
msgid "Implemented in pure HTTP.  Returns XML"
msgstr ""

#: ../source/presentations/session04.rst:1145
msgid "**Atom** is a competing, but similar standard"
msgstr ""

#: ../source/presentations/session04.rst:1147
msgid "There's a solid Python library for consuming RSS: `feedparser`_."
msgstr ""

#: ../source/presentations/session04.rst:1153
msgid ""
"XML-RPC extended the essentially static nature of RSS by allowing users "
"to call procedures and pass arguments."
msgstr ""

#: ../source/presentations/session04.rst:1161
msgid "Calls are made via HTTP GET, by passing an XML document"
msgstr ""

#: ../source/presentations/session04.rst:1162
msgid "Returns from a call are sent to the client in XML"
msgstr ""

#: ../source/presentations/session04.rst:1164
msgid ""
"In python, you can access XML-RPC services using `xmlrpc`_ from the "
"standard library. It has two libraries, ``xmlrpc.client`` and "
"``xmlrpc.server``"
msgstr ""

#: ../source/presentations/session04.rst:1172
msgid "SOAP extends XML-RPC in a couple of useful ways:"
msgstr ""

#: ../source/presentations/session04.rst:1176
msgid ""
"It uses Web Services Description Language (WSDL) to provide meta-data "
"about an entire service in a machine-readable format (Automatic "
"introspection)"
msgstr ""

#: ../source/presentations/session04.rst:1179
msgid ""
"It establishes a method for extending available data types using XML "
"namespaces"
msgstr ""

#: ../source/presentations/session04.rst:1185
msgid "There is no standard library module that supports SOAP directly."
msgstr ""

#: ../source/presentations/session04.rst:1189
msgid "The best-known and best-supported module available is **Suds**"
msgstr ""

#: ../source/presentations/session04.rst:1190
msgid "The homepage is https://fedorahosted.org/suds/"
msgstr ""

#: ../source/presentations/session04.rst:1191
msgid "It can be installed using ``easy_install`` or ``pip install``"
msgstr ""

#: ../source/presentations/session04.rst:1192
msgid "A `fork of the library`_ compatible with Python 3 does exist"
msgstr ""

#: ../source/presentations/session04.rst:1194
msgid "**I HATE SOAP**"
msgstr ""

#: ../source/presentations/session04.rst:1200
msgid ""
"SOAP was invented in part to provide completely machine-readable "
"interoperability."
msgstr ""

#: ../source/presentations/session04.rst:1206
#: ../source/presentations/session04.rst:1214
msgid "*Does that really work in real life?*"
msgstr ""

#: ../source/presentations/session04.rst:1210
#: ../source/presentations/session04.rst:1218
msgid "**Hardly ever**"
msgstr ""

#: ../source/presentations/session04.rst:1212
msgid "Another reason was to provide extensibility via custom types"
msgstr ""

#: ../source/presentations/session04.rst:1222
msgid ""
"In addition, XML is a pretty inefficient medium for transmitting data.  "
"There's a lot of extra characters transmitted that lack any meaning."
msgstr ""

#: ../source/presentations/session04.rst:1240
msgid "So, if neither of the original goals is really achieved by using SOAP"
msgstr ""

#: ../source/presentations/session04.rst:1245
msgid "And if the transmission medium is too bloated to use"
msgstr ""

#: ../source/presentations/session04.rst:1247
msgid "why pay all the overhead required to use the protocol?"
msgstr ""

#: ../source/presentations/session04.rst:1249
msgid "Is there another way we could consider approaching the problem?"
msgstr ""

#: ../source/presentations/session04.rst:1253
msgid "**Enter REST**"
msgstr ""

#: ../source/presentations/session04.rst:1257
msgid "REST"
msgstr ""

#: ../source/presentations/session04.rst:1261
msgid "**Representational State Transfer**"
msgstr ""

#: ../source/presentations/session04.rst:1268
msgid "Originally described by Roy T. Fielding (worth reading)"
msgstr ""

#: ../source/presentations/session04.rst:1269
msgid "Use HTTP for what it can do"
msgstr ""

#: ../source/presentations/session04.rst:1270
msgid ""
"Read more in `RESTful Web Services <http://www.crummy.com/writing"
"/RESTful-Web-Services/>`_\\*"
msgstr ""

#: ../source/presentations/session04.rst:1272
msgid "\\* Seriously. Buy it and read it"
msgstr ""

#: ../source/presentations/session04.rst:1276
msgid "The XML-RCP/SOAP way:"
msgstr ""

#: ../source/presentations/session04.rst:1280
msgid "POST /getComment HTTP/1.1"
msgstr ""

#: ../source/presentations/session04.rst:1281
msgid "POST /getComments HTTP/1.1"
msgstr ""

#: ../source/presentations/session04.rst:1282
msgid "POST /addComment HTTP/1.1"
msgstr ""

#: ../source/presentations/session04.rst:1283
msgid "POST /editComment HTTP/1.1"
msgstr ""

#: ../source/presentations/session04.rst:1284
msgid "POST /deleteComment HTTP/1.1"
msgstr ""

#: ../source/presentations/session04.rst:1289
msgid "The RESTful way:"
msgstr ""

#: ../source/presentations/session04.rst:1293
msgid "GET /comment/<id> HTTP/1.1"
msgstr ""

#: ../source/presentations/session04.rst:1294
msgid "GET /comment HTTP/1.1"
msgstr ""

#: ../source/presentations/session04.rst:1295
msgid "POST /comment HTTP/1.1"
msgstr ""

#: ../source/presentations/session04.rst:1296
msgid "PUT /comment/<id> HTTP/1.1"
msgstr ""

#: ../source/presentations/session04.rst:1297
msgid "DELETE /comment/<id> HTTP/1.1"
msgstr ""

#: ../source/presentations/session04.rst:1302
msgid "REST is a **Resource Oriented Architecture**"
msgstr ""

#: ../source/presentations/session04.rst:1307
msgid "The URL represents the *resource* we are working with"
msgstr ""

#: ../source/presentations/session04.rst:1309
msgid "The HTTP Method indicates the ``action`` to be taken"
msgstr ""

#: ../source/presentations/session04.rst:1311
msgid ""
"The HTTP Code returned tells us the ``result`` (whether success or "
"failure)"
msgstr ""

#: ../source/presentations/session04.rst:1318
msgid "POST /comment HTTP/1.1  (creating a new comment):"
msgstr ""

#: ../source/presentations/session04.rst:1322
msgid "Success: ``HTTP/1.1 201 Created``"
msgstr ""

#: ../source/presentations/session04.rst:1323
msgid "Failure (unauthorized): ``HTTP/1.1 401 Unauthorized``"
msgstr ""

#: ../source/presentations/session04.rst:1324
msgid "Failure (NotImplemented): ``HTTP/1.1 405 Not Allowed``"
msgstr ""

#: ../source/presentations/session04.rst:1325
msgid "Failure (ValueError): ``HTTP/1.1 406 Not Acceptable``"
msgstr ""

#: ../source/presentations/session04.rst:1327
msgid "PUT /comment/<id> HTTP/1.1 (edit comment):"
msgstr ""

#: ../source/presentations/session04.rst:1331
msgid "Success: ``HTTP/1.1 200 OK``"
msgstr ""

#: ../source/presentations/session04.rst:1332
msgid "Failure: ``HTTP/1.1 409 Conflict``"
msgstr ""

#: ../source/presentations/session04.rst:1334
msgid "DELETE /comment/<id> HTTP/1.1 (delete comment):"
msgstr ""

#: ../source/presentations/session04.rst:1338
msgid "Success: ``HTTP/1.1 204 No Content``"
msgstr ""

#: ../source/presentations/session04.rst:1341
msgid "REST uses JSON"
msgstr ""

#: ../source/presentations/session04.rst:1343
msgid "JavaScript Object Notation:"
msgstr ""

#: ../source/presentations/session04.rst:1350
msgid "a lightweight data-interchange format"
msgstr ""

#: ../source/presentations/session04.rst:1351
msgid "easy for humans to read and write"
msgstr ""

#: ../source/presentations/session04.rst:1352
msgid "easy for machines to parse and generate"
msgstr ""

#: ../source/presentations/session04.rst:1354
msgid "Based on Two Structures:"
msgstr ""

#: ../source/presentations/session04.rst:1356
msgid "object: ``{ string: value, ...}``"
msgstr ""

#: ../source/presentations/session04.rst:1357
msgid "array: ``[value, value, ]``"
msgstr ""

#: ../source/presentations/session04.rst:1361
msgid "pythonic, no?"
msgstr ""

#: ../source/presentations/session04.rst:1366
msgid "JSON provides a few basic data types (see http://json.org/):"
msgstr ""

#: ../source/presentations/session04.rst:1373
msgid "string: unicode, anything but \", \\\\ and control characters"
msgstr ""

#: ../source/presentations/session04.rst:1374
msgid "number: any number, but json does not use octal or hexadecimal"
msgstr ""

#: ../source/presentations/session04.rst:1375
msgid "object, array (we've seen these above)"
msgstr ""

#: ../source/presentations/session04.rst:1376
msgid "true"
msgstr ""

#: ../source/presentations/session04.rst:1377
msgid "false"
msgstr ""

#: ../source/presentations/session04.rst:1378
msgid "null"
msgstr ""

#: ../source/presentations/session04.rst:1382
msgid "**No date type? OMGWTF??!!1!1**"
msgstr ""

#: ../source/presentations/session04.rst:1386
msgid "You have two options:"
msgstr ""

#: ../source/presentations/session04.rst:1393
msgid "Option 1 - Unix Epoch Time (number):"
msgstr ""

#: ../source/presentations/session04.rst:1403
msgid "Option 2 - ISO 8661 (string):"
msgstr ""

#: ../source/presentations/session04.rst:1413
msgid "JSON in Python"
msgstr ""

#: ../source/presentations/session04.rst:1415
msgid "You can encode python to json, and decode json back to python:"
msgstr ""

#: ../source/presentations/session04.rst:1434
msgid ""
"Customizing the encoder or decoder class allows for specialized "
"serializations"
msgstr ""

#: ../source/presentations/session04.rst:1439
msgid ""
"the json module also supports reading and writing to *file-like objects* "
"via ``json.dump(fp)`` and ``json.load(fp)`` (note the missing 's')"
msgstr ""

#: ../source/presentations/session04.rst:1445
msgid ""
"Remember duck-typing. Anything with a ``.write`` and a ``.read`` method "
"is *file-like*"
msgstr ""

#: ../source/presentations/session04.rst:1448
msgid "This usage can be much more memory-friendly with large files/sources"
msgstr ""

#: ../source/presentations/session04.rst:1452
msgid "Playing With REST"
msgstr ""

#: ../source/presentations/session04.rst:1454
msgid "Let's take a moment to play with REST."
msgstr ""

#: ../source/presentations/session04.rst:1459
msgid "We'll use a common, public API provided by Google."
msgstr ""

#: ../source/presentations/session04.rst:1463
msgid "**Geocoding**"
msgstr ""

#: ../source/presentations/session04.rst:1467
msgid "https://developers.google.com/maps/documentation/geocoding"
msgstr ""

#: ../source/presentations/session04.rst:1472
msgid "Open a python interpreter using our virtualenv::"
msgstr ""

#: ../source/presentations/session04.rst:1490
msgid ""
"You can do the same thing in reverse, supply latitude and longitude and "
"get back address information:"
msgstr ""

#: ../source/presentations/session04.rst:1506
msgid ""
"Notice that there may be a number of results returned, ordered from most "
"specific to least."
msgstr ""

#: ../source/presentations/session04.rst:1511
msgid "Mashing It Up"
msgstr ""

#: ../source/presentations/session04.rst:1513
msgid "Google's geocoding data is quite nice."
msgstr ""

#: ../source/presentations/session04.rst:1518
msgid "But it's not in a format we can use directly to create a map"
msgstr ""

#: ../source/presentations/session04.rst:1520
msgid "For that we need `geojson`"
msgstr ""

#: ../source/presentations/session04.rst:1522
msgid ""
"Moreover, formatting the data for all those requests is going to get "
"tedious."
msgstr ""

#: ../source/presentations/session04.rst:1525
msgid ""
"Luckily, people create *wrappers* for popular REST apis like google's "
"geocoding service."
msgstr ""

#: ../source/presentations/session04.rst:1528
msgid ""
"Once such wrapper is `geocoder`_, which provides not only google's "
"service, but many others under a single umbrella."
msgstr ""

#: ../source/presentations/session04.rst:1536
msgid "Install geocoder into your ``soupenv`` so that it's available to use:"
msgstr ""

#: ../source/presentations/session04.rst:1545
msgid ""
"Our final step for tonight will be to geocode the results we have scraped"
" from the inspection site."
msgstr ""

#: ../source/presentations/session04.rst:1548
msgid ""
"We'll then convert that to ``geojson``, insert our own properties and map"
" the results."
msgstr ""

#: ../source/presentations/session04.rst:1551
msgid ""
"Let's begin by converting our script so that what we have so far is "
"contained in a generator function"
msgstr ""

#: ../source/presentations/session04.rst:1554
msgid ""
"We'll eventually sort our results and generate the top 10 or so for "
"geocoding."
msgstr ""

#: ../source/presentations/session04.rst:1557
msgid "Open up ``mashup.py`` and copy everthing in the ``main`` block."
msgstr ""

#: ../source/presentations/session04.rst:1561
msgid ""
"Add a new function ``result_generator`` to the ``mashup.py`` script. "
"Paste the code you copied from the ``main`` block and then update it a "
"bit:"
msgstr ""

#: ../source/presentations/session04.rst:1587
msgid ""
"Update the ``main`` block of your ``mashup.py`` script to use the new "
"function:"
msgstr ""

#: ../source/presentations/session04.rst:1598
msgid ""
"Then run your script and verify that the only thing that has changed is "
"the number of results that print."
msgstr ""

#: ../source/presentations/session04.rst:1607
msgid "Add Geocoding"
msgstr ""

#: ../source/presentations/session04.rst:1609
msgid "The API for geocoding with ``geocoder`` is the same for all providers."
msgstr ""

#: ../source/presentations/session04.rst:1614
msgid "You give an address, it returns geocoded data."
msgstr ""

#: ../source/presentations/session04.rst:1616
msgid "You provide latitude and longitude, it provides address data"
msgstr ""

#: ../source/presentations/session04.rst:1628
msgid "Let's add a new function ``get_geojson`` to ``mashup.py``"
msgstr ""

#: ../source/presentations/session04.rst:1633
msgid "It will"
msgstr ""

#: ../source/presentations/session04.rst:1637
msgid "Take a result from our search as it's input"
msgstr ""

#: ../source/presentations/session04.rst:1638
msgid "Get geocoding data from google using the address of the restaurant"
msgstr ""

#: ../source/presentations/session04.rst:1639
msgid "Return the geojson representation of that data"
msgstr ""

#: ../source/presentations/session04.rst:1641
msgid "Try to write this function on your own"
msgstr ""

#: ../source/presentations/session04.rst:1654
msgid ""
"Next, update our ``main`` block to get the geojson for each result and "
"print it:"
msgstr ""

#: ../source/presentations/session04.rst:1667
msgid "Then test your results by running your script:"
msgstr ""

#: ../source/presentations/session04.rst:1686
msgid ""
"The ``properties`` of our geojson records are filled with data we don't "
"really care about."
msgstr ""

#: ../source/presentations/session04.rst:1692
msgid ""
"Let's replace that information with some of the metadata from our "
"inspection results."
msgstr ""

#: ../source/presentations/session04.rst:1695
msgid "We'll update our ``get_geojson`` function so that it:"
msgstr ""

#: ../source/presentations/session04.rst:1699
msgid ""
"Builds a dictionary containing only the values we want from our "
"inspection record."
msgstr ""

#: ../source/presentations/session04.rst:1701
msgid "Converts list values to strings (geojson requires this)"
msgstr ""

#: ../source/presentations/session04.rst:1702
msgid "Replaces the 'properties' of our geojson with this new data"
msgstr ""

#: ../source/presentations/session04.rst:1703
msgid "Returns the modified geojson record"
msgstr ""

#: ../source/presentations/session04.rst:1707
msgid "See if you can make the updates on your own."
msgstr ""

#: ../source/presentations/session04.rst:1731
msgid "We are now generating a series of ``geojson`` *Feature* objects."
msgstr ""

#: ../source/presentations/session04.rst:1736
msgid ""
"To map these objects, we'll need to create a file which contains a "
"``geojson`` *FeatureCollection*."
msgstr ""

#: ../source/presentations/session04.rst:1739
msgid "The structure of such a collection looks like this:"
msgstr ""

#: ../source/presentations/session04.rst:1745
msgid ""
"Let's update our ``main`` function to append each feature to such a "
"structure."
msgstr ""

#: ../source/presentations/session04.rst:1748
msgid "Then we can dump the structure as ``json`` to a file."
msgstr ""

#: ../source/presentations/session04.rst:1752
msgid "In ``mashup.py`` update the ``main`` block like so:"
msgstr ""

#: ../source/presentations/session04.rst:1770
msgid "When you run the script nothing will print, but the new file will appear."
msgstr ""

#: ../source/presentations/session04.rst:1776
msgid "This script is available as ``resources/session04/mashup_5.py``"
msgstr ""

#: ../source/presentations/session04.rst:1779
msgid "Display the Results"
msgstr ""

#: ../source/presentations/session04.rst:1781
msgid "Once the new file is written you are ready to display your results."
msgstr ""

#: ../source/presentations/session04.rst:1786
msgid "Open your web browser and go to http://geojson.io"
msgstr ""

#: ../source/presentations/session04.rst:1788
msgid "Then drag and drop the new file you wrote onto the map you see there."
msgstr ""

#: ../source/presentations/session04.rst:1795
msgid "Wrap Up"
msgstr ""

#: ../source/presentations/session04.rst:1797
msgid "We've built a simple mashup combining data from different sources."
msgstr ""

#: ../source/presentations/session04.rst:1802
msgid "We scraped health inspection data from the King County government site."
msgstr ""

#: ../source/presentations/session04.rst:1804
msgid "We geocoded that data."
msgstr ""

#: ../source/presentations/session04.rst:1806
msgid "And we've displayed the results on a map."
msgstr ""

#: ../source/presentations/session04.rst:1808
msgid "What other sources of data might we choose to combine?"
msgstr ""

#: ../source/presentations/session04.rst:1810
msgid ""
"Check out `programmable web "
"<http://www.programmableweb.com/apis/directory>`_ to see some of the "
"possibilities"
msgstr ""

#: ../source/presentations/session04.rst:1822
msgid "For your homework this week, you'll be polishing this mashup."
msgstr ""

#: ../source/presentations/session04.rst:1827
msgid ""
"Begin by sorting the results of our search by the average score (can you "
"do this and still use a generator for getting the geojson?)."
msgstr ""

#: ../source/presentations/session04.rst:1830
msgid ""
"Then, update your script to allow the user to choose how to sort, by "
"average, high score or most inspections::"
msgstr ""

#: ../source/presentations/session04.rst:1835
msgid "Next, allow the user to choose how many results to map::"
msgstr ""

#: ../source/presentations/session04.rst:1839
msgid "Or allow them to reverse the results, showing the lowest scores first::"
msgstr ""

#: ../source/presentations/session04.rst:1843
msgid ""
"If you're feeling particularly adventurous, see if you can use the "
"`argparse`_ module from the standard library to handle command line "
"arguments"
msgstr ""

#: ../source/presentations/session04.rst:1850
msgid "More Fun"
msgstr ""

#: ../source/presentations/session04.rst:1852
msgid ""
"Next, try adding a bit of information to your map by setting the "
"``marker-color`` property. This will display a marker with the provided "
"css-style color (``#FF0000``)"
msgstr ""

#: ../source/presentations/session04.rst:1859
msgid ""
"See if you can make the color change according to the values used for the"
" sorting of the list.  Either vary the intensity of the color, or the "
"hue."
msgstr ""

#: ../source/presentations/session04.rst:1862
msgid ""
"Finally, if you are feeling particularly frisky, you can update your "
"script to automatically open a browser window with your map loaded on "
"*geojson.io*."
msgstr ""

#: ../source/presentations/session04.rst:1866
msgid ""
"To do this, you'll want to read about the `webbrowser`_ module from the "
"standard library."
msgstr ""

#: ../source/presentations/session04.rst:1869
msgid ""
"In addition, you'll want to read up on using the URL parameters API for "
"*geojson.io*.  Click on the **help** tab in the sidebar to view the "
"information."
msgstr ""

#: ../source/presentations/session04.rst:1873
msgid ""
"You will also need to learn about how to properly quote special "
"characters for a URL, using the `urllib.parse`_ ``quote`` function."
msgstr ""

#: ../source/presentations/session04.rst:1880
#: ../source/presentations/session06.rst:1578
msgid "Submitting Your Work"
msgstr ""

#: ../source/presentations/session04.rst:1882
msgid ""
"Create a github repository to contain your mashup work. Start by "
"populating it with the script as we finished it today (mashup_5.py)."
msgstr ""

#: ../source/presentations/session04.rst:1885
msgid "As you implement the above features, commit early and commit often."
msgstr ""

#: ../source/presentations/session04.rst:1887
msgid ""
"When you're ready for us to look it over, email a link to your repository"
" to Maria and I."
msgstr ""

#: ../source/presentations/session05.rst:6
msgid "Session 05"
msgstr ""

#: ../source/presentations/session05.rst:15
msgid "MVC Applications"
msgstr ""

#: ../source/presentations/session05.rst:17
msgid ""
"Wherin we learn about the Model View Controller approach to app design "
"and explore data persistence in Python."
msgstr ""

#: ../source/presentations/session05.rst:24
#: ../source/presentations/session06.rst:135
#: ../source/presentations/session06.rst:570
msgid "By Alan Evangelista (Own work) [CC0], via Wikimedia Commons"
msgstr ""

#: ../source/presentations/session05.rst:27
msgid "Separation of Concerns"
msgstr ""

#: ../source/presentations/session05.rst:32
msgid ""
"In the first part of this course, you were introduced to the concept of "
"*Object Oriented Programming*"
msgstr ""

#: ../source/presentations/session05.rst:35
msgid ""
"OOP was `first formalized`_ in the 1970s in *Smalltalk*, invented by Alan"
" Kay at *Xerox PARC*"
msgstr ""

#: ../source/presentations/session05.rst:38
msgid ""
"*Smalltalk* was also the first language which utilized the `Model View "
"Controller`_ design pattern."
msgstr ""

#: ../source/presentations/session05.rst:41
msgid ""
"This pattern (like all `design patterns`_) seeks to provide a *way of "
"thinking* that helps to make software design easier."
msgstr ""

#: ../source/presentations/session05.rst:44
msgid ""
"In this case, the goal is to help clarify the high-level *separation of "
"concerns* in a system."
msgstr ""

#: ../source/presentations/session05.rst:52
msgid "Three Components"
msgstr ""

#: ../source/presentations/session05.rst:54
msgid "The pattern divides the elements of a system into three parts:"
msgstr ""

#: ../source/presentations/session05.rst:60
msgid "Model:"
msgstr ""

#: ../source/presentations/session05.rst:59
msgid ""
"This component represents the *data* that comprises the system, and the "
"*logic* used to manipulate that data."
msgstr ""

#: ../source/presentations/session05.rst:66
msgid "View:"
msgstr ""

#: ../source/presentations/session05.rst:63
msgid ""
"This component can be any *representation* of the data to the outside "
"world: a chart, diagram, table, user interface, etc."
msgstr ""

#: ../source/presentations/session05.rst:66
msgid "It also includes representations of the *actions* available in the system."
msgstr ""

#: ../source/presentations/session05.rst:74
msgid "Controller:"
msgstr ""

#: ../source/presentations/session05.rst:69
msgid "This component coordinates the Model and the View in a system."
msgstr ""

#: ../source/presentations/session05.rst:71
msgid "It accepts input from a user and channels that input into the Model."
msgstr ""

#: ../source/presentations/session05.rst:73
msgid ""
"It accepts information about the current state of the Model and transmits"
" that information to the View."
msgstr ""

#: ../source/presentations/session05.rst:77
msgid "On the Web"
msgstr ""

#: ../source/presentations/session05.rst:79
msgid ""
"This pattern has proven useful for thinking about the applications we "
"build for the web."
msgstr ""

#: ../source/presentations/session05.rst:85
msgid "A web browser provides a convenient container for *views* of data."
msgstr ""

#: ../source/presentations/session05.rst:87
msgid "These *views* are created by *controller* software hosted on a server."
msgstr ""

#: ../source/presentations/session05.rst:89
msgid ""
"This *controller* software accepts input from users via *HTTP requests*, "
"channeling it into a *data model*, often stored in some database."
msgstr ""

#: ../source/presentations/session05.rst:92
msgid ""
"The *controller* returns information about the state of the *data model* "
"to the user via *HTTP responses*"
msgstr ""

#: ../source/presentations/session05.rst:97
msgid ""
"This approach is so common, that it has been formalized into any number "
"of *web frameworks*"
msgstr ""

#: ../source/presentations/session05.rst:103
msgid ""
"*Web frameworks* abstract away the specifics of the *HTTP "
"request/response cycle*, leaving simple MVC components for the developer "
"to use."
msgstr ""

#: ../source/presentations/session05.rst:106
msgid "*Web frameworks* exist in nearly all modern languages."
msgstr ""

#: ../source/presentations/session05.rst:108
msgid "Python has scores of them."
msgstr ""

#: ../source/presentations/session05.rst:110
msgid ""
"Over the weeks to come, we'll learn about two of them, `Pyramid`_ and "
"`Django`_."
msgstr ""

#: ../source/presentations/session05.rst:117
msgid "A Word About Terminology"
msgstr ""

#: ../source/presentations/session05.rst:119
msgid ""
"Although the MVC pattern is a useful abstraction, there are a few "
"differences in how things are named in Python web frameworks"
msgstr ""

#: ../source/presentations/session05.rst:125
msgid "model <--> model"
msgstr ""

#: ../source/presentations/session05.rst:127
msgid "controller <--> view"
msgstr ""

#: ../source/presentations/session05.rst:129
msgid "view <--> template (or even HTTP response)"
msgstr ""

#: ../source/presentations/session05.rst:133
msgid ""
"For more on this difference, you can `read this`_ from the Pyramid design"
" documentation."
msgstr ""

#: ../source/presentations/session05.rst:139
msgid "Our First Application"
msgstr ""

#: ../source/presentations/session05.rst:143
msgid "But enough abstract blabbering."
msgstr ""

#: ../source/presentations/session05.rst:148
msgid ""
"There's no better way to make concepts like these concrete than to build "
"something using them."
msgstr ""

#: ../source/presentations/session05.rst:151
msgid "Let's make an application!"
msgstr ""

#: ../source/presentations/session05.rst:153
msgid "We're going to build a Learning Journal."
msgstr ""

#: ../source/presentations/session05.rst:155
msgid ""
"When we're done, you'll have a live, online application you can use to "
"keep note of the things you are learning about Python development."
msgstr ""

#: ../source/presentations/session05.rst:158
msgid "We'll use one of our Python web framework to do this: `Pyramid`_"
msgstr ""

#: ../source/presentations/session05.rst:161
msgid "Pyramid"
msgstr ""

#: ../source/presentations/session05.rst:163
msgid "First published in 2010, `Pyramid`_ is a powerful, flexible web framework."
msgstr ""

#: ../source/presentations/session05.rst:168
msgid ""
"You can create compelling one-page applications, much like in "
"microframeworks like Flask"
msgstr ""

#: ../source/presentations/session05.rst:171
msgid ""
"You can also create powerful, scalable applications using the full power "
"of Python"
msgstr ""

#: ../source/presentations/session05.rst:174
msgid "Created by the combined powers of the teams behind Pylons and Zope"
msgstr ""

#: ../source/presentations/session05.rst:176
msgid "It represents the first true second-generation web framework in existence."
msgstr ""

#: ../source/presentations/session05.rst:180
msgid "Starting the Project"
msgstr ""

#: ../source/presentations/session05.rst:182
msgid "The first step is to prepare for the project."
msgstr ""

#: ../source/presentations/session05.rst:187
msgid "Begin by creating a location where you'll do your work."
msgstr ""

#: ../source/presentations/session05.rst:189
msgid ""
"I generally put all my work in a folder called ``projects`` in my home "
"directory:"
msgstr ""

#: ../source/presentations/session05.rst:204
msgid ""
"We continue our preparations by creating the virtual environment we will "
"use for our project."
msgstr ""

#: ../source/presentations/session05.rst:210
msgid ""
"Again, this will help us to keep our work here isolated from anything "
"else we do."
msgstr ""

#: ../source/presentations/session05.rst:213
msgid "Remember how to make a new venv?"
msgstr ""

#: ../source/presentations/session05.rst:223
msgid "And then, how to activate it?"
msgstr ""

#: ../source/presentations/session05.rst:236
msgid "Next, we install the Pyramid web framework into our new virtualenv."
msgstr ""

#: ../source/presentations/session05.rst:241
msgid "We can do this with the ``pip`` in our active ``ljenv``:"
msgstr ""

#: ../source/presentations/session05.rst:254
msgid ""
"Once that is complete, we are ready to create a *scaffold* for our "
"project."
msgstr ""

#: ../source/presentations/session05.rst:257
msgid "Working with Pyramid"
msgstr ""

#: ../source/presentations/session05.rst:259
msgid ""
"Many web frameworks require at least a bit of *boilerplate* code to get "
"started."
msgstr ""

#: ../source/presentations/session05.rst:265
msgid "Pyramid does not."
msgstr ""

#: ../source/presentations/session05.rst:267
msgid ""
"However, our application will require a database and handling that does "
"require some."
msgstr ""

#: ../source/presentations/session05.rst:270
msgid "Pyramid provides a system for creating boilerplate called ``pcreate``."
msgstr ""

#: ../source/presentations/session05.rst:272
msgid "You use it to generate the skeleton for a project based on some pattern:"
msgstr ""

#: ../source/presentations/session05.rst:282
msgid "Let's take a quick look at what that did"
msgstr ""

#: ../source/presentations/session05.rst:307
msgid "You've now created something worth saving."
msgstr ""

#: ../source/presentations/session05.rst:312
msgid ""
"Start by initializing a new git repository in the `learning_journal` "
"folder you just created:"
msgstr ""

#: ../source/presentations/session05.rst:324
msgid "Check ``git status`` to see where things stand:"
msgstr ""

#: ../source/presentations/session05.rst:346
msgid "Add your work to this new repository:"
msgstr ""

#: ../source/presentations/session05.rst:364
msgid "Python creates ``.pyc`` files when it executes your code."
msgstr ""

#: ../source/presentations/session05.rst:369
msgid "There are many other files you don't want or need in your repository"
msgstr ""

#: ../source/presentations/session05.rst:371
msgid "You can ignore this in ``git`` with the ``.gitignore`` file."
msgstr ""

#: ../source/presentations/session05.rst:373
msgid ""
"Create one now, in this same directory, and add the following basic "
"lines::"
msgstr ""

#: ../source/presentations/session05.rst:378
msgid "Finally, add this new file to your repository, too."
msgstr ""

#: ../source/presentations/session05.rst:386
msgid "To preserve all these changes, you'll need to commit what you've done:"
msgstr ""

#: ../source/presentations/session05.rst:395
msgid "This will make a first commit here in this local repository."
msgstr ""

#: ../source/presentations/session05.rst:397
msgid "For homework, you'll put this into GitHub, but this is enough for now."
msgstr ""

#: ../source/presentations/session05.rst:399
msgid "Let's move on to learning about what we've built so far."
msgstr ""

#: ../source/presentations/session05.rst:403
msgid ""
"When you ran the ``pcreate`` command, a new folder was created: "
"``learning_journal``."
msgstr ""

#: ../source/presentations/session05.rst:409
msgid "This folder contains your *project*."
msgstr ""

#: ../source/presentations/session05.rst:411
msgid "At the top level, you have *configuration* (.ini files)"
msgstr ""

#: ../source/presentations/session05.rst:413
msgid "You also have a file called ``setup.py``"
msgstr ""

#: ../source/presentations/session05.rst:415
msgid ""
"This file turns this collection of Python code and configuration into an "
"*installable Python distribution*"
msgstr ""

#: ../source/presentations/session05.rst:418
msgid "Let's take a moment to look over the code in that file"
msgstr ""

#: ../source/presentations/session05.rst:444
msgid "Pyramid is Python"
msgstr ""

#: ../source/presentations/session05.rst:446
msgid ""
"In the ``__init__.py`` file of your app *package*, you'll find a ``main``"
" function:"
msgstr ""

#: ../source/presentations/session05.rst:464
msgid "Let's take a closer look at this, line by line."
msgstr ""

#: ../source/presentations/session05.rst:472
msgid ""
"Configuration is passed in to an application after being read from the "
"``.ini`` file we saw above."
msgstr ""

#: ../source/presentations/session05.rst:478
msgid ""
"These files contain sections (``[app:main]``) containing ``name = value``"
" pairs of *configuration data*"
msgstr ""

#: ../source/presentations/session05.rst:481
msgid ""
"This data is parsed with the Python `ConfigParser "
"<http://docs.python.org/2/library/configparser.html>`_ module."
msgstr ""

#: ../source/presentations/session05.rst:484
msgid "The result is a dict of values:"
msgstr ""

#: ../source/presentations/session05.rst:490
msgid ""
"The default section of the file is passed in as ``global_config``, the "
"section for *this app* as ``settings``."
msgstr ""

#: ../source/presentations/session05.rst:504
msgid "We will use a package called ``SQLAlchemy`` to interact with our database."
msgstr ""

#: ../source/presentations/session05.rst:509
msgid "Our connection is set up using settings read from the ``.ini`` file."
msgstr ""

#: ../source/presentations/session05.rst:511
msgid "Can you find the settings for the database?"
msgstr ""

#: ../source/presentations/session05.rst:513
msgid ""
"The ``DBSession`` ensures that each *database transaction* is tied to "
"HTTP requests."
msgstr ""

#: ../source/presentations/session05.rst:516
msgid ""
"The ``Base`` provides a parent class that will hook our *models* to the "
"database."
msgstr ""

#: ../source/presentations/session05.rst:529
msgid ""
"Pyramid controlls application-level configuration using a "
"``Configurator`` class."
msgstr ""

#: ../source/presentations/session05.rst:534
msgid "It uses app-specific settings passed in from the ``.ini`` file"
msgstr ""

#: ../source/presentations/session05.rst:536
msgid "We can also ``include`` configuration from other add-on packages"
msgstr ""

#: ../source/presentations/session05.rst:538
msgid ""
"Additionally, we can configure *routes* and *views* needed to connect our"
" application to the outside world here (more on this next week)."
msgstr ""

#: ../source/presentations/session05.rst:541
msgid ""
"Finally, the ``Configurator`` instance performs a ``scan`` to ensure "
"there are no problems with what we've created."
msgstr ""

#: ../source/presentations/session05.rst:546
msgid ""
"We will return to the configuration of our application repeatedly over "
"the next sessions."
msgstr ""

#: ../source/presentations/session05.rst:552
msgid "Pyramid configuration is powerful and flexible."
msgstr ""

#: ../source/presentations/session05.rst:554
msgid "We'll use a few of its features"
msgstr ""

#: ../source/presentations/session05.rst:556
msgid "But there's a lot more you could (and should) learn."
msgstr ""

#: ../source/presentations/session05.rst:558
msgid ""
"Read about it in the `configuration chapter`_ of the Pyramid "
"documentation."
msgstr ""

#: ../source/presentations/session05.rst:564
msgid "Let's take a moment to rest up and absorb what we've learned."
msgstr ""

#: ../source/presentations/session05.rst:566
msgid ""
"When we return, we'll see how we can create *models* that will embody the"
" data for our Learning Journal application."
msgstr ""

#: ../source/presentations/session05.rst:571
msgid "**Pyramid Models**"
msgstr ""

#: ../source/presentations/session05.rst:575
msgid "Models in Pyramid"
msgstr ""

#: ../source/presentations/session05.rst:580
msgid ""
"The central component of MVC, the model, captures the behavior of the "
"application in terms of its problem domain, independent of the user "
"interface. The model directly manages the data, logic and rules of the "
"application"
msgstr ""

#: ../source/presentations/session05.rst:585
msgid "-- from the Wikipedia article on `Model-view-controller`_"
msgstr ""

#: ../source/presentations/session05.rst:590
msgid "Models and ORMs"
msgstr ""

#: ../source/presentations/session05.rst:592
msgid ""
"In an MVC application, we define the *problem domain* by creating one or "
"more *Models*."
msgstr ""

#: ../source/presentations/session05.rst:598
msgid ""
"These capture relevant details about the information we want to preserve "
"and how we want to interact with it."
msgstr ""

#: ../source/presentations/session05.rst:601
msgid ""
"In Python-based MVC applications, these *Models* are implemented as "
"Python classes."
msgstr ""

#: ../source/presentations/session05.rst:604
msgid ""
"The individual bits of data we want to know about are *attributes* of our"
" classes."
msgstr ""

#: ../source/presentations/session05.rst:607
msgid "The actions we want to take using that data are *methods* of our classes."
msgstr ""

#: ../source/presentations/session05.rst:609
msgid "Together, we can refer to this as the *API* of our system."
msgstr ""

#: ../source/presentations/session05.rst:613
msgid ""
"It's all well and good to have a set of Python classes that represent "
"your system."
msgstr ""

#: ../source/presentations/session05.rst:619
msgid "But what happens when you want to *save* information."
msgstr ""

#: ../source/presentations/session05.rst:621
msgid "What happens to a instance of a Python class when you quit the interprer?"
msgstr ""

#: ../source/presentations/session05.rst:623
msgid "When your script stops running?"
msgstr ""

#: ../source/presentations/session05.rst:625
msgid "The code in a website runs when an HTTP request comes in from a client."
msgstr ""

#: ../source/presentations/session05.rst:627
msgid "It stops running when an HTTP response goes back out to the client."
msgstr ""

#: ../source/presentations/session05.rst:629
msgid "So what happens to the data in your system in-between these moments?"
msgstr ""

#: ../source/presentations/session05.rst:631
msgid "The data must be *persisted*"
msgstr ""

#: ../source/presentations/session05.rst:635
msgid ""
"In the last class from part one of this series, you explored a number of "
"alternatives for persistence"
msgstr ""

#: ../source/presentations/session05.rst:640
msgid "Python Literals"
msgstr ""

#: ../source/presentations/session05.rst:641
msgid "Pickle/Shelf"
msgstr ""

#: ../source/presentations/session05.rst:642
msgid "Interchange Files (CSV, XML, INI)"
msgstr ""

#: ../source/presentations/session05.rst:643
msgid "Object Stores (ZODB, Durus)"
msgstr ""

#: ../source/presentations/session05.rst:644
msgid "NoSQL Databases (MongoDB, CouchDB)"
msgstr ""

#: ../source/presentations/session05.rst:645
msgid "SQL Databases (sqlite, MySQL, PostgreSQL, Oracle, SQLServer)"
msgstr ""

#: ../source/presentations/session05.rst:650
msgid "Any of these might be useful for certain types of applications."
msgstr ""

#: ../source/presentations/session05.rst:652
msgid "On the web, you tend to see two used the most:"
msgstr ""

#: ../source/presentations/session05.rst:656
msgid "NoSQL"
msgstr ""

#: ../source/presentations/session05.rst:657
msgid "SQL"
msgstr ""

#: ../source/presentations/session05.rst:661
msgid "How do you choose one over the other?"
msgstr ""

#: ../source/presentations/session05.rst:666
msgid ""
"In general, the telling factor is going to be how you intend to use your "
"data."
msgstr ""

#: ../source/presentations/session05.rst:669
msgid ""
"In systems where the dominant feature is viewing/interacting with "
"individual objects, a NoSQL storage solution might be the best way to go."
msgstr ""

#: ../source/presentations/session05.rst:672
msgid ""
"In systems with objects that are related to eachother, SQL-based "
"Relational Databases are a better choice."
msgstr ""

#: ../source/presentations/session05.rst:675
msgid "Our system is more like this latter type (trust me on that one for now)."
msgstr ""

#: ../source/presentations/session05.rst:677
msgid "We'll be using SQL (sqlite to start with)."
msgstr ""

#: ../source/presentations/session05.rst:682
msgid "So we have a system where our data is captured in Python *objects*"
msgstr ""

#: ../source/presentations/session05.rst:687
msgid "And a storage system where our data must be rendered as database *tables*"
msgstr ""

#: ../source/presentations/session05.rst:689
msgid ""
"Python provides a specification for interacting directly with databases: "
"`dbapi2`_"
msgstr ""

#: ../source/presentations/session05.rst:692
msgid ""
"And there are multiple Python packages that implement this specification "
"for various databases:"
msgstr ""

#: ../source/presentations/session05.rst:697
msgid "sqlite3"
msgstr ""

#: ../source/presentations/session05.rst:698
msgid "python-mysql"
msgstr ""

#: ../source/presentations/session05.rst:699
msgid "psycopg2"
msgstr ""

#: ../source/presentations/session05.rst:702
msgid ""
"With these, you can write SQL to save your Python objects into your "
"database."
msgstr ""

#: ../source/presentations/session05.rst:709
msgid "But that's a pain."
msgstr ""

#: ../source/presentations/session05.rst:714
msgid "SQL, while not impossible, is yet another language to learn."
msgstr ""

#: ../source/presentations/session05.rst:716
msgid ""
"And there is a viable alternative in using an *Object Relational Manager*"
" (ORM)"
msgstr ""

#: ../source/presentations/session05.rst:719
msgid "An ORM provides a layer of *abstraction* between you and SQL"
msgstr ""

#: ../source/presentations/session05.rst:721
msgid "You instantiate Python objects and set attributes on them"
msgstr ""

#: ../source/presentations/session05.rst:723
msgid ""
"The ORM handles converting data from these objects into SQL statements "
"(and back)"
msgstr ""

#: ../source/presentations/session05.rst:727
msgid "SQLAlchemy"
msgstr ""

#: ../source/presentations/session05.rst:729
msgid "In our project we will be using the `SQLAlchemy`_ ORM."
msgstr ""

#: ../source/presentations/session05.rst:734
msgid ""
"You can find SQLAlchemy among the packages in ``requires`` in "
"``setup.py`` in our new ``learning_journal`` package."
msgstr ""

#: ../source/presentations/session05.rst:737
msgid "However, we don't yet have that code installed."
msgstr ""

#: ../source/presentations/session05.rst:739
msgid "To do so, we will need to \"install\" our own package"
msgstr ""

#: ../source/presentations/session05.rst:741
msgid "Make sure your ``ljenv`` virtualenv is active and then type the following:"
msgstr ""

#: ../source/presentations/session05.rst:754
msgid ""
"Once that is complete, all the *dependencies* listed in our ``setup.py`` "
"will be installed."
msgstr ""

#: ../source/presentations/session05.rst:760
msgid "You can also install the package using ``python setup.py install``"
msgstr ""

#: ../source/presentations/session05.rst:762
msgid ""
"But using ``develop`` allows us to continue developing our package "
"without needing to re-install it every time we change something."
msgstr ""

#: ../source/presentations/session05.rst:765
msgid "It is very similar to using the ``-e`` option to ``pip``"
msgstr ""

#: ../source/presentations/session05.rst:767
msgid ""
"Now, we'll only need to re-run this command if we change ``setup.py`` "
"itself."
msgstr ""

#: ../source/presentations/session05.rst:772
msgid "We also need to adjust our ``.gitignore`` file:"
msgstr ""

#: ../source/presentations/session05.rst:787
msgid ""
"The ``egg-info`` directory that was just created is an artifact of "
"installing a Python egg."
msgstr ""

#: ../source/presentations/session05.rst:790
msgid "It should never be committed to a repository."
msgstr ""

#: ../source/presentations/session05.rst:792
msgid ""
"Let's add ``*.egg-info`` to our ``.gitignore`` file and then commit that "
"change"
msgstr ""

#: ../source/presentations/session05.rst:795
msgid "Remember how?"
msgstr ""

#: ../source/presentations/session05.rst:799
msgid "Our project skeleton contains up a first, basic model created for us:"
msgstr ""

#: ../source/presentations/session05.rst:818
msgid "Our class inherits from ``Base``"
msgstr ""

#: ../source/presentations/session05.rst:820
msgid "We ran into ``Base`` earlier when discussing configuration."
msgstr ""

#: ../source/presentations/session05.rst:822
msgid "We were binding it to the database we wanted to use (the ``engine``)"
msgstr ""

#: ../source/presentations/session05.rst:826
msgid "Any class we create that inherits from this ``Base`` becomes a *model*"
msgstr ""

#: ../source/presentations/session05.rst:831
msgid "It will be connected through the ORM to a table in our database."
msgstr ""

#: ../source/presentations/session05.rst:833
msgid ""
"The name of the table is determined by the ``__tablename__`` special "
"attribute."
msgstr ""

#: ../source/presentations/session05.rst:836
msgid ""
"Other aspects of table configuration can also be controlled through "
"special attributes"
msgstr ""

#: ../source/presentations/session05.rst:839
msgid "Instances of the class, once saved, will become rows in the table."
msgstr ""

#: ../source/presentations/session05.rst:841
msgid ""
"Attributes of the model that are instances of ``Column`` will become "
"columns in the table."
msgstr ""

#: ../source/presentations/session05.rst:844
msgid ""
"You can learn much more in the `Declarative`_ chapter of the SQLAlchemy "
"docs"
msgstr ""

#: ../source/presentations/session05.rst:850
msgid ""
"Each attribute of your model that will be persisted must be an instance "
"of `Column`_."
msgstr ""

#: ../source/presentations/session05.rst:856
msgid ""
"Each instance requires *at least* a specific `data type`_ (such as "
"Integer)."
msgstr ""

#: ../source/presentations/session05.rst:859
msgid ""
"Additionally, you can control other aspects of the column such as it "
"being a primary key."
msgstr ""

#: ../source/presentations/session05.rst:862
msgid ""
"In the *declarative* style we are using, the name of the column in the "
"database will default to the attribute name you assigned."
msgstr ""

#: ../source/presentations/session05.rst:865
msgid ""
"If you wish, you may provide a name specifically.  It must be the first "
"argument and must be a string."
msgstr ""

#: ../source/presentations/session05.rst:872
msgid "Creating The Database"
msgstr ""

#: ../source/presentations/session05.rst:874
msgid ""
"We have a *model* which allows us to persist Python objects to an SQL "
"database."
msgstr ""

#: ../source/presentations/session05.rst:879
msgid "But we're still missing one ingredient here."
msgstr ""

#: ../source/presentations/session05.rst:881
msgid ""
"We need to create our database, or there will be nowhere for our data to "
"go."
msgstr ""

#: ../source/presentations/session05.rst:884
msgid ""
"Luckily, our ``pcreate`` scaffold also gave us a convenient way to handle"
" this:"
msgstr ""

#: ../source/presentations/session05.rst:897
msgid "The ``console_script`` set up as an entry point will help us."
msgstr ""

#: ../source/presentations/session05.rst:901
msgid "Let's look at that code for a moment."
msgstr ""

#: ../source/presentations/session05.rst:924
msgid ""
"By connecting this function as a ``console script``, our Python package "
"makes this command available to us when we install it."
msgstr ""

#: ../source/presentations/session05.rst:930
msgid ""
"When we exectute the script at the command line, we will be running this "
"function."
msgstr ""

#: ../source/presentations/session05.rst:933
msgid ""
"But before we try it out, let's update the name we use so we don't have "
"to type that whole big mess."
msgstr ""

#: ../source/presentations/session05.rst:936
msgid "In ``setup.py`` change ``initialize_learning_journal_db`` to ``setup_db``:"
msgstr ""

#: ../source/presentations/session05.rst:947
msgid "Then, as you have changed ``setup.py``, re-install your package:"
msgstr ""

#: ../source/presentations/session05.rst:956
msgid "Now that the script has been renamed, let's try it out."
msgstr ""

#: ../source/presentations/session05.rst:961
msgid ""
"We'll need to provide a configuration file name, let's use "
"``development.ini``:"
msgstr ""

#: ../source/presentations/session05.rst:971
msgid ""
"The ``[loggers]`` configuration in our ``.ini`` file sends a stream of "
"INFO-level logging to sys.stdout as the console script runs."
msgstr ""

#: ../source/presentations/session05.rst:976
msgid "So what was the outcome of running that script?"
msgstr ""

#: ../source/presentations/session05.rst:988
msgid "We've now created an sqlite database."
msgstr ""

#: ../source/presentations/session05.rst:990
msgid ""
"You'll need to add ``*.sqlite`` to ``.gitignore`` so you don't "
"inadvertently add that file to your repository."
msgstr ""

#: ../source/presentations/session05.rst:993
msgid "Once you've done so, commit the change to your repository"
msgstr ""

#: ../source/presentations/session05.rst:996
msgid "Interacting with SQLA Models"
msgstr ""

#: ../source/presentations/session05.rst:998
msgid "It's pretty easy to play with your models from in an interpreter."
msgstr ""

#: ../source/presentations/session05.rst:1003
msgid ""
"But before we do so, let's make a nicer interpreter available for our "
"project"
msgstr ""

#: ../source/presentations/session05.rst:1006
msgid "You've been using iPython in class, we can use it here too."
msgstr ""

#: ../source/presentations/session05.rst:1008
msgid "Just install it with ``pip``:"
msgstr ""

#: ../source/presentations/session05.rst:1014
msgid ""
"Once that finishes, you'll be able to use iPython as your interpreter for"
" this project."
msgstr ""

#: ../source/presentations/session05.rst:1017
msgid ""
"And ``Pyramid`` provides a way to connect your interpreter to the "
"application code you are writing:"
msgstr ""

#: ../source/presentations/session05.rst:1020
msgid "The ``pshell`` command"
msgstr ""

#: ../source/presentations/session05.rst:1024
msgid ""
"Let's fire up ``pshell`` and explore for a moment to see what we have at "
"our disposal:"
msgstr ""

#: ../source/presentations/session05.rst:1051
msgid ""
"The ``environment`` created by ``pshell`` provides us with a few useful "
"tools."
msgstr ""

#: ../source/presentations/session05.rst:1063
msgid "The ``app`` is our new learning journal application"
msgstr ""

#: ../source/presentations/session05.rst:1064
msgid ""
"The ``registry`` provides us with access to settings and other useful "
"information"
msgstr ""

#: ../source/presentations/session05.rst:1066
msgid ""
"The ``request`` is an artificial HTTP request we can use if we need to "
"pretend we are listening to clients"
msgstr ""

#: ../source/presentations/session05.rst:1072
msgid ""
"Let's use this environment to build a database session and interact with "
"our data:"
msgstr ""

#: ../source/presentations/session05.rst:1090
msgid "We've stolen a lot of this from the ``initializedb.py`` script"
msgstr ""

#: ../source/presentations/session05.rst:1094
msgid "Any interaction with the database requires a ``session``."
msgstr ""

#: ../source/presentations/session05.rst:1099
msgid "This object represents the connection to the database."
msgstr ""

#: ../source/presentations/session05.rst:1101
msgid "All database queries are phrased as methods of the session."
msgstr ""

#: ../source/presentations/session05.rst:1111
msgid "The ``query`` method of the session object returns a ``Query`` object"
msgstr ""

#: ../source/presentations/session05.rst:1113
msgid ""
"Arguments to the ``query`` method can be a *model* class or *columns* "
"from a model class."
msgstr ""

#: ../source/presentations/session05.rst:1118
#: ../source/presentations/session05.rst:1135
msgid ""
"You can iterate over a query object. The result depends on the args you "
"passed."
msgstr ""

#: ../source/presentations/session05.rst:1157
msgid "You can view the SQL that your query will use:"
msgstr ""

#: ../source/presentations/session05.rst:1170
msgid ""
"You can use this to check that the query the ORM is constructing looks "
"like you expect."
msgstr ""

#: ../source/presentations/session05.rst:1173
msgid "It can be helpful in debugging."
msgstr ""

#: ../source/presentations/session05.rst:1177
msgid "The methods of the ``Query`` object fall into two rough categories"
msgstr ""

#: ../source/presentations/session05.rst:1184
msgid "Methods that return a new ``Query`` object"
msgstr ""

#: ../source/presentations/session05.rst:1185
msgid "Methods that return *scalar* values or *model* instances"
msgstr ""

#: ../source/presentations/session05.rst:1187
msgid "Let's start by looking quickly at a few methods from the second category"
msgstr ""

#: ../source/presentations/session05.rst:1191
msgid ""
"A good example of this category of methods is ``get``, which returns one "
"instance only."
msgstr ""

#: ../source/presentations/session05.rst:1197
msgid "It takes a primary key as an argument:"
msgstr ""

#: ../source/presentations/session05.rst:1207
msgid ""
"If no item with that primary key is present, then the method returns "
"``None``"
msgstr ""

#: ../source/presentations/session05.rst:1212
msgid "Another example is one we've already seen."
msgstr ""

#: ../source/presentations/session05.rst:1217
msgid "``query.all()`` returns a list of all rows returned by the database:"
msgstr ""

#: ../source/presentations/session05.rst:1227
msgid ""
"``query.count()`` returns the number of rows that would have been "
"returned by the query:"
msgstr ""

#: ../source/presentations/session05.rst:1237
msgid ""
"Before getting into the other category, let's learn how to create new "
"objects."
msgstr ""

#: ../source/presentations/session05.rst:1244
msgid ""
"We can create new instances of our *model* just like normal Python "
"objects:"
msgstr ""

#: ../source/presentations/session05.rst:1255
msgid ""
"In this state, the instance is *ephemeral*, our ``session`` knows nothing"
" about it:"
msgstr ""

#: ../source/presentations/session05.rst:1265
msgid ""
"For the database to know about our new object, we must ``add`` it to the "
"session:"
msgstr ""

#: ../source/presentations/session05.rst:1277
msgid "We can even bulk-add new objects:"
msgstr ""

#: ../source/presentations/session05.rst:1293
msgid "Up until now, the changes you've made are not permanent."
msgstr ""

#: ../source/presentations/session05.rst:1298
msgid ""
"In order for these new objects to be saved to the database, the session "
"must be ``committed``:"
msgstr ""

#: ../source/presentations/session05.rst:1310
msgid ""
"When you are using a ``scoped_session`` in Pyramid, this action is "
"automatically handled for you."
msgstr ""

#: ../source/presentations/session05.rst:1313
msgid ""
"The session that is bound to a particular HTTP request is committed when "
"a response is sent back."
msgstr ""

#: ../source/presentations/session05.rst:1316
msgid "(don't worry if this seems confusing, more to come next week)"
msgstr ""

#: ../source/presentations/session05.rst:1320
msgid ""
"You can edit objects that are already part of a session, or that are "
"fetched by a query."
msgstr ""

#: ../source/presentations/session05.rst:1326
msgid ""
"Simply change the values of a persisted attribute, the session will know "
"it's been updated:"
msgstr ""

#: ../source/presentations/session05.rst:1339
msgid "Commit the session to persist the changes:"
msgstr ""

#: ../source/presentations/session05.rst:1349
msgid ""
"Returning to query methods, a good example of the second type is the "
"``filter`` method."
msgstr ""

#: ../source/presentations/session05.rst:1355
msgid "This method allows you to reduce the number of results, based on criteria:"
msgstr ""

#: ../source/presentations/session05.rst:1364
msgid "Another typical method in this category is ``order_by``:"
msgstr ""

#: ../source/presentations/session05.rst:1379
msgid ""
"Since methods in this category return ``Query`` objects, they can be "
"safely *chained* to build more complex queries:"
msgstr ""

#: ../source/presentations/session05.rst:1392
msgid ""
"Note that you can do this inline as well "
"(``s.query(Model).filter().order_by()``)"
msgstr ""

#: ../source/presentations/session05.rst:1395
msgid ""
"Also note that when using chained queries like this, no query is actually"
" sent to the database until you require a result."
msgstr ""

#: ../source/presentations/session05.rst:1400
msgid "Cleaning Up After Ourselves"
msgstr ""

#: ../source/presentations/session05.rst:1402
msgid ""
"When you are experimenting with a new system, you often create data that "
"is messy or incomplete."
msgstr ""

#: ../source/presentations/session05.rst:1408
msgid ""
"It's good to remember that none of the information we've persisted to our"
" database is vital to us."
msgstr ""

#: ../source/presentations/session05.rst:1411
msgid ""
"For homework this week we'll be making new models, and the data we have "
"in our current database will only get in the way."
msgstr ""

#: ../source/presentations/session05.rst:1414
msgid ""
"Until you have real production data it is always safe simply to delete "
"the database and start over:"
msgstr ""

#: ../source/presentations/session05.rst:1421
msgid "You can always re-create it by executing ``setup_db``"
msgstr ""

#: ../source/presentations/session05.rst:1428
msgid "Okay, that's enough for the moment."
msgstr ""

#: ../source/presentations/session05.rst:1433
msgid "You've learned quite a bit about how *models* work in SQLAlchemy"
msgstr ""

#: ../source/presentations/session05.rst:1435
msgid "It's time to put that knowledge to good use."
msgstr ""

#: ../source/presentations/session05.rst:1437
msgid ""
"For the first part of your assignment this week you will begin to define "
"the data model for our learning journal application."
msgstr ""

#: ../source/presentations/session05.rst:1440
msgid "I'll provide a specification, you define the model required to do the job."
msgstr ""

#: ../source/presentations/session05.rst:1442
msgid ""
"I'll also ask you to define a few methods to complete the first part of "
"our API."
msgstr ""

#: ../source/presentations/session05.rst:1446
msgid "The Model"
msgstr ""

#: ../source/presentations/session05.rst:1448
msgid "Our model will be called an ``Entry``. Here's what you need to know:"
msgstr ""

#: ../source/presentations/session05.rst:1450
msgid "It should be stored in a database table called ``entries``"
msgstr ""

#: ../source/presentations/session05.rst:1451
msgid "It should have a primary key field called ``id``"
msgstr ""

#: ../source/presentations/session05.rst:1452
msgid ""
"It should have a ``title`` field which accepts unicode text up to 255 "
"characters in length"
msgstr ""

#: ../source/presentations/session05.rst:1453
msgid ""
"The ``title`` should be unique and it should be impossible to save an "
"``entry`` without a ``title``."
msgstr ""

#: ../source/presentations/session05.rst:1455
msgid ""
"It should have a ``body`` field which accepts unicode text of any length "
"(including none)"
msgstr ""

#: ../source/presentations/session05.rst:1457
msgid ""
"It should have a ``created`` field which stores the date and time the "
"object was created."
msgstr ""

#: ../source/presentations/session05.rst:1459
msgid ""
"It should have an ``edited`` field which stores the date and time the "
"object was last edited."
msgstr ""

#: ../source/presentations/session05.rst:1464
msgid ""
"Both the ``created`` and ``edited`` field should default to ``now`` if "
"not provided when a new instance is constructed."
msgstr ""

#: ../source/presentations/session05.rst:1466
msgid ""
"The ``entry`` class should support a classmethod ``all`` that returns all"
" the entries in the database, ordered so that the most recent entry is "
"first."
msgstr ""

#: ../source/presentations/session05.rst:1468
msgid ""
"The ``entry`` class should support a classmethod ``by_id`` that returns a"
" single entry, given an ``id``."
msgstr ""

#: ../source/presentations/session05.rst:1471
msgid ""
"Remember that in order to have your new model table created, you will "
"have to re-run the ``initialize_learning_journal_db`` script after "
"creating your model."
msgstr ""

#: ../source/presentations/session05.rst:1476
msgid ""
"Use the documentation linked in this presentation to assist you.  "
"SQLAlchemy has fantastic documentation, but it can be a bit overwhelming."
"  Everything you require for this assignment is on one or more of the "
"pages linked above."
msgstr ""

#: ../source/presentations/session05.rst:1480
msgid ""
"As you define this new model for our application, make frequent commits "
"to your github repository. Remember to write meaningful commit messages."
msgstr ""

#: ../source/presentations/session05.rst:1483
msgid ""
"Don't be afraid to start up a Python interpreter and play with your "
"model. Try things out. Learn how this all works by making mistakes. "
"Remember the ``pshell`` command and how we set up a session once the "
"shell is running."
msgstr ""

#: ../source/presentations/session05.rst:1487
msgid ""
"Errors at the SQL level can sometimes leave your session unusable. To "
"restore it, use the ``session.rollback()`` method.  You'll lose "
"uncommitted changes, but you'll gain a session that can be used again."
msgstr ""

#: ../source/presentations/session05.rst:1493
msgid ""
"I want to be able to review your code (and you want to be able to share "
"it)."
msgstr ""

#: ../source/presentations/session05.rst:1495
msgid ""
"To submit this assignment, you'll need to add this learning_journal "
"repository to GitHub."
msgstr ""

#: ../source/presentations/session05.rst:1498
msgid ""
"On the GitHub website you can create a new repository.  Set it up to be "
"completely empty. Name it ``learning_journal`` and give it any "
"description you like."
msgstr ""

#: ../source/presentations/session05.rst:1502
msgid ""
"When you've created an empty repository in GitHub, you should see a set "
"of directions for connecting it to a repository that you've already "
"built. Follow those instructions to connect your emtpy GitHub repository "
"as the ``origin`` remote to your ``learning_journal`` repository on your "
"machine."
msgstr ""

#: ../source/presentations/session05.rst:1507
msgid ""
"Finally, push your ``master`` branch to your new ``origin`` remote on "
"GitHub."
msgstr ""

#: ../source/presentations/session05.rst:1509
msgid "When you are done, send me an email with the URL for your new repository."
msgstr ""

#: ../source/presentations/session05.rst:1513
msgid "**Our work next week will assume that you have completed this assignment**"
msgstr ""

#: ../source/presentations/session05.rst:1515
msgid "Do not delay working on this until the last moment."
msgstr ""

#: ../source/presentations/session05.rst:1517
msgid "Do not skip this assignment."
msgstr ""

#: ../source/presentations/session05.rst:1519
msgid "Do ask questions frequently via email (use the `class google group`_)."
msgstr ""

#: ../source/presentations/session05.rst:1521
msgid "See you next week!"
msgstr ""

#: ../source/presentations/session06.rst:6
msgid "Session 06"
msgstr ""

#: ../source/presentations/session06.rst:13
msgid "Interacting with Data"
msgstr ""

#: ../source/presentations/session06.rst:15
msgid "**Wherein we learn to display our data, and to create and edit it too!**"
msgstr ""

#: ../source/presentations/session06.rst:21
msgid ""
"Last week we discussed the **model** part of the *MVC* application design"
" pattern."
msgstr ""

#: ../source/presentations/session06.rst:27
msgid ""
"We set up a project using the `Pyramid`_ web framework and the "
"`SQLAlchemy`_ library for persisting our data to a database."
msgstr ""

#: ../source/presentations/session06.rst:30
msgid ""
"We looked at how to define a simple model by investigating the demo model"
" created on our behalf."
msgstr ""

#: ../source/presentations/session06.rst:33
msgid ""
"And we went over, briefly, the way we can interact with this model at the"
" command line to make sure we've got it right."
msgstr ""

#: ../source/presentations/session06.rst:36
msgid ""
"Finally, we defined what attributes a learning journal entry would have, "
"and a pair of methods we think we will need to make the model complete."
msgstr ""

#: ../source/presentations/session06.rst:43
msgid "Our Data Model"
msgstr ""

#: ../source/presentations/session06.rst:45
msgid "Over the last week, your assignment was to create the new model."
msgstr ""

#: ../source/presentations/session06.rst:50
msgid "Did you get that done?"
msgstr ""

#: ../source/presentations/session06.rst:52
msgid "If not, what stopped you?"
msgstr ""

#: ../source/presentations/session06.rst:54
msgid ""
"Let's take a few minutes here to answer questions about this task so you "
"are more comfortable."
msgstr ""

#: ../source/presentations/session06.rst:57
msgid "Questions?"
msgstr ""

#: ../source/presentations/session06.rst:61
msgid ""
"I've added a working ``models.py`` file to our `class repository`_ in the"
" ``resources/session06/`` folder."
msgstr ""

#: ../source/presentations/session06.rst:64
msgid "Let's review how it works."
msgstr ""

#: ../source/presentations/session06.rst:70
msgid ""
"I've also made a few small changes to make the ``pshell`` command a bit "
"more helpful."
msgstr ""

#: ../source/presentations/session06.rst:76
msgid "In ``learning_journal/__init__.py`` I added the following function:"
msgstr ""

#: ../source/presentations/session06.rst:86
msgid "Then, in ``development.ini`` I added the following configuration:"
msgstr ""

#: ../source/presentations/session06.rst:96
msgid "Here's a demo interaction using ``pshell`` with these new features:"
msgstr ""

#: ../source/presentations/session06.rst:101
msgid ""
"First ``cd`` to your project code, fire up your project virtualenv and "
"start python:"
msgstr ""

#: ../source/presentations/session06.rst:120
msgid "[demo]"
msgstr ""

#: ../source/presentations/session06.rst:123
msgid "The MVC Controller"
msgstr ""

#: ../source/presentations/session06.rst:128
msgid ""
"Let's go back to thinking for a bit about the *Model-View-Controller* "
"pattern."
msgstr ""

#: ../source/presentations/session06.rst:140
msgid "We talked last week (and today) about the *model*"
msgstr ""

#: ../source/presentations/session06.rst:142
msgid "Today, we'll dig into *controllers* and *views*"
msgstr ""

#: ../source/presentations/session06.rst:144
msgid "or as we will know them in Pyramid: *views* and *renderers*"
msgstr ""

#: ../source/presentations/session06.rst:148
msgid "HTTP Request/Response"
msgstr ""

#: ../source/presentations/session06.rst:150
msgid "Internet software is driven by the HTTP Request/Response cycle."
msgstr ""

#: ../source/presentations/session06.rst:155
msgid "A *client* (perhaps a user with a web browser) makes a **request**"
msgstr ""

#: ../source/presentations/session06.rst:157
msgid "A *server* receives and handles that request and returns a **response**"
msgstr ""

#: ../source/presentations/session06.rst:159
msgid ""
"The *client* receives the response and views it, perhaps making a new "
"**request**"
msgstr ""

#: ../source/presentations/session06.rst:162
msgid "And around and around it goes."
msgstr ""

#: ../source/presentations/session06.rst:166
msgid "An HTTP request arrives at a server through the magic of a **URL**"
msgstr ""

#: ../source/presentations/session06.rst:175
msgid "Let's break that up into its constituent parts:"
msgstr ""

#: ../source/presentations/session06.rst:180
msgid "\\http://:"
msgstr ""

#: ../source/presentations/session06.rst:180
msgid "This part is the *protocol*, it determines how the request will be sent"
msgstr ""

#: ../source/presentations/session06.rst:184
msgid "uwpce-pythoncert.github.io:"
msgstr ""

#: ../source/presentations/session06.rst:183
msgid ""
"This is a *domain name*.  It's the human-facing address for a server "
"somewhere."
msgstr ""

#: ../source/presentations/session06.rst:187
msgid "/training.python_web/html/index.html:"
msgstr ""

#: ../source/presentations/session06.rst:187
msgid ""
"This part is the *path*.  It serves as a locator for a resource *on the "
"server*"
msgstr ""

#: ../source/presentations/session06.rst:192
msgid ""
"In a static website (like our documentation) the *path* identifies a "
"**physical location** in the server's filesystem."
msgstr ""

#: ../source/presentations/session06.rst:198
msgid ""
"Some directory on the server is the *home* for the web process, and the "
"*path* is looked up there."
msgstr ""

#: ../source/presentations/session06.rst:201
msgid ""
"Whatever resource (a file, an image, whatever) is located there is "
"returned to the user as a response."
msgstr ""

#: ../source/presentations/session06.rst:204
msgid ""
"If the path leads to a location that doesn't exist, the server responds "
"with a **404 Not Found** error."
msgstr ""

#: ../source/presentations/session06.rst:207
msgid ""
"In the golden days of yore, this was the only way content was served via "
"HTTP."
msgstr ""

#: ../source/presentations/session06.rst:212
msgid ""
"In todays world we have dynamic systems, server-side web frameworks like "
"Pyramid."
msgstr ""

#: ../source/presentations/session06.rst:218
msgid ""
"The requests that you send to a server are handled by a software process "
"that assembles a response instead of looking up a physical location."
msgstr ""

#: ../source/presentations/session06.rst:221
msgid "But we still have URLs, with *protocol*, *domain* and *path*."
msgstr ""

#: ../source/presentations/session06.rst:223
msgid ""
"What is the role for a path in a process that doesn't refer to a physical"
" file system?"
msgstr ""

#: ../source/presentations/session06.rst:226
msgid "Most web frameworks now call the *path* a **route**."
msgstr ""

#: ../source/presentations/session06.rst:228
msgid ""
"They provide a way of matching *routes* to the code that will be run to "
"handle requests."
msgstr ""

#: ../source/presentations/session06.rst:232
msgid "Routes in Pyramid"
msgstr ""

#: ../source/presentations/session06.rst:234
msgid ""
"In Pyramid, routes are handled as *configuration* and are set up in the "
"*main* function in ``__init__.py``:"
msgstr ""

#: ../source/presentations/session06.rst:248
msgid ""
"Our code template created a sample route for us, using the ``add_route`` "
"method of the ``Configurator`` class."
msgstr ""

#: ../source/presentations/session06.rst:251
msgid ""
"The ``add_route`` method has two required arguments: a *name* and a "
"*pattern*"
msgstr ""

#: ../source/presentations/session06.rst:254
msgid "In our sample route, the *name* is ``'home'``"
msgstr ""

#: ../source/presentations/session06.rst:256
msgid "In our sample route, the *pattern* is ``'/'``"
msgstr ""

#: ../source/presentations/session06.rst:260
msgid ""
"When a request comes in to a Pyramid application, the framework looks at "
"all the *routes* that have been configured."
msgstr ""

#: ../source/presentations/session06.rst:266
msgid ""
"One by one, in order, it tries to match the *path* of the incoming "
"request against the *pattern* of the route."
msgstr ""

#: ../source/presentations/session06.rst:269
msgid ""
"As soon as a *pattern* matches the *path* from the incoming request, that"
" route is used and no further matching is performed."
msgstr ""

#: ../source/presentations/session06.rst:272
msgid ""
"If no route is found that matches, then the request will automatically "
"get a **404 Not Found** error response."
msgstr ""

#: ../source/presentations/session06.rst:275
msgid ""
"In our sample app, we have one sample *route* named ``'home'``, with a "
"pattern of ``/``."
msgstr ""

#: ../source/presentations/session06.rst:278
msgid ""
"This means that any request that comes in for ``/`` will be matched to "
"this route, and any other request will be **404**."
msgstr ""

#: ../source/presentations/session06.rst:283
msgid ""
"In a very real sense, the *routes* defined in an application *are* the "
"public API."
msgstr ""

#: ../source/presentations/session06.rst:289
msgid "Any route that is present represents something the user can do."
msgstr ""

#: ../source/presentations/session06.rst:291
msgid "Any route that is not present is something the user cannot do."
msgstr ""

#: ../source/presentations/session06.rst:293
msgid ""
"You can use the proper definition of routes to help conceptualize what "
"your app will do."
msgstr ""

#: ../source/presentations/session06.rst:296
msgid "What routes might we want for a learning journal application?"
msgstr ""

#: ../source/presentations/session06.rst:298
msgid "What will our application do?"
msgstr ""

#: ../source/presentations/session06.rst:302
msgid "Let's add routes for our application."
msgstr ""

#: ../source/presentations/session06.rst:307
msgid "Open ``learning_journal/__init__.py``."
msgstr ""

#: ../source/presentations/session06.rst:309
msgid "For our list page, the existing ``'home'`` route will do fine, leave it."
msgstr ""

#: ../source/presentations/session06.rst:311
msgid "Add the following two routes:"
msgstr ""

#: ../source/presentations/session06.rst:319
msgid ""
"The ``'detail'`` route will serve a single journal entry, identified by "
"an ``id``."
msgstr ""

#: ../source/presentations/session06.rst:322
msgid ""
"The ``action`` route will serve ``create`` and ``edit`` views, depending "
"on the ``action`` specified."
msgstr ""

#: ../source/presentations/session06.rst:325
msgid ""
"In both cases, we want to capture a portion of the matched path to use "
"information it provides."
msgstr ""

#: ../source/presentations/session06.rst:330
msgid ""
"In a pattern, you can capture a ``path segment`` *replacement marker*, a "
"valid Python symbol surrounded by curly braces:"
msgstr ""

#: ../source/presentations/session06.rst:340
msgid ""
"If you want to match a particular pattern, like digits only, add a "
"*regular expression*::"
msgstr ""

#: ../source/presentations/session06.rst:345
msgid "Matched path segments are captured in a ``matchdict``::"
msgstr ""

#: ../source/presentations/session06.rst:350
msgid ""
"The ``matchdict`` is made available as an attribute of the *request "
"object*"
msgstr ""

#: ../source/presentations/session06.rst:352
msgid "(more on that soon)"
msgstr ""

#: ../source/presentations/session06.rst:357
msgid "In Pyramid, a *route* is connected by configuration to a *view*."
msgstr ""

#: ../source/presentations/session06.rst:362
msgid "In our app, a sample view has been created for us, in ``views.py``:"
msgstr ""

#: ../source/presentations/session06.rst:370
msgid ""
"The order in which *routes* are configured *is important*, so that must "
"be done in ``__init__.py``."
msgstr ""

#: ../source/presentations/session06.rst:373
msgid ""
"The order in which views are connected to routes *is not important*, so "
"the *declarative* ``@view_config`` decorator can be used."
msgstr ""

#: ../source/presentations/session06.rst:376
msgid ""
"When ``config.scan`` is called, all files in our application are searched"
" for such *declarative configuration* and it is added."
msgstr ""

#: ../source/presentations/session06.rst:380
msgid "The Pyramid View"
msgstr ""

#: ../source/presentations/session06.rst:382
msgid ""
"Let's imagine that a *request* has come to our application for the path "
"``'/'``."
msgstr ""

#: ../source/presentations/session06.rst:388
msgid ""
"The framework made a match of that path to a *route* with the pattern "
"``'/'``."
msgstr ""

#: ../source/presentations/session06.rst:390
msgid "Configuration connected that route to a *view* in our application."
msgstr ""

#: ../source/presentations/session06.rst:392
msgid ""
"Now, the view that was connected will be *called*, which brings us to the"
" nature of *views*"
msgstr ""

#: ../source/presentations/session06.rst:397
msgid "--A Pyramid view is a *callable* that takes *request* as an argument--"
msgstr ""

#: ../source/presentations/session06.rst:399
msgid "Remember what a *callable* is?"
msgstr ""

#: ../source/presentations/session06.rst:403
msgid "So, a *view* is a callable that takes the *request* as an argument."
msgstr ""

#: ../source/presentations/session06.rst:408
msgid ""
"It can then use information from that request to build appropriate data, "
"perhaps using the application's *models*."
msgstr ""

#: ../source/presentations/session06.rst:411
msgid "Then, it returns the data it assembled, passing it on to a `renderer`_."
msgstr ""

#: ../source/presentations/session06.rst:413
msgid "Which *renderer* to use is determined, again, by configuration:"
msgstr ""

#: ../source/presentations/session06.rst:421
msgid "More about this in a moment."
msgstr ""

#: ../source/presentations/session06.rst:423
msgid ""
"The *view* stands at the intersection of *input data*, the application "
"*model* and *renderers* that offer rendering of the results."
msgstr ""

#: ../source/presentations/session06.rst:426
msgid "It is the *Controller* in our MVC application."
msgstr ""

#: ../source/presentations/session06.rst:433
msgid ""
"Add temporary views to our application in ``views.py`` (and comment out "
"the sample view):"
msgstr ""

#: ../source/presentations/session06.rst:456
msgid "Now we can verify that our view configuration has worked."
msgstr ""

#: ../source/presentations/session06.rst:461
#: ../source/presentations/session06.rst:540
msgid "Make sure your virtualenv is properly activated, and start the web server:"
msgstr ""

#: ../source/presentations/session06.rst:469
msgid "Then try viewing some of the expected application urls:"
msgstr ""

#: ../source/presentations/session06.rst:473
#: ../source/presentations/session06.rst:1052
#: ../source/presentations/session06.rst:1136
#: ../source/presentations/session07.rst:242
#: ../source/presentations/session07.rst:376
#: ../source/presentations/session07.rst:760
msgid "http://localhost:6543/"
msgstr ""

#: ../source/presentations/session06.rst:474
#: ../source/presentations/session06.rst:551
#: ../source/presentations/session06.rst:960
#: ../source/presentations/session07.rst:243
#: ../source/presentations/session07.rst:377
msgid "http://localhost:6543/journal/1"
msgstr ""

#: ../source/presentations/session06.rst:475
#: ../source/presentations/session06.rst:1381
#: ../source/presentations/session06.rst:1440
#: ../source/presentations/session07.rst:244
#: ../source/presentations/session07.rst:378
msgid "http://localhost:6543/journal/create"
msgstr ""

#: ../source/presentations/session06.rst:476
msgid "http://localhost:6543/journal/edit"
msgstr ""

#: ../source/presentations/session06.rst:478
msgid "What happens if you visit a URL that *isn't* in our configuration?"
msgstr ""

#: ../source/presentations/session06.rst:482
msgid ""
"Now that we've got temporary views that work, we can fix them to get "
"information from our database"
msgstr ""

#: ../source/presentations/session06.rst:488
msgid "We'll begin with the list view."
msgstr ""

#: ../source/presentations/session06.rst:490
msgid ""
"We need some code that will fetch all the journal entries we've written, "
"in reverse order, and hand that collection back for rendering."
msgstr ""

#: ../source/presentations/session06.rst:508
msgid "Next, we want to write the view for a single entry."
msgstr ""

#: ../source/presentations/session06.rst:513
msgid ""
"We'll need to use the ``id`` value our route captures into the "
"``matchdict``."
msgstr ""

#: ../source/presentations/session06.rst:516
msgid "Remember that the ``matchdict`` is an attribute of the request."
msgstr ""

#: ../source/presentations/session06.rst:518
msgid "We'll get the ``id`` from there, and use it to get the correct entry."
msgstr ""

#: ../source/presentations/session06.rst:535
msgid "We can now verify that these views work correctly."
msgstr ""

#: ../source/presentations/session06.rst:548
msgid "Then try viewing the list page and an entry page:"
msgstr ""

#: ../source/presentations/session06.rst:550
msgid "http://localhost:6543"
msgstr ""

#: ../source/presentations/session06.rst:553
msgid ""
"What happens when you request an entry with an id that isn't in the "
"database?"
msgstr ""

#: ../source/presentations/session06.rst:556
msgid "http://localhost:6543/journal/100"
msgstr ""

#: ../source/presentations/session06.rst:559
msgid "The MVC View"
msgstr ""

#: ../source/presentations/session06.rst:564
msgid "Again, back to the *Model-View-Controller* pattern."
msgstr ""

#: ../source/presentations/session06.rst:575
msgid "We've built a *model* and we've created some *controllers* that use it."
msgstr ""

#: ../source/presentations/session06.rst:577
msgid ""
"In Pyramid, we call *controllers* **views** and they are callables that "
"take *request* as an argument."
msgstr ""

#: ../source/presentations/session06.rst:580
msgid "Let's turn to the last piece of the *MVC* patter, the *view*"
msgstr ""

#: ../source/presentations/session06.rst:583
msgid "Presenting Data"
msgstr ""

#: ../source/presentations/session06.rst:585
msgid ""
"The job of the *view* in the *MVC* pattern is to present data in a format"
" that is readable to the user of the system."
msgstr ""

#: ../source/presentations/session06.rst:591
msgid "There are many ways to present data."
msgstr ""

#: ../source/presentations/session06.rst:593
msgid ""
"Some are readable by humans (tables, charts, graphs, HTML pages, text "
"files)."
msgstr ""

#: ../source/presentations/session06.rst:596
msgid "Some are more for machines (xml files, csv, json)."
msgstr ""

#: ../source/presentations/session06.rst:598
msgid "Which of these formats is the *right one* depends on your purpose."
msgstr ""

#: ../source/presentations/session06.rst:600
msgid "What is the purpose of our learning journal?"
msgstr ""

#: ../source/presentations/session06.rst:603
msgid "Pyramid Renderers"
msgstr ""

#: ../source/presentations/session06.rst:605
msgid "In Pyramid, the job of presenting data is performed by a *renderer*."
msgstr ""

#: ../source/presentations/session06.rst:610
msgid ""
"So we can consider the Pyramid **renderer** to be the *view* in our *MVC*"
" app."
msgstr ""

#: ../source/presentations/session06.rst:613
msgid ""
"We've already seen how we can connect a *renderer* to a Pyramid *view* "
"with configuration."
msgstr ""

#: ../source/presentations/session06.rst:616
msgid ""
"In fact, we have already done so, using a built-in renderer called "
"``'string'``."
msgstr ""

#: ../source/presentations/session06.rst:619
msgid ""
"This renderer converts the return value of its *view* to a string and "
"sends that back to the client as an HTTP response."
msgstr ""

#: ../source/presentations/session06.rst:622
msgid "But the result isn't so nice looking."
msgstr ""

#: ../source/presentations/session06.rst:626
msgid ""
"The `built-in renderers` (``'string'``, ``'json'``, ``'jsonp'``) in "
"Pyramid are not the only ones available."
msgstr ""

#: ../source/presentations/session06.rst:634
msgid ""
"There are add-ons to Pyramid that support using various *template "
"languages* as renderers."
msgstr ""

#: ../source/presentations/session06.rst:637
msgid ""
"In fact, one of these was installed by default when you created this "
"project."
msgstr ""

#: ../source/presentations/session06.rst:659
msgid ""
"The `pyramid_chameleon` package supports using the `chameleon` template "
"language."
msgstr ""

#: ../source/presentations/session06.rst:662
msgid "The language is quite nice and powerful, but not so easy to learn."
msgstr ""

#: ../source/presentations/session06.rst:664
msgid "Let's use a different one, *jinja2*"
msgstr ""

#: ../source/presentations/session06.rst:668
msgid "Change ``pyramid_chameleon`` to ``pyramid_jinja2`` in both of these files:"
msgstr ""

#: ../source/presentations/session06.rst:686
msgid "We've changed the dependencies for our Pyramid project."
msgstr ""

#: ../source/presentations/session06.rst:691
msgid ""
"As a result, we will need to re-install it so the new dependencies are "
"also installed:"
msgstr ""

#: ../source/presentations/session06.rst:701
msgid "Now, we can use *Jinja2* templates in our project."
msgstr ""

#: ../source/presentations/session06.rst:703
msgid "Let's learn a bit about how `Jinja2 templates`_ work."
msgstr ""

#: ../source/presentations/session06.rst:708
msgid "Jinja2 Template Basics"
msgstr ""

#: ../source/presentations/session06.rst:710
msgid "We'll start with the absolute basics."
msgstr ""

#: ../source/presentations/session06.rst:715
msgid "Fire up an iPython interpreter, using your `ljenv` virtualenv:"
msgstr ""

#: ../source/presentations/session06.rst:723
msgid "Then import the ``Template`` class from the ``jinja2`` package:"
msgstr ""

#: ../source/presentations/session06.rst:731
msgid "A template is constructed with a simple string:"
msgstr ""

#: ../source/presentations/session06.rst:740
msgid ""
"Here, we've simply typed the string directly, but it is more common to "
"build a template from the contents of a *file*."
msgstr ""

#: ../source/presentations/session06.rst:743
msgid "Notice that our string has some odd stuff in it: ``{{ name }}``."
msgstr ""

#: ../source/presentations/session06.rst:745
msgid ""
"This is called a *placeholder* and when the template is *rendered* it is "
"replaced."
msgstr ""

#: ../source/presentations/session06.rst:750
msgid "Call the ``render`` method, providing *context*:"
msgstr ""

#: ../source/presentations/session06.rst:762
msgid "*Context* can either be keyword arguments, or a dictionary"
msgstr ""

#: ../source/presentations/session06.rst:764
msgid "Note the resemblance to something you've seen before:"
msgstr ""

#: ../source/presentations/session06.rst:774
msgid ""
"Dictionaries passed in as part of the *context* can be addressed with "
"*either* subscript or dotted notation:"
msgstr ""

#: ../source/presentations/session06.rst:787
msgid ""
"Jinja2 will try the *correct* way first (attr for dotted, item for "
"subscript)."
msgstr ""

#: ../source/presentations/session06.rst:789
msgid "If nothing is found, it will try the opposite."
msgstr ""

#: ../source/presentations/session06.rst:790
msgid "If nothing is found, it will return an *undefined* object."
msgstr ""

#: ../source/presentations/session06.rst:795
msgid "The exact same is true of objects passed in as part of *context*:"
msgstr ""

#: ../source/presentations/session06.rst:811
msgid ""
"This means your templates can be agnostic as to the nature of the things "
"found in *context*"
msgstr ""

#: ../source/presentations/session06.rst:816
msgid ""
"You can apply `filters`_ to the data passed in *context* with the pipe "
"('|') operator:"
msgstr ""

#: ../source/presentations/session06.rst:830
msgid "You can also chain filters together:"
msgstr ""

#: ../source/presentations/session06.rst:840
msgid "Logical `control structures`_ are also available:"
msgstr ""

#: ../source/presentations/session06.rst:856
#, python-format
msgid ""
"Any control structure introduced in a template **must** be paired with an"
" explicit closing tag (``{% for %}...{% endfor %}``)"
msgstr ""

#: ../source/presentations/session06.rst:859
#, python-format
msgid ""
"Remember, although template tags like ``{% for %}`` or ``{% if %}`` look "
"a lot like Python, *they are not*."
msgstr ""

#: ../source/presentations/session06.rst:862
msgid "The syntax is specific and must be followed correctly."
msgstr ""

#: ../source/presentations/session06.rst:866
msgid ""
"There are a number of specialized *tests* available for use with the "
"``if...elif...else`` control structure:"
msgstr ""

#: ../source/presentations/session06.rst:888
msgid "Basic `Python-like expressions`_ are also supported:"
msgstr ""

#: ../source/presentations/session06.rst:909
msgid "Our Templates"
msgstr ""

#: ../source/presentations/session06.rst:911
msgid ""
"There's more that Jinja2 templates can do, but it will be easier to "
"introduce you to that in the context of a working template.  So let's "
"make some."
msgstr ""

#: ../source/presentations/session06.rst:916
msgid ""
"We have a Pyramid view that returns a single entry. Let's create a "
"template to show it."
msgstr ""

#: ../source/presentations/session06.rst:922
msgid "In ``learning_journal/templates`` create a new file ``detail.jinja2``:"
msgstr ""

#: ../source/presentations/session06.rst:934
msgid "Then wire it up to the detail view in ``views.py``:"
msgstr ""

#: ../source/presentations/session06.rst:945
msgid ""
"Now we should be able to see some rendered HTML for our journal entry "
"details."
msgstr ""

#: ../source/presentations/session06.rst:950
msgid "Start up your server:"
msgstr ""

#: ../source/presentations/session06.rst:958
msgid "Then try viewing an individual journal entry"
msgstr ""

#: ../source/presentations/session06.rst:964
msgid ""
"The index page of our journal should show a list of journal entries, "
"let's do that next."
msgstr ""

#: ../source/presentations/session06.rst:970
msgid "In ``learning_journal/templates`` create a new file ``list.jinja2``:"
msgstr ""

#: ../source/presentations/session06.rst:989
#: ../source/presentations/session06.rst:1010
msgid "It's worth taking a look at a few specifics of this template."
msgstr ""

#: ../source/presentations/session06.rst:1000
msgid "Jinja2 templates are rendered with a *context*."
msgstr ""

#: ../source/presentations/session06.rst:1002
msgid ""
"A Pyramid *view* returns a dictionary, which is passed to the renderer as"
" part of of that *context*"
msgstr ""

#: ../source/presentations/session06.rst:1005
msgid ""
"This means we can access values we return from our *view* in the "
"*renderer* using the names we assigned to them."
msgstr ""

#: ../source/presentations/session06.rst:1016
msgid "The *request* object is also placed in the context by Pyramid."
msgstr ""

#: ../source/presentations/session06.rst:1018
msgid ""
"Request has a method ``route_url`` that will create a URL for a named "
"route."
msgstr ""

#: ../source/presentations/session06.rst:1021
msgid ""
"This allows you to include URLs in your template without needing to know "
"exactly what they will be."
msgstr ""

#: ../source/presentations/session06.rst:1024
msgid ""
"This process is called *reversing*, since it's a bit like a reverse phone"
" book lookup."
msgstr ""

#: ../source/presentations/session06.rst:1029
msgid "Finally, you'll need to connect this new renderer to your listing view:"
msgstr ""

#: ../source/presentations/session06.rst:1039
msgid "We can now see our list page too.  Let's try starting the server:"
msgstr ""

#: ../source/presentations/session06.rst:1050
#: ../source/presentations/session06.rst:1134
msgid "Then try viewing the home page of your journal:"
msgstr ""

#: ../source/presentations/session06.rst:1054
#: ../source/presentations/session06.rst:1138
msgid "Click on the link to an entry, it should work."
msgstr ""

#: ../source/presentations/session06.rst:1058
msgid "These views are reasonable, if quite plain."
msgstr ""

#: ../source/presentations/session06.rst:1063
msgid ""
"It'd be nice to put them into something that looks a bit more like a "
"website."
msgstr ""

#: ../source/presentations/session06.rst:1066
msgid ""
"Jinja2 allows you to combine templates using something called `template "
"inheritance`_."
msgstr ""

#: ../source/presentations/session06.rst:1069
msgid ""
"You can create a basic page structure, and then *inherit* that structure "
"in other templates."
msgstr ""

#: ../source/presentations/session06.rst:1072
msgid ""
"In our class resources I've added a page template ``layout.jinja2``.  "
"Copy that page to your templates directory"
msgstr ""

#: ../source/presentations/session06.rst:1102
#, python-format
msgid ""
"The important part here is the ``{% block body %}{% endblock %}`` "
"expression."
msgstr ""

#: ../source/presentations/session06.rst:1107
msgid "This is a template **block** and it is a kind of placeholder."
msgstr ""

#: ../source/presentations/session06.rst:1109
msgid ""
"Other templates can inherit from this one, and fill that block with "
"additional HTML."
msgstr ""

#: ../source/presentations/session06.rst:1112
msgid "Let's update our detail and list templates:"
msgstr ""

#: ../source/presentations/session06.rst:1123
msgid "Let's try starting the server so we can see the result:"
msgstr ""

#: ../source/presentations/session06.rst:1140
msgid "And now you have shared page structure that is in both."
msgstr ""

#: ../source/presentations/session06.rst:1143
msgid "Static Assets"
msgstr ""

#: ../source/presentations/session06.rst:1145
msgid ""
"Although we have a shared structure, it isn't particularly nice to look "
"at."
msgstr ""

#: ../source/presentations/session06.rst:1150
msgid ""
"Aspects of how a website looks are controlled by CSS (*Cascading Style "
"Sheets*)."
msgstr ""

#: ../source/presentations/session06.rst:1153
msgid "Stylesheets are one of what we generally speak of as *static assets*."
msgstr ""

#: ../source/presentations/session06.rst:1155
msgid ""
"Other static assets include *images* that are part of the look and feel "
"of the site (logos, button images, etc) and the *JavaScript* files that "
"add client-side dynamic behavior to the site."
msgstr ""

#: ../source/presentations/session06.rst:1161
msgid ""
"Serving static assets in Pyramid requires a *static view* to "
"configuration. Luckily, ``pcreate`` already handled that for us:"
msgstr ""

#: ../source/presentations/session06.rst:1175
msgid ""
"The first argument to ``add_static_view`` is a *name* that will need to "
"appear in the path of URLs requesting assets."
msgstr ""

#: ../source/presentations/session06.rst:1178
msgid ""
"The second argument is a *path* that is relative to the package being "
"configured."
msgstr ""

#: ../source/presentations/session06.rst:1181
msgid ""
"Assets referenced by the *name* in a URL will be searched for in the "
"location defined by the *path*"
msgstr ""

#: ../source/presentations/session06.rst:1184
msgid "Additional keyword arguments control other aspects of how the view works."
msgstr ""

#: ../source/presentations/session06.rst:1188
msgid ""
"Once you have a static view configured, you can use assets in that "
"location in templates."
msgstr ""

#: ../source/presentations/session06.rst:1194
msgid ""
"The *request* object in Pyramid provides a ``static_path`` method that "
"will render an appropriate asset path for us."
msgstr ""

#: ../source/presentations/session06.rst:1197
msgid "Add the following to our ``layout.jinja2`` template:"
msgstr ""

#: ../source/presentations/session06.rst:1206
msgid ""
"The one required argument to ``request.static_path`` is a *path* to an "
"asset."
msgstr ""

#: ../source/presentations/session06.rst:1209
msgid ""
"Note that because any package *might* define a static view, we have to "
"specify which package we want to look in."
msgstr ""

#: ../source/presentations/session06.rst:1212
msgid "That's why we have ``learning_journal:static/styles.css`` in our call."
msgstr ""

#: ../source/presentations/session06.rst:1216
msgid "I've created some very very basic styles for our learning journal."
msgstr ""

#: ../source/presentations/session06.rst:1221
msgid ""
"You can find them in ``resources/session06/styles.css``.  Go ahead and "
"copy that file."
msgstr ""

#: ../source/presentations/session06.rst:1224
msgid "Add it to ``learning_journal/static``."
msgstr ""

#: ../source/presentations/session06.rst:1226
msgid ""
"Then restart your web server and see what a difference a little style "
"makes:"
msgstr ""

#: ../source/presentations/session06.rst:1237
msgid "Your site should look something like this:"
msgstr ""

#: ../source/presentations/session06.rst:1243
msgid "The learning journal with basic styles applied"
msgstr ""

#: ../source/presentations/session06.rst:1246
msgid "Getting Interactive"
msgstr ""

#: ../source/presentations/session06.rst:1251
msgid "We have a site that allows us to view a list of journal entries."
msgstr ""

#: ../source/presentations/session06.rst:1256
msgid "We can also view the details of a single entry."
msgstr ""

#: ../source/presentations/session06.rst:1258
msgid "But as yet, we don't really have any *interaction* in our site yet."
msgstr ""

#: ../source/presentations/session06.rst:1260
msgid "We can't create new entries."
msgstr ""

#: ../source/presentations/session06.rst:1262
msgid "Let's add that functionality next."
msgstr ""

#: ../source/presentations/session06.rst:1265
msgid "User Input"
msgstr ""

#: ../source/presentations/session06.rst:1267
msgid ""
"In HTML websites, the traditional way of getting input from users is via "
"`HTML forms`_."
msgstr ""

#: ../source/presentations/session06.rst:1273
msgid ""
"Forms use *input elements* to allow users to enter data, pick from drop-"
"down lists, or choose items via checkbox or radio button."
msgstr ""

#: ../source/presentations/session06.rst:1276
msgid ""
"It is possible to create plain HTML forms in templates and use them with "
"Pyramid."
msgstr ""

#: ../source/presentations/session06.rst:1279
msgid ""
"It's a lot easier, however, to work with a *form library* to create "
"forms, render them in templates and interact with data sent by a client."
msgstr ""

#: ../source/presentations/session06.rst:1282
msgid "We'll be using a form library called `WTForms`_ in our project"
msgstr ""

#: ../source/presentations/session06.rst:1289
msgid "The first step to working with this library is to install it."
msgstr ""

#: ../source/presentations/session06.rst:1294
msgid ""
"Start by makin the library as a *dependency* of our package by adding it "
"to the *requires* list in ``setup.py``:"
msgstr ""

#: ../source/presentations/session06.rst:1304
msgid "Then, re-install our package to download and install the new dependency:"
msgstr ""

#: ../source/presentations/session06.rst:1313
msgid "Using WTForms"
msgstr ""

#: ../source/presentations/session06.rst:1315
msgid "We'll want a form to allow a user to create a new Journal Entry."
msgstr ""

#: ../source/presentations/session06.rst:1320
msgid ""
"Add a new file called ``forms.py`` in our learning_journal package, next "
"to ``models.py``:"
msgstr ""

#: ../source/presentations/session06.rst:1341
msgid "Next, we need to add a new view that uses this form to create a new entry."
msgstr ""

#: ../source/presentations/session06.rst:1346
msgid "Add this to ``views.py``:"
msgstr ""

#: ../source/presentations/session06.rst:1366
msgid "We already have a route that connects here.  Let's test it."
msgstr ""

#: ../source/presentations/session06.rst:1371
msgid "Start your server:"
msgstr ""

#: ../source/presentations/session06.rst:1379
msgid "And then try connecting to the ``action`` route:"
msgstr ""

#: ../source/presentations/session06.rst:1383
msgid "You should see something like this::"
msgstr ""

#: ../source/presentations/session06.rst:1389
msgid "Finally, we need to create a template that will render our form."
msgstr ""

#: ../source/presentations/session06.rst:1394
msgid ""
"Add a new template called ``edit.jinja2`` in "
"``learning_journal/templates``:"
msgstr ""

#: ../source/presentations/session06.rst:1418
msgid "You'll need to update the view configuration to use this new renderer."
msgstr ""

#: ../source/presentations/session06.rst:1423
msgid "Update the configuration in ``learning_journal/views.py``:"
msgstr ""

#: ../source/presentations/session06.rst:1432
msgid "And then you should be able to start your server and test:"
msgstr ""

#: ../source/presentations/session06.rst:1444
msgid "Great!  Now you can add new entries to your journal."
msgstr ""

#: ../source/presentations/session06.rst:1449
msgid "But in order to do so, you have to hand-enter the url."
msgstr ""

#: ../source/presentations/session06.rst:1451
msgid ""
"You should add a new link in the UI somewhere that helps you get there "
"more easily."
msgstr ""

#: ../source/presentations/session06.rst:1454
msgid "Add the following to ``list.jinja2``:"
msgstr ""

#: ../source/presentations/session06.rst:1475
msgid ""
"You have a website now that allows you to create, view and list journal "
"entries"
msgstr ""

#: ../source/presentations/session06.rst:1481
msgid "However, there are still a few flaws in this system."
msgstr ""

#: ../source/presentations/session06.rst:1483
msgid ""
"You should be able to edit a journal entry that already exists, in case "
"you make a spelling error."
msgstr ""

#: ../source/presentations/session06.rst:1486
msgid "It would also be nice to see a prettier site."
msgstr ""

#: ../source/presentations/session06.rst:1488
msgid "Let's handle that for homework this week."
msgstr ""

#: ../source/presentations/session06.rst:1491
msgid "Part 1: Add Editing"
msgstr ""

#: ../source/presentations/session06.rst:1493
msgid ""
"For part one of your assignment, add editing of existing entries. You "
"will need:"
msgstr ""

#: ../source/presentations/session06.rst:1495
msgid ""
"A form that shows an existing entry (what is different about this form "
"from one for creating a new entry?)"
msgstr ""

#: ../source/presentations/session06.rst:1497
msgid "A pyramid view that handles that form. It should:"
msgstr ""

#: ../source/presentations/session06.rst:1499
msgid "Show the form with the requested entry when the page is first loaded"
msgstr ""

#: ../source/presentations/session06.rst:1500
msgid "Accept edits only on POST"
msgstr ""

#: ../source/presentations/session06.rst:1501
msgid "Update an existing entry with new data from the form"
msgstr ""

#: ../source/presentations/session06.rst:1502
msgid ""
"Show the view of the entry after editing so that the user can see the "
"edits saved correctly"
msgstr ""

#: ../source/presentations/session06.rst:1504
msgid "Show errors from form validation, if any are present"
msgstr ""

#: ../source/presentations/session06.rst:1506
msgid ""
"A link somewhere that leads to the editing page for a single entry "
"(probably on the view page for a entry)"
msgstr ""

#: ../source/presentations/session06.rst:1509
msgid ""
"You'll need to update a bit of configuration, but not much.  Use the "
"create form we did here in class as an example."
msgstr ""

#: ../source/presentations/session06.rst:1513
msgid "Part 2: Make it Yours"
msgstr ""

#: ../source/presentations/session06.rst:1515
msgid "I've created for you a very bare-bones layout and stylesheet."
msgstr ""

#: ../source/presentations/session06.rst:1517
msgid "You will certainly want to add a bit of your own style and panache."
msgstr ""

#: ../source/presentations/session06.rst:1519
msgid ""
"Spend a few hours this week playing with the styles and getting a site "
"that looks more like you want it to look."
msgstr ""

#: ../source/presentations/session06.rst:1522
msgid ""
"The Mozilla Developer Network has `some excellent resources`_ for "
"learning CSS."
msgstr ""

#: ../source/presentations/session06.rst:1524
msgid ""
"In particular, the `Getting Started with CSS`_ tutorial is a thorough "
"introduction to the basics."
msgstr ""

#: ../source/presentations/session06.rst:1527
msgid ""
"You might also look at their `CSS 3 Demos`_ to help fire up your creative"
" juices."
msgstr ""

#: ../source/presentations/session06.rst:1530
msgid "Here are a few more resources:"
msgstr ""

#: ../source/presentations/session06.rst:1532
msgid ""
"`A List Apart <http://alistapart.com>`_ offers outstanding articles.  "
"Their `Topics list <http://alistapart.com/topics>`_ is worth a browse."
msgstr ""

#: ../source/presentations/session06.rst:1534
msgid ""
"`Smashing Magazine <http://www.smashingmagazine.com>`_ is another "
"excellent resource for articles on design."
msgstr ""

#: ../source/presentations/session06.rst:1543
msgid "Part 3: User Model"
msgstr ""

#: ../source/presentations/session06.rst:1545
msgid "As it stands, our journal accepts entries from anyone who comes by."
msgstr ""

#: ../source/presentations/session06.rst:1547
msgid ""
"Next week we will add security to allow only logged-in users to create "
"and edit entries."
msgstr ""

#: ../source/presentations/session06.rst:1550
msgid "To do so, we'll need a user model"
msgstr ""

#: ../source/presentations/session06.rst:1552
msgid "The model should have:"
msgstr ""

#: ../source/presentations/session06.rst:1554
msgid "An ``id`` field that is a primary key"
msgstr ""

#: ../source/presentations/session06.rst:1555
msgid ""
"A ``username`` field that is unicode, no more than 255 characters, not "
"nullable, unique and indexed."
msgstr ""

#: ../source/presentations/session06.rst:1557
msgid "A ``password`` field that is unicode and not nullable"
msgstr ""

#: ../source/presentations/session06.rst:1559
msgid ""
"In addition, the model should have a classmethod that retrieves a "
"specific user when given a username."
msgstr ""

#: ../source/presentations/session06.rst:1563
msgid "Part 4: Preparation for Deployment"
msgstr ""

#: ../source/presentations/session06.rst:1565
msgid ""
"At the end of class next week we will be deploying our application to "
"Heroku."
msgstr ""

#: ../source/presentations/session06.rst:1567
msgid "You will need to get a free account."
msgstr ""

#: ../source/presentations/session06.rst:1569
msgid ""
"Once you have your free account set up and you have logged in, run "
"through the `getting started with Python`_ tutorial."
msgstr ""

#: ../source/presentations/session06.rst:1572
msgid ""
"Be sure to at least complete the *set up* step. It will have you install "
"the Heroku Toolbelt, which you will need to have ready in class."
msgstr ""

#: ../source/presentations/session06.rst:1580
msgid ""
"As usual, submit your work by committing and pushing it to your project "
"github repository"
msgstr ""

#: ../source/presentations/session06.rst:1583
msgid "Commit early and commit often."
msgstr ""

#: ../source/presentations/session06.rst:1585
msgid "Write yourself good commit messages explaining what you have done and why."
msgstr ""

#: ../source/presentations/session06.rst:1587
msgid ""
"When you are ready to have your work reviewed, email the link to your "
"repository to us, we'll take a look and make comments."
msgstr ""

#: ../source/presentations/session07.rst:3
msgid "Session 07"
msgstr ""

#: ../source/presentations/session07.rst:9
msgid "By `Joel Kramer via Flickr`_"
msgstr ""

#: ../source/presentations/session07.rst:14
msgid "Security And Deployment"
msgstr ""

#: ../source/presentations/session07.rst:19
msgid ""
"By the end of this session we'll have deployed our learning journal to a "
"public server."
msgstr ""

#: ../source/presentations/session07.rst:22
msgid "So we will need to add a bit of security to it."
msgstr ""

#: ../source/presentations/session07.rst:24
msgid "We'll get started on that in a moment"
msgstr ""

#: ../source/presentations/session07.rst:31
msgid "Questions About the Homework?"
msgstr ""

#: ../source/presentations/session07.rst:40
msgid ""
"`View the form online "
"<https://github.com/cewing/training.python_web/blob/807a49f20fea1e7e7393347c82df47eff83f3210/resources/session07/forms.py#L25>`_"
msgstr ""

#: ../source/presentations/session07.rst:59
msgid ""
"`See this view online "
"<https://github.com/cewing/training.python_web/blob/807a49f20fea1e7e7393347c82df47eff83f3210/resources/session07/views.py#L43>`_"
msgstr ""

#: ../source/presentations/session07.rst:78
msgid ""
"`View this template online "
"<https://github.com/cewing/training.python_web/blob/807a49f20fea1e7e7393347c82df47eff83f3210/resources/session07/detail.jinja2#L12>`_"
msgstr ""

#: ../source/presentations/session07.rst:94
msgid ""
"`View this model online "
"<https://github.com/cewing/training.python_web/blob/807a49f20fea1e7e7393347c82df47eff83f3210/resources/session07/models.py#L62>`_"
msgstr ""

#: ../source/presentations/session07.rst:97
msgid "Securing An Application"
msgstr ""

#: ../source/presentations/session07.rst:102
msgid "We've got a solid start on our learning journal."
msgstr ""

#: ../source/presentations/session07.rst:107
msgid "We can:"
msgstr ""

#: ../source/presentations/session07.rst:111
msgid "view a list of entries"
msgstr ""

#: ../source/presentations/session07.rst:112
msgid "view a single entry"
msgstr ""

#: ../source/presentations/session07.rst:113
msgid "create a new entry"
msgstr ""

#: ../source/presentations/session07.rst:114
msgid "edit existing entries"
msgstr ""

#: ../source/presentations/session07.rst:116
msgid "But so can everyone who visits the journal."
msgstr ""

#: ../source/presentations/session07.rst:118
msgid "It's a recipe for **TOTAL CHAOS**"
msgstr ""

#: ../source/presentations/session07.rst:120
msgid "Let's lock it down a bit."
msgstr ""

#: ../source/presentations/session07.rst:124
msgid "AuthN and AuthZ"
msgstr ""

#: ../source/presentations/session07.rst:126
msgid "There are two aspects to the process of access control online."
msgstr ""

#: ../source/presentations/session07.rst:133
msgid "**Authentication**: Verification of the identity of a *principal*"
msgstr ""

#: ../source/presentations/session07.rst:134
msgid ""
"**Authorization**: Enumeration of the rights of that *principal* in a "
"context."
msgstr ""

#: ../source/presentations/session07.rst:137
msgid "Think of them as **Who Am I** and **What Can I Do**"
msgstr ""

#: ../source/presentations/session07.rst:139
msgid "All systems with access control involve both of these aspects."
msgstr ""

#: ../source/presentations/session07.rst:141
msgid "But many systems wire them together as one."
msgstr ""

#: ../source/presentations/session07.rst:146
msgid ""
"In Pyramid these two aspects are handled by separate configuration "
"settings:"
msgstr ""

#: ../source/presentations/session07.rst:153
msgid "``config.set_authentication_policy(AuthnPolicy())``"
msgstr ""

#: ../source/presentations/session07.rst:154
msgid "``config.set_authorization_policy(AuthzPolicy())``"
msgstr ""

#: ../source/presentations/session07.rst:156
msgid "If you set one, you must set the other."
msgstr ""

#: ../source/presentations/session07.rst:158
msgid "Pyramid comes with a few policy classes included."
msgstr ""

#: ../source/presentations/session07.rst:160
msgid ""
"You can also roll your own, so long as they fulfill the requried "
"interface."
msgstr ""

#: ../source/presentations/session07.rst:162
msgid ""
"You can learn about the interfaces for `authentication`_ and "
"`authorization`_ in the Pyramid documentation"
msgstr ""

#: ../source/presentations/session07.rst:170
msgid "We'll be using two built-in policies today:"
msgstr ""

#: ../source/presentations/session07.rst:177
msgid ""
"``AuthTktAuthenticationPolicy``: sets an expirable `authentication "
"ticket`_ cookie."
msgstr ""

#: ../source/presentations/session07.rst:179
msgid ""
"``ACLAuthorizationPolicy``: uses an `Access Control List`_ to grant "
"permissions to *principals*"
msgstr ""

#: ../source/presentations/session07.rst:182
msgid "Our access control system will have the following properties:"
msgstr ""

#: ../source/presentations/session07.rst:186
msgid "Everyone can view entries, and the list of all entries"
msgstr ""

#: ../source/presentations/session07.rst:187
msgid "Users who log in may edit entries or create new ones"
msgstr ""

#: ../source/presentations/session07.rst:194
msgid "By default, Pyramid uses no security. We enable it through configuration."
msgstr ""

#: ../source/presentations/session07.rst:199
msgid "Open ``learning_journal/__init__.py`` and update it as follows:"
msgstr ""

#: ../source/presentations/session07.rst:220
msgid "We've now informed our application that we want to use security."
msgstr ""

#: ../source/presentations/session07.rst:225
msgid "By default we require the 'view' permission to see anything."
msgstr ""

#: ../source/presentations/session07.rst:227
msgid "But we have yet to assign *any permissions to anyone* at all."
msgstr ""

#: ../source/presentations/session07.rst:229
msgid "Let's verify now that we are unable to see anything in the website."
msgstr ""

#: ../source/presentations/session07.rst:231
msgid ""
"Start your application, and try to view any page (You should get a 403 "
"Forbidden error response):"
msgstr ""

#: ../source/presentations/session07.rst:245
#: ../source/presentations/session07.rst:379
msgid "http://localhost:6543/journal/edit?id=1"
msgstr ""

#: ../source/presentations/session07.rst:248
msgid "Implementing Authz"
msgstr ""

#: ../source/presentations/session07.rst:250
msgid "Next we have to grant some permissions to principals."
msgstr ""

#: ../source/presentations/session07.rst:255
msgid "Pyramid authorization relies on a concept it calls \"context\"."
msgstr ""

#: ../source/presentations/session07.rst:257
msgid "A *principal* can be granted rights in a particular *context*"
msgstr ""

#: ../source/presentations/session07.rst:259
msgid "Context can be made as specific as a single persistent object"
msgstr ""

#: ../source/presentations/session07.rst:261
msgid "Or it can be generalized to a *route* or *view*"
msgstr ""

#: ../source/presentations/session07.rst:263
msgid ""
"To have a context, we need a Python object called a *factory* that must "
"have an ``__acl__`` special attribute."
msgstr ""

#: ../source/presentations/session07.rst:266
msgid ""
"The framework will use this object to determine what permissions a "
"*principal* has"
msgstr ""

#: ../source/presentations/session07.rst:269
msgid "Let's create one"
msgstr ""

#: ../source/presentations/session07.rst:273
msgid ""
"In the same folder where you have ``models.py`` and ``views.py``, add a "
"new file ``security.py``"
msgstr ""

#: ../source/presentations/session07.rst:292
msgid "The ``__acl__`` attribute of this object contains a list of *ACE*\\ s"
msgstr ""

#: ../source/presentations/session07.rst:294
msgid ""
"An *ACE* combines an *action* (Allow, Deny), a *principal* and a "
"*permission*"
msgstr ""

#: ../source/presentations/session07.rst:298
msgid ""
"Now that we have a factory that will provide context for permissions to "
"work, we can tell our configuration to use it."
msgstr ""

#: ../source/presentations/session07.rst:304
msgid ""
"Open ``learning_journal/__init__.py`` and update the route configuration "
"for our routes:"
msgstr ""

#: ../source/presentations/session07.rst:322
msgid ""
"We've now told our application we want a principal to have the *view* "
"permission by default."
msgstr ""

#: ../source/presentations/session07.rst:328
msgid "And we've provided a factory to supply context and an ACL for each route."
msgstr ""

#: ../source/presentations/session07.rst:330
msgid ""
"Check our ACL. Who can view the home page?  The detail page?  The action "
"pages?"
msgstr ""

#: ../source/presentations/session07.rst:333
msgid "Pyramid allows us to set a *default_permission* for *all views*\\ ."
msgstr ""

#: ../source/presentations/session07.rst:335
msgid ""
"But view configuration allows us to require a different permission for *a"
" view*\\ ."
msgstr ""

#: ../source/presentations/session07.rst:337
msgid "Let's make our action views require appropriate permissions next"
msgstr ""

#: ../source/presentations/session07.rst:341
msgid ""
"Open ``learning_journal/views.py``, and edit the ``@view_config`` for "
"``create`` and ``update``:"
msgstr ""

#: ../source/presentations/session07.rst:360
msgid ""
"At this point, our \"action\" views should require permissions other than"
" the default ``view``."
msgstr ""

#: ../source/presentations/session07.rst:366
msgid "Start your application and verify that it is true:"
msgstr ""

#: ../source/presentations/session07.rst:381
msgid "You should get a ``403 Forbidden`` for the action pages only."
msgstr ""

#: ../source/presentations/session07.rst:384
msgid "Implement AuthN"
msgstr ""

#: ../source/presentations/session07.rst:386
msgid "Now that we have authorization implemented, we need to add authentication."
msgstr ""

#: ../source/presentations/session07.rst:391
msgid ""
"By providing the system with an *authenticated user*, our ACEs for "
"``Authenticated`` will apply."
msgstr ""

#: ../source/presentations/session07.rst:394
msgid ""
"We'll need to have a way for a user to prove who they are to the "
"satisfaction of the system."
msgstr ""

#: ../source/presentations/session07.rst:397
msgid ""
"The most common way of handling this is through a *username* and "
"*password*."
msgstr ""

#: ../source/presentations/session07.rst:400
msgid "A person provides both in an html form."
msgstr ""

#: ../source/presentations/session07.rst:402
msgid ""
"When the form is submitted, the system seeks a user with that name, and "
"compares the passwords."
msgstr ""

#: ../source/presentations/session07.rst:405
msgid ""
"If there is no such user, or the password does not match, authentication "
"fails."
msgstr ""

#: ../source/presentations/session07.rst:410
msgid "Let's imagine that Alice wants to authenticate with our website."
msgstr ""

#: ../source/presentations/session07.rst:415
msgid "Her username is ``alice`` and her password is ``s3cr3t``."
msgstr ""

#: ../source/presentations/session07.rst:417
msgid "She fills these out in a form on our website and submits the form."
msgstr ""

#: ../source/presentations/session07.rst:419
msgid ""
"Our website looks for a ``User`` object in the database with the username"
" ``alice``."
msgstr ""

#: ../source/presentations/session07.rst:422
msgid ""
"Let's imagine that there is one, so our site next compares the value she "
"sent for her *password* to the value stored in the database."
msgstr ""

#: ../source/presentations/session07.rst:425
msgid ""
"If her stored password is also ``s3cr3t``, then she is who she says she "
"is."
msgstr ""

#: ../source/presentations/session07.rst:427
msgid "All set, right?"
msgstr ""

#: ../source/presentations/session07.rst:431
msgid ""
"The problem here is that the value we've stored for her password is in "
"``plain text``."
msgstr ""

#: ../source/presentations/session07.rst:437
msgid ""
"This means that anyone could potentially steal our database and have "
"access to all our users' passwords."
msgstr ""

#: ../source/presentations/session07.rst:440
msgid "Instead, we should *encrypt* her password with a strong one-way hash."
msgstr ""

#: ../source/presentations/session07.rst:442
msgid "Then we can store the hashed value."
msgstr ""

#: ../source/presentations/session07.rst:444
msgid ""
"When she provides the plain text password to us, we *encrypt* it the same"
" way, and compare the result to the stored value."
msgstr ""

#: ../source/presentations/session07.rst:447
msgid ""
"If they match, then we know the value she provided is the same we used to"
" create the stored hash."
msgstr ""

#: ../source/presentations/session07.rst:452
msgid "Python provides a number of libraries for implementing strong encryption."
msgstr ""

#: ../source/presentations/session07.rst:457
msgid "You should always use a well-known library for encryption."
msgstr ""

#: ../source/presentations/session07.rst:459
msgid "We'll use a good one called `Passlib`_."
msgstr ""

#: ../source/presentations/session07.rst:461
msgid ""
"This library provides a number of different algorithms and a *context* "
"that implements a simple interface for each."
msgstr ""

#: ../source/presentations/session07.rst:476
msgid ""
"To install a new package as a dependency, we add the package to our list "
"in ``setup.py``."
msgstr ""

#: ../source/presentations/session07.rst:479
msgid ""
"``Passlib`` provides a large number of different hashing schemes.  Some "
"(like ``bcrypt``) require underlying ``C`` extensions to be compiled. If "
"you do not have a ``C`` compiler, these extensions will be disabled."
msgstr ""

#: ../source/presentations/session07.rst:494
msgid "Then, we re-install our package to pick up the new dependency:"
msgstr ""

#: ../source/presentations/session07.rst:500
msgid ""
"*note* if you have a c compiler installed but not the Python dev headers,"
" this may not work.  Let me know if you get errors."
msgstr ""

#: ../source/presentations/session07.rst:505
msgid ""
"As noted above, the passlib library uses a ``context`` object to manage "
"passwords."
msgstr ""

#: ../source/presentations/session07.rst:511
msgid ""
"This object supports a lot of functionality, but the only API we care "
"about for this project is encrypting and verifying passwords."
msgstr ""

#: ../source/presentations/session07.rst:514
msgid "We'll create a single, global context to be used by our project."
msgstr ""

#: ../source/presentations/session07.rst:516
msgid ""
"Since the ``User`` class is the component in our system that should have "
"the responsibility for password interactions, we'll create our context in"
" the same place it is defined."
msgstr ""

#: ../source/presentations/session07.rst:520
msgid "In ``learning_journal/models.py`` add the following code:"
msgstr ""

#: ../source/presentations/session07.rst:533
msgid ""
"Now that we have a context object available, let's write an instance "
"method for our ``User`` class that uses it to verify a plaintext "
"password:"
msgstr ""

#: ../source/presentations/session07.rst:539
msgid ""
"Again, in ``learning_journal/models.py`` add the following to the "
"``User`` class:"
msgstr ""

#: ../source/presentations/session07.rst:552
msgid "We'll also need to have a user for our system."
msgstr ""

#: ../source/presentations/session07.rst:557
msgid "We can use the database initialization script to create one for us."
msgstr ""

#: ../source/presentations/session07.rst:559
msgid "Open ``learning_journal/scripts/initialzedb.py``:"
msgstr ""

#: ../source/presentations/session07.rst:576
msgid ""
"In order to get our user created, we'll need to delete our database and "
"re-build it."
msgstr ""

#: ../source/presentations/session07.rst:582
msgid "Make sure you are in the folder where ``setup.py`` appears."
msgstr ""

#: ../source/presentations/session07.rst:584
msgid "Then remove the sqlite database:"
msgstr ""

#: ../source/presentations/session07.rst:590
msgid "And re-initialize:"
msgstr ""

#: ../source/presentations/session07.rst:602
msgid "Providing Login UI"
msgstr ""

#: ../source/presentations/session07.rst:604
msgid "We now have a user in our database with a strongly encrypted password."
msgstr ""

#: ../source/presentations/session07.rst:609
msgid ""
"We also have a method on our user model that will verify a supplied "
"password against this encrypted version."
msgstr ""

#: ../source/presentations/session07.rst:612
msgid "We must now provide a view that lets us log in to our application."
msgstr ""

#: ../source/presentations/session07.rst:614
msgid ""
"We start by adding a new *route* to our configuration in "
"``learning_journal/__init__.py``:"
msgstr ""

#: ../source/presentations/session07.rst:625
msgid "It would be nice to use the form library again to make a login form."
msgstr ""

#: ../source/presentations/session07.rst:630
msgid "Open ``learning_journal/forms.py`` and add the following:"
msgstr ""

#: ../source/presentations/session07.rst:650
msgid "Next, we'll create a login view in ``learning_journal/views.py``"
msgstr ""

#: ../source/presentations/session07.rst:677
msgid ""
"Notice that this view doesn't render anything. No matter what, you end up"
" returning to the ``home`` route."
msgstr ""

#: ../source/presentations/session07.rst:683
msgid "We have to incorporate our login form somewhere."
msgstr ""

#: ../source/presentations/session07.rst:685
msgid "The home page seems like a good place."
msgstr ""

#: ../source/presentations/session07.rst:687
msgid "But we don't want to show it all the time."
msgstr ""

#: ../source/presentations/session07.rst:689
msgid "Only when we aren't logged in already."
msgstr ""

#: ../source/presentations/session07.rst:691
msgid "Let's give that a whirl."
msgstr ""

#: ../source/presentations/session07.rst:695
msgid ""
"Pyramid security provides a method that returns the id of the user who is"
" logged in, if any."
msgstr ""

#: ../source/presentations/session07.rst:701
msgid "We can use that to update our home page in ``learning_journal/views.py``:"
msgstr ""

#: ../source/presentations/session07.rst:719
msgid ""
"Now we have to update the template for the ``index_page`` to display the "
"form, *if it is there*"
msgstr ""

#: ../source/presentations/session07.rst:745
msgid "We should be ready at this point."
msgstr ""

#: ../source/presentations/session07.rst:750
msgid "Fire up your application and see it in action:"
msgstr ""

#: ../source/presentations/session07.rst:758
msgid "Load the home page and see your login form:"
msgstr ""

#: ../source/presentations/session07.rst:762
msgid "Fill it in and submit the form, verify that you can add a new entry."
msgstr ""

#: ../source/presentations/session07.rst:766
msgid "That's enough for now.  We have a working application."
msgstr ""

#: ../source/presentations/session07.rst:768
msgid "When we return, we'll deploy it."
msgstr ""

#: ../source/presentations/session07.rst:772
msgid "Deploying An Application"
msgstr ""

#: ../source/presentations/session07.rst:777
msgid "Now that we have a working application, our next step is to deploy it."
msgstr ""

#: ../source/presentations/session07.rst:782
msgid "This will allow us to interact with the application in a live setting."
msgstr ""

#: ../source/presentations/session07.rst:784
msgid ""
"We will be able to see the application from any computer, and can share "
"it with friends and family."
msgstr ""

#: ../source/presentations/session07.rst:787
msgid ""
"To do this, we'll be using one of the most popular platforms for "
"deploying web applications today, `Heroku`_."
msgstr ""

#: ../source/presentations/session07.rst:793
msgid "Heroku"
msgstr ""

#: ../source/presentations/session07.rst:802
msgid ""
"Heroku provides all the infrastructure needed to run many types of "
"applications."
msgstr ""

#: ../source/presentations/session07.rst:805
msgid ""
"It also provides `add-on services`_ that support everything from "
"analytics to payment processing."
msgstr ""

#: ../source/presentations/session07.rst:808
msgid "Elaborate applications deployed on Heroku can be quite expensive."
msgstr ""

#: ../source/presentations/session07.rst:810
msgid ""
"But for simple applications like our learning journal, the price is just "
"right: **free**"
msgstr ""

#: ../source/presentations/session07.rst:817
msgid "Heroku is predicated on interaction with a git repository."
msgstr ""

#: ../source/presentations/session07.rst:822
msgid "You initialize a new Heroku app in a repository on your machine."
msgstr ""

#: ../source/presentations/session07.rst:824
msgid "This adds Heroku as a *remote* to your repository."
msgstr ""

#: ../source/presentations/session07.rst:826
msgid ""
"When you are ready to deploy your application, you ``git push heroku "
"master``."
msgstr ""

#: ../source/presentations/session07.rst:829
msgid ""
"Adding a few special files to your repository allows Heroku to tell what "
"kind of application you are creating."
msgstr ""

#: ../source/presentations/session07.rst:832
msgid ""
"It responds to your push by running an appropriate build process and then"
" starting your app with a command you provide."
msgstr ""

#: ../source/presentations/session07.rst:836
msgid "Preparing to Run Your App"
msgstr ""

#: ../source/presentations/session07.rst:838
msgid ""
"In order for Heroku to deploy your application, it has to have a command "
"it can run from a standard shell."
msgstr ""

#: ../source/presentations/session07.rst:844
msgid ""
"We could use the ``pserve`` command we've been using locally, but the "
"server it uses is designed for development."
msgstr ""

#: ../source/presentations/session07.rst:847
msgid "It's not really suitable for a public deployment."
msgstr ""

#: ../source/presentations/session07.rst:849
msgid ""
"Instead we'll use a more robust, production-ready server that came as one"
" of our dependencies: `waitress`_."
msgstr ""

#: ../source/presentations/session07.rst:852
msgid ""
"We'll start by creating a python file that can be executed to start the "
"``waitress`` server."
msgstr ""

#: ../source/presentations/session07.rst:859
msgid ""
"At the very top level of your application project, in the same folder "
"where you find ``setup.py``, create a new file: ``runapp.py``"
msgstr ""

#: ../source/presentations/session07.rst:877
msgid "Once this exists, you can try running your app with it:"
msgstr ""

#: ../source/presentations/session07.rst:886
msgid ""
"This would be enough, but we also want to *install* our application as a "
"Python package."
msgstr ""

#: ../source/presentations/session07.rst:892
msgid "This will ensure that the dependencies for the application are installed."
msgstr ""

#: ../source/presentations/session07.rst:894
msgid "Add a new file called simply ``run`` in the same folder:"
msgstr ""

#: ../source/presentations/session07.rst:902
msgid ""
"The first line of this file will install our application and its "
"dependencies."
msgstr ""

#: ../source/presentations/session07.rst:905
msgid "The second line will execute the server script."
msgstr ""

#: ../source/presentations/session07.rst:909
msgid "We'll need to do the same thing for initializing the database."
msgstr ""

#: ../source/presentations/session07.rst:914
msgid "Create another new file called ``build_db`` in the same folder:"
msgstr ""

#: ../source/presentations/session07.rst:922
msgid ""
"Now, add ``run``, ``build_db`` and ``runapp.py`` to your repository and "
"commit the changes."
msgstr ""

#: ../source/presentations/session07.rst:927
msgid "For Heroku to use them, ``run`` and ``build_db`` must be *executable*"
msgstr ""

#: ../source/presentations/session07.rst:932
msgid ""
"For OSX and Linux users this is easy (do the same for ``run`` and "
"``build_db``):"
msgstr ""

#: ../source/presentations/session07.rst:939
msgid "Windows users, if you have ``git-bash``, you can do the same"
msgstr ""

#: ../source/presentations/session07.rst:941
msgid "For the rest of you, try this (for both ``run`` and ``build_db``):"
msgstr ""

#: ../source/presentations/session07.rst:952
msgid "Commit your changes to git to make them permanent."
msgstr ""

#: ../source/presentations/session07.rst:957
msgid ""
"Next, we have to inform Heroku that we will be using this script to run "
"our application online"
msgstr ""

#: ../source/presentations/session07.rst:963
msgid "Heroku uses a special file called ``Procfile`` to do this."
msgstr ""

#: ../source/presentations/session07.rst:965
msgid "Add that file now, in the same directory."
msgstr ""

#: ../source/presentations/session07.rst:971
msgid ""
"This file tells Heroku that we have one ``web`` process to run, and that "
"it is the ``run`` script located right here."
msgstr ""

#: ../source/presentations/session07.rst:974
msgid ""
"Providing the ``./`` at the start of the file name allows the shell to "
"execute scripts that are not on the system PATH."
msgstr ""

#: ../source/presentations/session07.rst:977
msgid "Add this new file to your repository and commit it."
msgstr ""

#: ../source/presentations/session07.rst:982
msgid ""
"By default, Heroku uses the latest update of Python version 2.7 for any "
"Python app."
msgstr ""

#: ../source/presentations/session07.rst:988
msgid ""
"You can override this and specify any runtime version of Python "
"`available in Heroku`_."
msgstr ""

#: ../source/presentations/session07.rst:991
msgid ""
"Just add a file called ``runtime.txt`` to your repository, with one line "
"only:"
msgstr ""

#: ../source/presentations/session07.rst:998
msgid "Create that file, add it to your repository, and commit the changes."
msgstr ""

#: ../source/presentations/session07.rst:1004
msgid "Set Up a Heroku App"
msgstr ""

#: ../source/presentations/session07.rst:1006
msgid "The next step is to create a new app with heroku."
msgstr ""

#: ../source/presentations/session07.rst:1011
msgid "You installed the Heroku toolbelt prior to class."
msgstr ""

#: ../source/presentations/session07.rst:1013
msgid "The toolbelt provides a command to create a new app."
msgstr ""

#: ../source/presentations/session07.rst:1015
msgid "From the root of your project (where the ``setup.py`` file is) run:"
msgstr ""

#: ../source/presentations/session07.rst:1024
msgid "Note that a new *remote* called ``heroku`` has been added:"
msgstr ""

#: ../source/presentations/session07.rst:1034
msgid ""
"Your application will require a database, but ``sqlite`` is not really "
"appropriate for production."
msgstr ""

#: ../source/presentations/session07.rst:1040
msgid ""
"For the deployed app, you'll use `PostgreSQL`_, the best open-source "
"database."
msgstr ""

#: ../source/presentations/session07.rst:1043
msgid ""
"Heroku `provides an add-on`_ that supports PostgreSQL, and you'll need to"
" set it up."
msgstr ""

#: ../source/presentations/session07.rst:1046
msgid "Again, use the Heroku Toolbelt:"
msgstr ""

#: ../source/presentations/session07.rst:1064
msgid ""
"You can get information about the status of your PostgreSQL service with "
"the toolbelt:"
msgstr ""

#: ../source/presentations/session07.rst:1080
msgid ""
"And there is also information about the configuration for the database "
"(and your app):"
msgstr ""

#: ../source/presentations/session07.rst:1090
msgid "Configuration for Heroku"
msgstr ""

#: ../source/presentations/session07.rst:1092
msgid ""
"Notice that the configuration for our application on Heroku provides a "
"specific database URL."
msgstr ""

#: ../source/presentations/session07.rst:1098
msgid ""
"We could copy this value and paste it into our ``production.ini`` "
"configuration file."
msgstr ""

#: ../source/presentations/session07.rst:1101
msgid ""
"But if we do that, then we will be storing that value in GitHub, where "
"anyone at all can see it."
msgstr ""

#: ../source/presentations/session07.rst:1104
msgid "That's not particularly secure."
msgstr ""

#: ../source/presentations/session07.rst:1106
msgid ""
"Luckily, Heroku provides configuration like the database URL in "
"*environment variables* that we can read in Python."
msgstr ""

#: ../source/presentations/session07.rst:1109
msgid "In fact, we've already done this with our ``runapp.py`` script:"
msgstr ""

#: ../source/presentations/session07.rst:1117
msgid ""
"The Python standard library provides ``os.environ`` to allow access to "
"*environment variables* from Python code."
msgstr ""

#: ../source/presentations/session07.rst:1123
msgid "This attribute is a dictionary keyed by the name of the variable."
msgstr ""

#: ../source/presentations/session07.rst:1125
msgid "We can use it to gain access to configuration provided by Heroku."
msgstr ""

#: ../source/presentations/session07.rst:1127
msgid "Update ``learning_journal/__init__.py`` like so:"
msgstr ""

#: ../source/presentations/session07.rst:1143
msgid ""
"We'll need to make the same changes to "
"``learning_journal/scripts/initializedb.py``:"
msgstr ""

#: ../source/presentations/session07.rst:1158
msgid ""
"This mechanism allows us to defer other sensitive values such as the "
"password for our initial user:"
msgstr ""

#: ../source/presentations/session07.rst:1173
msgid "And for the secret value for our AuthTktAuthenticationPolicy"
msgstr ""

#: ../source/presentations/session07.rst:1187
msgid "We will now be looking for three values from the OS environment:"
msgstr ""

#: ../source/presentations/session07.rst:1191
msgid "DATABASE_URL"
msgstr ""

#: ../source/presentations/session07.rst:1192
msgid "ADMIN_PASSWORD"
msgstr ""

#: ../source/presentations/session07.rst:1193
msgid "AUTH_SECRET"
msgstr ""

#: ../source/presentations/session07.rst:1198
msgid "The ``DATABASE_URL`` value is set for us by the PosgreSQL add-on."
msgstr ""

#: ../source/presentations/session07.rst:1200
msgid ""
"But the other two are not.  We must set them ourselves using ``heroku "
"config:set``:"
msgstr ""

#: ../source/presentations/session07.rst:1212
msgid ""
"You can see the values that you have set at any time using ``heroku "
"config``:"
msgstr ""

#: ../source/presentations/session07.rst:1225
msgid "These values are sent and received using secure transport."
msgstr ""

#: ../source/presentations/session07.rst:1227
msgid "You do not need to worry about them being intercepted."
msgstr ""

#: ../source/presentations/session07.rst:1229
msgid ""
"This mechanism allows you to place important configuration values outside"
" the code for your application."
msgstr ""

#: ../source/presentations/session07.rst:1234
msgid ""
"We've been handling our application's dependencies by adding them to "
"``setup.py``."
msgstr ""

#: ../source/presentations/session07.rst:1240
msgid "It's a good idea to install all of these before attempting to run our app."
msgstr ""

#: ../source/presentations/session07.rst:1242
msgid ""
"The ``pip`` package manager allows us to dump a list of the packages "
"we've installed in a virtual environment using the ``freeze`` command:"
msgstr ""

#: ../source/presentations/session07.rst:1252
msgid ""
"We can tell heroku to install these dependencies by creating a file "
"called ``requirements.txt`` at the root of our project repository:"
msgstr ""

#: ../source/presentations/session07.rst:1259
msgid "Add this file to your repository and commit the changes."
msgstr ""

#: ../source/presentations/session07.rst:1264
msgid ""
"But there is also a new dependency we've added that is only needed for "
"Heroku."
msgstr ""

#: ../source/presentations/session07.rst:1269
msgid ""
"Because we are using a PostgreSQL database, we need to install the "
"``psycopg2`` package, which handles communicating with the database."
msgstr ""

#: ../source/presentations/session07.rst:1272
msgid "We don't want to install this locally, though, where we use sqlite."
msgstr ""

#: ../source/presentations/session07.rst:1274
msgid ""
"Go ahead and add one more line to ``requirements.txt`` with the latest "
"version of the ``pyscopg2`` package:"
msgstr ""

#: ../source/presentations/session07.rst:1281
msgid "Commit the change to your repository."
msgstr ""

#: ../source/presentations/session07.rst:1284
msgid "Deployment"
msgstr ""

#: ../source/presentations/session07.rst:1286
msgid "We are now ready to deploy our application."
msgstr ""

#: ../source/presentations/session07.rst:1291
msgid "All we need to do is push our repository to the ``heroku`` master:"
msgstr ""

#: ../source/presentations/session07.rst:1307
msgid ""
"You can use the ``run`` command to execute arbitrary commands in the "
"Heroku environment."
msgstr ""

#: ../source/presentations/session07.rst:1313
msgid ""
"You can use this to initialize the database, using the shell script you "
"created earlier:"
msgstr ""

#: ../source/presentations/session07.rst:1321
msgid ""
"This will install our application and then run the database "
"initialization script."
msgstr ""

#: ../source/presentations/session07.rst:1326
msgid "At this point, you should be ready to view your application online."
msgstr ""

#: ../source/presentations/session07.rst:1331
msgid "Use the ``open`` command from heroku to open your website in a browser:"
msgstr ""

#: ../source/presentations/session07.rst:1337
msgid "If you don't see your application, check to see if it is running:"
msgstr ""

#: ../source/presentations/session07.rst:1345
msgid ""
"If you get no results, use the ``scale`` command to try turning on a web "
"*dyno*:"
msgstr ""

#: ../source/presentations/session07.rst:1355
msgid "Heroku pricing is dependent on the number of *dynos* you are running."
msgstr ""

#: ../source/presentations/session07.rst:1360
msgid ""
"So long as you only run one dyno per application, you will remain in the "
"free tier."
msgstr ""

#: ../source/presentations/session07.rst:1363
msgid "Scaling above one dyno will begin to incur costs."
msgstr ""

#: ../source/presentations/session07.rst:1365
msgid "**Pay attention to the number of dynos you have running**."
msgstr ""

#: ../source/presentations/session07.rst:1369
msgid "Troubleshooting problems with Heroku deployment can be challenging."
msgstr ""

#: ../source/presentations/session07.rst:1374
msgid "Your most powerful tool is the ``logs`` command:"
msgstr ""

#: ../source/presentations/session07.rst:1383
msgid ""
"This command will print the last 50 or so lines of logging from your "
"application."
msgstr ""

#: ../source/presentations/session07.rst:1386
msgid "You can use the ``-t`` flag to *tail* the logs."
msgstr ""

#: ../source/presentations/session07.rst:1388
msgid ""
"This will continually update log entries to your terminal as you interact"
" with the application."
msgstr ""

#: ../source/presentations/session07.rst:1393
msgid ""
"Try logging in to your application with the password you set up in Heroku"
" configuration."
msgstr ""

#: ../source/presentations/session07.rst:1399
msgid "Once you are logged in, try adding an entry or two."
msgstr ""

#: ../source/presentations/session07.rst:1401
msgid "You are now off to the races!"
msgstr ""

#: ../source/presentations/session07.rst:1405
msgid "**Congratulations**"
msgstr ""

#: ../source/presentations/session07.rst:1408
msgid "Adding Polish"
msgstr ""

#: ../source/presentations/session07.rst:1413
msgid "So we have now deployed a running application."
msgstr ""

#: ../source/presentations/session07.rst:1418
msgid "But there are a number of things we can do to make the application better."
msgstr ""

#: ../source/presentations/session07.rst:1421
msgid "Let's start by adding a way to log out."
msgstr ""

#: ../source/presentations/session07.rst:1425
msgid "Adding Logout"
msgstr ""

#: ../source/presentations/session07.rst:1427
msgid "Our ``login`` view is already set up to work for logout."
msgstr ""

#: ../source/presentations/session07.rst:1432
msgid "What is the logical path taken if that view is accessed via ``GET``?"
msgstr ""

#: ../source/presentations/session07.rst:1434
msgid "All we need to do is add a view_config that allows that."
msgstr ""

#: ../source/presentations/session07.rst:1436
msgid "Open ``learning_journal/views.py`` and make these changes:"
msgstr ""

#: ../source/presentations/session07.rst:1450
msgid ""
"The chief advantage of Heroku is that we can re-deploy with a single "
"command."
msgstr ""

#: ../source/presentations/session07.rst:1455
msgid "Add and commit your changes to git."
msgstr ""

#: ../source/presentations/session07.rst:1457
msgid "Then re-deploy by pushing to the ``heroku master``:"
msgstr ""

#: ../source/presentations/session07.rst:1463
msgid ""
"Once that completes, you should be able to reload your application in the"
" browser."
msgstr ""

#: ../source/presentations/session07.rst:1466
msgid "Visit the following URL path to test log out:"
msgstr ""

#: ../source/presentations/session07.rst:1468
msgid "/sign/out"
msgstr ""

#: ../source/presentations/session07.rst:1471
msgid "Hide UI for Anonymous"
msgstr ""

#: ../source/presentations/session07.rst:1473
msgid ""
"Another improvement we can make is to hide UI that is not available for "
"users who are not logged in."
msgstr ""

#: ../source/presentations/session07.rst:1479
msgid ""
"The first step is to update our ``detail`` view to tell us if someone is "
"logged in:"
msgstr ""

#: ../source/presentations/session07.rst:1491
msgid ""
"The ``authenticated_userid`` function returns the id of the logged in "
"user, if there is one, and ``None`` if there is not."
msgstr ""

#: ../source/presentations/session07.rst:1494
msgid "We can use that."
msgstr ""

#: ../source/presentations/session07.rst:1498
msgid "First we can hide the UI for creating a new entry:"
msgstr ""

#: ../source/presentations/session07.rst:1503
msgid "Edit ``templates/list.jinja2``:"
msgstr ""

#: ../source/presentations/session07.rst:1515
msgid ""
"This relies on the fact that the login form will only be present if there"
" is **not** an authenticated user."
msgstr ""

#: ../source/presentations/session07.rst:1520
msgid "Next, we can hide the UI for editing an existing entry:"
msgstr ""

#: ../source/presentations/session07.rst:1525
msgid "Edit ``templates/detail.jinja2``:"
msgstr ""

#: ../source/presentations/session07.rst:1543
msgid "Format Entries"
msgstr ""

#: ../source/presentations/session07.rst:1545
msgid "It would be nice if our journal entries could have HTML formatting."
msgstr ""

#: ../source/presentations/session07.rst:1550
msgid "We could write HTML by hand in the body field, but that'd be a pain."
msgstr ""

#: ../source/presentations/session07.rst:1552
msgid ""
"Instead, let's allow ourselves to write entries `in Markdown`_, a popular"
" markup syntax used by GitHub and many other websites."
msgstr ""

#: ../source/presentations/session07.rst:1557
msgid "Python provides several libraries that implement markdown formatting."
msgstr ""

#: ../source/presentations/session07.rst:1559
msgid ""
"They will take text that contains markdown formatting and convert it to "
"HTML."
msgstr ""

#: ../source/presentations/session07.rst:1562
msgid "Let's use one."
msgstr ""

#: ../source/presentations/session07.rst:1566
msgid "The first step, is to pick a package and add it to our dependencies."
msgstr ""

#: ../source/presentations/session07.rst:1571
msgid "My recommendation is the `markdown`_ python library."
msgstr ""

#: ../source/presentations/session07.rst:1573
msgid "Open ``setup.py`` and add the package to the ``requires`` list:"
msgstr ""

#: ../source/presentations/session07.rst:1583
msgid "We'll test this locally first, so go ahead and re-install your app:"
msgstr ""

#: ../source/presentations/session07.rst:1595
msgid ""
"We've seen before how Jinja2 provides a number of filters for values when"
" rendering templates."
msgstr ""

#: ../source/presentations/session07.rst:1601
msgid ""
"A nice feature of the templating language is that it also allows you to "
"`create your own filters`_."
msgstr ""

#: ../source/presentations/session07.rst:1604
msgid "Remember the template syntax for a filter:"
msgstr ""

#: ../source/presentations/session07.rst:1610
msgid ""
"A filter is simply a function that takes the value to the left of the "
"``|`` character as a first argument, and any supplied arguments as the "
"second and beyond:"
msgstr ""

#: ../source/presentations/session07.rst:1623
msgid ""
"Creating a ``markdown`` filter will allow us to convert plain text stored"
" in the database to HTML at template rendering time."
msgstr ""

#: ../source/presentations/session07.rst:1629
msgid "Open ``learning_journal/views.py`` and add the following:"
msgstr ""

#: ../source/presentations/session07.rst:1641
msgid ""
"The ``Markup`` class from jinja2 marks a string with HTML tags as "
"\"safe\"."
msgstr ""

#: ../source/presentations/session07.rst:1643
msgid ""
"This prevents the tags from being *escaped* when they are rendered into a"
" page."
msgstr ""

#: ../source/presentations/session07.rst:1648
msgid ""
"In order for ``Jinja2`` to be aware that our filter exists, we need to "
"register it."
msgstr ""

#: ../source/presentations/session07.rst:1654
msgid "In Pyramid, we do this in configuration."
msgstr ""

#: ../source/presentations/session07.rst:1656
msgid "Open ``development.ini`` and edit it as follows:"
msgstr ""

#: ../source/presentations/session07.rst:1665
msgid "This informs the main app that we wish to register a jinja2 filter."
msgstr ""

#: ../source/presentations/session07.rst:1667
msgid ""
"We will call it ``markdown`` and it will be embodied by the function we "
"just wrote."
msgstr ""

#: ../source/presentations/session07.rst:1672
msgid ""
"To see the results of our work, we'll need to use the filter in a "
"template somewhere."
msgstr ""

#: ../source/presentations/session07.rst:1678
msgid ""
"I suggest using it in the ``learning_journal/templates/detail.jinja2`` "
"template:"
msgstr ""

#: ../source/presentations/session07.rst:1696
msgid ""
"Start up your application, and create an entry using valid markdown "
"formatting:"
msgstr ""

#: ../source/presentations/session07.rst:1707
msgid ""
"Once you save your entry, you should be able to see it with actual "
"formatting: headers, bulleted lists, links, and so on."
msgstr ""

#: ../source/presentations/session07.rst:1710
msgid "That makes quite a difference."
msgstr ""

#: ../source/presentations/session07.rst:1712
msgid "Go ahead and add the same filter registration to ``production.ini``"
msgstr ""

#: ../source/presentations/session07.rst:1714
msgid "Then commit your changes and redeploy:"
msgstr ""

#: ../source/presentations/session07.rst:1722
msgid "Syntax Highlighting"
msgstr ""

#: ../source/presentations/session07.rst:1724
msgid ""
"The purpose of this journal is to allow you to write entries about the "
"things you learn in this class and elsewhere."
msgstr ""

#: ../source/presentations/session07.rst:1730
msgid ""
"Markdown formatting allows for \"preformatted\" blocks of text like code "
"samples."
msgstr ""

#: ../source/presentations/session07.rst:1733
msgid "But there is nothing in markdown that handles *colorizing* code."
msgstr ""

#: ../source/presentations/session07.rst:1735
msgid ""
"Luckily, the markdown package allows for extensions, and one of these "
"supports `colorization`_."
msgstr ""

#: ../source/presentations/session07.rst:1738
msgid "It requires the `pygments`_ library"
msgstr ""

#: ../source/presentations/session07.rst:1740
msgid "Let's set this up next."
msgstr ""

#: ../source/presentations/session07.rst:1747
msgid "Again, we need to install our new dependency first."
msgstr ""

#: ../source/presentations/session07.rst:1752
msgid "Add the following to ``requires`` in ``setup.py``:"
msgstr ""

#: ../source/presentations/session07.rst:1762
msgid "Then re-install your app to pick up the software:"
msgstr ""

#: ../source/presentations/session07.rst:1772
msgid ""
"The next step is to extend our markdown filter in "
"``learning_journal/views.py`` with this feature."
msgstr ""

#: ../source/presentations/session07.rst:1789
msgid "Now, you'll be able to make highlighted code blocks just like in GitHub:"
msgstr ""

#: ../source/presentations/session07.rst:1800
msgid ""
"Code highlighting works by putting HTML ``<span>`` tags with special CSS "
"classes around bits of your code."
msgstr ""

#: ../source/presentations/session07.rst:1806
msgid "We need to generate and add the css to support this."
msgstr ""

#: ../source/presentations/session07.rst:1808
msgid ""
"You can use the ``pygmentize`` command from pygments to `generate the "
"css`_."
msgstr ""

#: ../source/presentations/session07.rst:1811
msgid "Make sure you are in the directory with ``setup.py`` when you run this:"
msgstr ""

#: ../source/presentations/session07.rst:1818
msgid "The styles will be printed to standard out."
msgstr ""

#: ../source/presentations/session07.rst:1820
msgid "The ``>>`` shell operator *appends* the output to the file named."
msgstr ""

#: ../source/presentations/session07.rst:1826
msgid ""
"Go ahead and restart your application and see the difference a little "
"style makes:"
msgstr ""

#: ../source/presentations/session07.rst:1838
msgid "Try writing an entry with a little Python code in it."
msgstr ""

#: ../source/presentations/session07.rst:1840
msgid "Python is not the only language available."
msgstr ""

#: ../source/presentations/session07.rst:1842
msgid ""
"Any syntax covered by `pygments lexers`_ is available, just use the "
"*shortname* from a lexer to get that type of style highlighting."
msgstr ""

#: ../source/presentations/session07.rst:1849
msgid "When you've got this working as you wish, go ahead and deploy it."
msgstr ""

#: ../source/presentations/session07.rst:1854
msgid "Add and commit all the changes you've made."
msgstr ""

#: ../source/presentations/session07.rst:1856
msgid "Then push your results to the ``heroku master``:"
msgstr ""

#: ../source/presentations/session07.rst:1868
msgid "That's just about enough for now."
msgstr ""

#: ../source/presentations/session07.rst:1873
msgid ""
"There's no homework for you to submit this week. You've worked hard "
"enough."
msgstr ""

#: ../source/presentations/session07.rst:1875
msgid ""
"Take the week to review what we've done and make sure you have a solid "
"understanding of it."
msgstr ""

#: ../source/presentations/session07.rst:1878
msgid ""
"If you wish, play with HTML and CSS to make your journal more "
"personalized."
msgstr ""

#: ../source/presentations/session07.rst:1880
msgid ""
"However, in preparation for our work with Django next week, I'd like you "
"to get started a bit ahead of time."
msgstr ""

#: ../source/presentations/session07.rst:1883
msgid "Please read and follow along with this `basic intro to Django`_."
msgstr ""

#: ../source/presentations/session07.rst:1887
msgid "**See You Then**"
msgstr ""

#: ../source/presentations/session08.rst:3
msgid "Session 08"
msgstr ""

#: ../source/presentations/session08.rst:9
#: ../source/presentations/session09.rst:9
#: ../source/presentations/session10.rst:9
msgid "image: http://djangopony.com/"
msgstr ""

#: ../source/presentations/session08.rst:12
msgid "Building a Django Application"
msgstr ""

#: ../source/presentations/session08.rst:16
msgid "Wherein we build a simple blogging app."
msgstr ""

#: ../source/presentations/session08.rst:20
msgid "A Full Stack Framework"
msgstr ""

#: ../source/presentations/session08.rst:22
msgid "Django comes with:"
msgstr ""

#: ../source/presentations/session08.rst:29
msgid "Persistence via the *Django ORM*"
msgstr ""

#: ../source/presentations/session08.rst:30
msgid "CRUD content editing via the automatic *Django Admin*"
msgstr ""

#: ../source/presentations/session08.rst:31
msgid "URL Mapping via *urlpatterns*"
msgstr ""

#: ../source/presentations/session08.rst:32
msgid "Templating via the *Django Template Language*"
msgstr ""

#: ../source/presentations/session08.rst:33
msgid "Caching with levels of configurability"
msgstr ""

#: ../source/presentations/session08.rst:34
msgid "Internationalization via i18n hooks"
msgstr ""

#: ../source/presentations/session08.rst:35
msgid "Form rendering and handling"
msgstr ""

#: ../source/presentations/session08.rst:36
msgid "User authentication and authorization"
msgstr ""

#: ../source/presentations/session08.rst:38
msgid "Pretty much everything you need to make a solid website quickly"
msgstr ""

#: ../source/presentations/session08.rst:42
msgid "Lots of frameworks offer some of these features, if not all."
msgstr ""

#: ../source/presentations/session08.rst:47
msgid "What is Django's *killer feature*"
msgstr ""

#: ../source/presentations/session08.rst:51
msgid "**The Django Admin**"
msgstr ""

#: ../source/presentations/session08.rst:55
msgid ""
"Works in concert with the Django ORM to provide automatic CRUD "
"functionality"
msgstr ""

#: ../source/presentations/session08.rst:60
msgid "You write the models, it provides the UI"
msgstr ""

#: ../source/presentations/session08.rst:62
msgid "You've seen this in action. Pretty neat, eh?"
msgstr ""

#: ../source/presentations/session08.rst:66
msgid ""
"The Django Admin is a great example of the Pareto Priciple, a.k.a. the "
"80/20 rule:"
msgstr ""

#: ../source/presentations/session08.rst:74
#, python-format
msgid "**80% of the problems can be solved by 20% of the effort**"
msgstr ""

#: ../source/presentations/session08.rst:76
msgid "The converse also holds true:"
msgstr ""

#: ../source/presentations/session08.rst:80
#, python-format
msgid ""
"**Fixing the last 20% of the problems will take the remaining 80% of the "
"effort.**"
msgstr ""

#: ../source/presentations/session08.rst:87
msgid "**Other Django Advantages**"
msgstr ""

#: ../source/presentations/session08.rst:89
msgid "Clearly the most popular full-stack Python web framework at this time"
msgstr ""

#: ../source/presentations/session08.rst:94
msgid "Popularity translates into:"
msgstr ""

#: ../source/presentations/session08.rst:98
msgid "Active, present community"
msgstr ""

#: ../source/presentations/session08.rst:99
msgid "Plethora of good examples to be found online"
msgstr ""

#: ../source/presentations/session08.rst:100
msgid "Rich ecosystem of *apps* (encapsulated add-on functionality)"
msgstr ""

#: ../source/presentations/session08.rst:104
msgid "**Jobs**"
msgstr ""

#: ../source/presentations/session08.rst:108
msgid "Django releases in the last 12+ months (a short list):"
msgstr ""

#: ../source/presentations/session08.rst:115
msgid "1.9 (December 2015)"
msgstr ""

#: ../source/presentations/session08.rst:116
msgid "1.8.7 (November 2015)"
msgstr ""

#: ../source/presentations/session08.rst:117
msgid "1.7.11 (November 2015)"
msgstr ""

#: ../source/presentations/session08.rst:118
msgid "1.8.5 (October 2015)"
msgstr ""

#: ../source/presentations/session08.rst:119
msgid "1.7.10 (August 2015)"
msgstr ""

#: ../source/presentations/session08.rst:120
msgid "1.8.3 (July 2015)"
msgstr ""

#: ../source/presentations/session08.rst:121
msgid "1.8 (April 2015)"
msgstr ""

#: ../source/presentations/session08.rst:122
msgid "1.7.7 (March 2015)"
msgstr ""

#: ../source/presentations/session08.rst:123
msgid "1.7.4 (January 2014)"
msgstr ""

#: ../source/presentations/session08.rst:125
msgid ""
"Django 1.8 is the second *Long Term Support* version, with a guaranteed "
"support period of three years."
msgstr ""

#: ../source/presentations/session08.rst:130
msgid "Thorough, readable, and discoverable."
msgstr ""

#: ../source/presentations/session08.rst:135
msgid "Led the way to better documentation for all Python"
msgstr ""

#: ../source/presentations/session08.rst:137
msgid ""
"`Read The Docs <https://readthedocs.org/>`_ - built in connection with "
"Django, sponsored by the Django Software Foundation."
msgstr ""

#: ../source/presentations/session08.rst:140
msgid "Write documentation as part of your python package."
msgstr ""

#: ../source/presentations/session08.rst:142
msgid "Render new versions of that documentation for every commit."
msgstr ""

#: ../source/presentations/session08.rst:146
msgid "**this is awesome**"
msgstr ""

#: ../source/presentations/session08.rst:150
msgid "Where We Stand"
msgstr ""

#: ../source/presentations/session08.rst:152
msgid ""
"For your homework this week, you created a ``Post`` model to serve as the"
" heart of our blogging app."
msgstr ""

#: ../source/presentations/session08.rst:158
msgid ""
"You also took some time to get familiar with the basic workings of the "
"Django ORM."
msgstr ""

#: ../source/presentations/session08.rst:161
msgid "You made a minor modification to our model class and wrote a test for it."
msgstr ""

#: ../source/presentations/session08.rst:163
msgid "And you installed the Django Admin site and added your app to it."
msgstr ""

#: ../source/presentations/session08.rst:169
msgid ""
"One of the most common features in a blog is the ability to categorize "
"posts."
msgstr ""

#: ../source/presentations/session08.rst:174
msgid "Let's add this feature to our blog!"
msgstr ""

#: ../source/presentations/session08.rst:176
msgid ""
"To do so, we'll be adding a new model, and making some changes to "
"existing code."
msgstr ""

#: ../source/presentations/session08.rst:181
msgid "This means that we'll need to *change our database schema*."
msgstr ""

#: ../source/presentations/session08.rst:186
msgid ""
"You've seen how to add new tables to a database using the ``migrate`` "
"command."
msgstr ""

#: ../source/presentations/session08.rst:191
msgid "And you've created your first migration in setting up the ``Post`` model."
msgstr ""

#: ../source/presentations/session08.rst:193
msgid "This is an example of altering the *database schema* using Python code."
msgstr ""

#: ../source/presentations/session08.rst:195
msgid "Starting in Django 1.7, this ability is available built-in to Django."
msgstr ""

#: ../source/presentations/session08.rst:197
msgid "Before verson 1.7 it was available in an add-on called `South`_."
msgstr ""

#: ../source/presentations/session08.rst:204
msgid ""
"We want to add a new model to represent the categories our blog posts "
"might fall into."
msgstr ""

#: ../source/presentations/session08.rst:210
msgid "This model will need to have:"
msgstr ""

#: ../source/presentations/session08.rst:214
msgid "a name for the category"
msgstr ""

#: ../source/presentations/session08.rst:215
msgid "a longer description"
msgstr ""

#: ../source/presentations/session08.rst:216
msgid "a relationship to the Post model"
msgstr ""

#: ../source/presentations/session08.rst:230
msgid ""
"In our ``Post`` model, we used a ``ForeignKeyField`` field to match an "
"author to her posts."
msgstr ""

#: ../source/presentations/session08.rst:236
msgid ""
"This models the situation in which a single author can have many posts, "
"while each post has only one author."
msgstr ""

#: ../source/presentations/session08.rst:239
msgid "We call this a *Many to One* relationship."
msgstr ""

#: ../source/presentations/session08.rst:241
msgid "But any given ``Post`` might belong in more than one ``Category``."
msgstr ""

#: ../source/presentations/session08.rst:243
msgid "And it would be a waste to allow only one ``Post`` for each ``Category``."
msgstr ""

#: ../source/presentations/session08.rst:245
msgid "Enter the ``ManyToManyField``"
msgstr ""

#: ../source/presentations/session08.rst:249
msgid "To get these changes set up, we now add a new migration."
msgstr ""

#: ../source/presentations/session08.rst:254
msgid "We use the ``makemigrations`` management command to do so:"
msgstr ""

#: ../source/presentations/session08.rst:265
msgid ""
"Once the migration has been created, we can apply it with the ``migrate``"
" management command."
msgstr ""

#: ../source/presentations/session08.rst:280
msgid ""
"You can even look at the migration file you just applied, "
"``myblog/migrations/0002_category.py`` to see what happened."
msgstr ""

#: ../source/presentations/session08.rst:286
msgid ""
"Let's make ``Category`` object look nice the same way we did with "
"``Post``. Start with a test:"
msgstr ""

#: ../source/presentations/session08.rst:292
msgid "add this to ``tests.py``:"
msgstr ""

#: ../source/presentations/session08.rst:310
msgid ""
"When you run your tests, you now have two, and one is failing because the"
" ``Category`` object doesn't look right."
msgstr ""

#: ../source/presentations/session08.rst:326
msgid "Do you remember how you made that change for a ``Post``?"
msgstr ""

#: ../source/presentations/session08.rst:339
msgid "Adding our new model to the Django admin is equally simple."
msgstr ""

#: ../source/presentations/session08.rst:344
msgid "Simply add the following line to ``myblog/admin.py``"
msgstr ""

#: ../source/presentations/session08.rst:357
msgid "Fire up the Django development server and see what you have in the admin:"
msgstr ""

#: ../source/presentations/session08.rst:370
msgid "Point your browser at ``http://localhost:8000/admin/``, log in and play."
msgstr ""

#: ../source/presentations/session08.rst:372
msgid ""
"Add a few categories, put some posts in them. Visit your posts, add new "
"ones and then categorize them."
msgstr ""

#: ../source/presentations/session08.rst:377
#: ../source/presentations/session08.rst:987
msgid "BREAK TIME"
msgstr ""

#: ../source/presentations/session08.rst:379
msgid "We've completed a data model for our application."
msgstr ""

#: ../source/presentations/session08.rst:381
msgid ""
"And thanks to Django's easy-to-use admin, we have a reasonable CRUD "
"application where we can manage blog posts and the categories we put them"
" in."
msgstr ""

#: ../source/presentations/session08.rst:384
msgid "When we return, we'll put a public face on our new creation."
msgstr ""

#: ../source/presentations/session08.rst:386
msgid ""
"If you've fallen behind, the app as it stands now is in our class "
"resources as ``mysite_stage_1``"
msgstr ""

#: ../source/presentations/session08.rst:391
msgid "A Public Face"
msgstr ""

#: ../source/presentations/session08.rst:395
msgid "Point your browser at http://localhost:8000/"
msgstr ""

#: ../source/presentations/session08.rst:400
msgid "What do you see?"
msgstr ""

#: ../source/presentations/session08.rst:404
msgid "We need to add some public pages for our blog."
msgstr ""

#: ../source/presentations/session08.rst:406
msgid ""
"In Django, the code that builds a page that you can see is called a "
"*view*."
msgstr ""

#: ../source/presentations/session08.rst:410
msgid "Django Views"
msgstr ""

#: ../source/presentations/session08.rst:412
msgid ""
"A *view* can be defined as a *callable* that takes a request and returns "
"a response."
msgstr ""

#: ../source/presentations/session08.rst:418
msgid "This should sound pretty familiar to you."
msgstr ""

#: ../source/presentations/session08.rst:420
msgid "Classically, Django views were functions."
msgstr ""

#: ../source/presentations/session08.rst:422
msgid ""
"Version 1.3 added support for Class-based Views (a class with a "
"``__call__`` method is a callable)"
msgstr ""

#: ../source/presentations/session08.rst:428
msgid "Let's add a really simple view to our app."
msgstr ""

#: ../source/presentations/session08.rst:433
msgid ""
"It will be a stub for our public UI.  Add this to ``views.py`` in "
"``myblog``"
msgstr ""

#: ../source/presentations/session08.rst:452
msgid "In your homework tutorial, you learned about Django **urlconfs**"
msgstr ""

#: ../source/presentations/session08.rst:457
msgid "We used our project urlconf to hook the Django admin into our project."
msgstr ""

#: ../source/presentations/session08.rst:459
msgid "We want to do the same thing for our new app."
msgstr ""

#: ../source/presentations/session08.rst:461
msgid ""
"In general, an *app* that serves any sort of views should contain its own"
" urlconf."
msgstr ""

#: ../source/presentations/session08.rst:464
msgid "The project urlconf should mainly *include* these where possible."
msgstr ""

#: ../source/presentations/session08.rst:469
msgid "Create a new file ``urls.py`` inside the ``myblog`` app package."
msgstr ""

#: ../source/presentations/session08.rst:474
msgid "Open it in your editor and add the following code:"
msgstr ""

#: ../source/presentations/session08.rst:491
msgid ""
"In order for our new urls to load, we'll need to include them in our "
"project urlconf"
msgstr ""

#: ../source/presentations/session08.rst:497
msgid "Open ``urls.py`` from the ``mysite`` project package and add this:"
msgstr ""

#: ../source/presentations/session08.rst:510
msgid "Try reloading http://localhost:8000/"
msgstr ""

#: ../source/presentations/session08.rst:512
msgid "You should see some output now."
msgstr ""

#: ../source/presentations/session08.rst:516
msgid "Project URL Space"
msgstr ""

#: ../source/presentations/session08.rst:518
msgid "A project is defined by the urls a user can visit."
msgstr ""

#: ../source/presentations/session08.rst:523
msgid "What should our users be able to see when they visit our blog?"
msgstr ""

#: ../source/presentations/session08.rst:527
msgid "A list view that shows blog posts, most recent first."
msgstr ""

#: ../source/presentations/session08.rst:528
msgid "An individual post view, showing a single post (a permalink)."
msgstr ""

#: ../source/presentations/session08.rst:530
msgid "Let's add urls for each of these."
msgstr ""

#: ../source/presentations/session08.rst:532
msgid ""
"For now, we'll use the stub view we've created so we can concentrate on "
"the url routing."
msgstr ""

#: ../source/presentations/session08.rst:537
msgid "We've already got a good url for the list page: ``blog_index`` at '/'"
msgstr ""

#: ../source/presentations/session08.rst:542
msgid ""
"For the view of a single post, we'll need to capture the id of the post. "
"Add this to ``urlpatterns`` in ``myblog/urls.py``:"
msgstr ""

#: ../source/presentations/session08.rst:551
msgid "``(\\d+)`` captures one or more digits as the post_id."
msgstr ""

#: ../source/presentations/session08.rst:553
msgid "Load http://localhost:8000/posts/1234/ and see what you get."
msgstr ""

#: ../source/presentations/session08.rst:557
msgid "When you load the above url, you should see ``1234`` listed as an *arg*"
msgstr ""

#: ../source/presentations/session08.rst:562
msgid "Try changing the route like so:"
msgstr ""

#: ../source/presentations/session08.rst:568
msgid "Reload the same url."
msgstr ""

#: ../source/presentations/session08.rst:570
msgid "Notice the change."
msgstr ""

#: ../source/presentations/session08.rst:572
msgid "What's going on there?"
msgstr ""

#: ../source/presentations/session08.rst:576
msgid "Like Pyramid, Django uses Python regular expressions to build routes."
msgstr ""

#: ../source/presentations/session08.rst:581
msgid ""
"Unlike Pyramid, Django *requires* regular expressions to capture segments"
" in a route."
msgstr ""

#: ../source/presentations/session08.rst:584
msgid "When we built our WSGI book app, we used this same appraoch."
msgstr ""

#: ../source/presentations/session08.rst:586
msgid ""
"There we learned about regular expression *capture groups*. We just "
"changed an unnamed *capture group* to a named one."
msgstr ""

#: ../source/presentations/session08.rst:589
msgid ""
"How you declare a capture group in your url pattern regexp influences how"
" it will be passed to the view callable."
msgstr ""

#: ../source/presentations/session08.rst:613
msgid ""
"Before we begin writing real views, we need to add some tests for the "
"views we are about to create."
msgstr ""

#: ../source/presentations/session08.rst:619
msgid "We'll need tests for a list view and a detail view"
msgstr ""

#: ../source/presentations/session08.rst:621
msgid "add the following *imports* at the top of ``myblog/tests.py``:"
msgstr ""

#: ../source/presentations/session08.rst:653
msgid "Our List View"
msgstr ""

#: ../source/presentations/session08.rst:655
msgid "We'd like our list view to show our posts."
msgstr ""

#: ../source/presentations/session08.rst:660
msgid "But in this blog, we have the ability to publish posts."
msgstr ""

#: ../source/presentations/session08.rst:662
msgid "Unpublished posts should not be seen in the front-end views."
msgstr ""

#: ../source/presentations/session08.rst:664
msgid "We set up our tests to have 5 published, and 5 unpublished posts"
msgstr ""

#: ../source/presentations/session08.rst:666
msgid "Let's add a test to demonstrate that the right ones show up."
msgstr ""

#: ../source/presentations/session08.rst:689
msgid "We test first to ensure that each published post is visible in our view."
msgstr ""

#: ../source/presentations/session08.rst:691
msgid ""
"Note that we also test to ensure that the unpublished posts are *not* "
"visible."
msgstr ""

#: ../source/presentations/session08.rst:712
msgid "Add the view for listing blog posts to ``views.py``."
msgstr ""

#: ../source/presentations/session08.rst:742
msgid ""
"We begin by using the QuerySet API to fetch all the posts that have "
"``published_date`` set"
msgstr ""

#: ../source/presentations/session08.rst:745
msgid ""
"Using the chaining nature of the API we order these posts by "
"``published_date``"
msgstr ""

#: ../source/presentations/session08.rst:748
msgid ""
"Remember, at this point, no query has actually been issued to the "
"database."
msgstr ""

#: ../source/presentations/session08.rst:760
msgid "Django uses configuration to determine how to find templates."
msgstr ""

#: ../source/presentations/session08.rst:762
msgid "By default, Django looks in installed *apps* for a ``templates`` directory"
msgstr ""

#: ../source/presentations/session08.rst:764
msgid "It also provides a place to list specific directories."
msgstr ""

#: ../source/presentations/session08.rst:766
msgid "Let's set that up in ``settings.py``"
msgstr ""

#: ../source/presentations/session08.rst:771
msgid ""
"Notice that ``settings.py`` already contains a ``BASE_DIR`` value which "
"points to the root of our project (where both the project and app "
"packages are located)."
msgstr ""

#: ../source/presentations/session08.rst:778
msgid "In that same file, you'll find a list bound to the symbol ``TEMPLATES``."
msgstr ""

#: ../source/presentations/session08.rst:780
msgid ""
"That list contains one dict with an empty list at the key ``DIRS``. "
"Update that empty list as shown here:"
msgstr ""

#: ../source/presentations/session08.rst:793
msgid ""
"This will ensure that Django will look in your ``mysite`` project folder "
"for a directory containing templates."
msgstr ""

#: ../source/presentations/session08.rst:798
msgid ""
"The ``mysite`` project folder does not contain a ``templates`` directory,"
" add one."
msgstr ""

#: ../source/presentations/session08.rst:803
msgid ""
"Then, in that directory add a new file ``base.html`` and add the "
"following:"
msgstr ""

#: ../source/presentations/session08.rst:825
msgid "Templates in Django"
msgstr ""

#: ../source/presentations/session08.rst:827
msgid "Before we move on, a quick word about Django templates."
msgstr ""

#: ../source/presentations/session08.rst:832
msgid "We've seen Jinja2 which was \"inspired by Django's templating system\"."
msgstr ""

#: ../source/presentations/session08.rst:834
msgid "Basically, you already know how to write Django templates."
msgstr ""

#: ../source/presentations/session08.rst:836
msgid "Django templates **do not** allow any python expressions."
msgstr ""

#: ../source/presentations/session08.rst:838
msgid "https://docs.djangoproject.com/en/1.9/ref/templates/builtins/"
msgstr ""

#: ../source/presentations/session08.rst:843
msgid "Our view tries to load ``list.html``."
msgstr ""

#: ../source/presentations/session08.rst:848
msgid "This template is probably specific to the blog functionality of our site"
msgstr ""

#: ../source/presentations/session08.rst:850
msgid ""
"It is common to keep shared templates in your project directory and "
"specialized ones in app directories."
msgstr ""

#: ../source/presentations/session08.rst:853
msgid "Add a ``templates`` directory to your ``myblog`` app, too."
msgstr ""

#: ../source/presentations/session08.rst:855
msgid "In it, create a new file ``list.html`` and add this:"
msgstr ""

#: ../source/presentations/session08.rst:896
msgid "Like Jinja2, django templates are rendered by passing in a *context*"
msgstr ""

#: ../source/presentations/session08.rst:898
msgid ""
"Django's RequestContext provides common bits, similar to the context "
"provided automatically by Pyramid"
msgstr ""

#: ../source/presentations/session08.rst:901
msgid "We add our posts to that context so they can be used by the template."
msgstr ""

#: ../source/presentations/session08.rst:913
msgid "Finally, we build an HttpResponse and return it."
msgstr ""

#: ../source/presentations/session08.rst:915
msgid "This is, fundamentally, no different from the ``stub_view`` just above."
msgstr ""

#: ../source/presentations/session08.rst:919
msgid "We need to fix the url for our blog index page"
msgstr ""

#: ../source/presentations/session08.rst:924
msgid "Update ``urls.py`` in ``myblog``:"
msgstr ""

#: ../source/presentations/session08.rst:936
msgid "Then run your tests again:"
msgstr ""

#: ../source/presentations/session08.rst:949
msgid "This is a common pattern in Django views:"
msgstr ""

#: ../source/presentations/session08.rst:953
msgid "get a template from the loader"
msgstr ""

#: ../source/presentations/session08.rst:954
msgid "build a context, usually using a RequestContext"
msgstr ""

#: ../source/presentations/session08.rst:955
msgid "render the template"
msgstr ""

#: ../source/presentations/session08.rst:956
msgid "return an HttpResponse"
msgstr ""

#: ../source/presentations/session08.rst:961
msgid "So common in fact that Django provides a shortcut for us to use:"
msgstr ""

#: ../source/presentations/session08.rst:963
msgid "``render(request, template[, ctx][, ctx_instance])``"
msgstr ""

#: ../source/presentations/session08.rst:968
msgid "Let's replace most of our view with the ``render`` shortcut"
msgstr ""

#: ../source/presentations/session08.rst:983
msgid "Remember though, all we did manually before is still happening"
msgstr ""

#: ../source/presentations/session08.rst:989
msgid "We've got the front page for our application working great."
msgstr ""

#: ../source/presentations/session08.rst:991
msgid "Next, we'll need to provide a view of a detail page for a single post."
msgstr ""

#: ../source/presentations/session08.rst:993
msgid ""
"Then we'll provide a way to log in and to navigate between the public "
"part of our application and the admin behind it."
msgstr ""

#: ../source/presentations/session08.rst:996
msgid ""
"If you've fallen behind, the app as it stands now is in our class "
"resources as ``mysite_stage_2``"
msgstr ""

#: ../source/presentations/session08.rst:1001
msgid "Our Detail View"
msgstr ""

#: ../source/presentations/session08.rst:1003
msgid "Next, let's add a view function for the detail view of a post"
msgstr ""

#: ../source/presentations/session08.rst:1008
msgid "It will need to get the ``id`` of the post to show as an argument"
msgstr ""

#: ../source/presentations/session08.rst:1010
msgid "Like the list view, it should only show published posts"
msgstr ""

#: ../source/presentations/session08.rst:1012
msgid ""
"But unlike the list view, it will need to return *something* if an "
"unpublished post is requested."
msgstr ""

#: ../source/presentations/session08.rst:1015
msgid "Let's start with the tests in ``views.py``"
msgstr ""

#: ../source/presentations/session08.rst:1020
msgid "Add the following test to our ``FrontEndTestCase`` in ``myblog/tests.py``:"
msgstr ""

#: ../source/presentations/session08.rst:1054
msgid "Now, add a new view to ``myblog/views.py``:"
msgstr ""

#: ../source/presentations/session08.rst:1077
msgid ""
"One of the features of the Django ORM is that all models raise a "
"DoesNotExist exception if ``get`` returns nothing."
msgstr ""

#: ../source/presentations/session08.rst:1083
msgid "This exception is actually an attribute of the Model you look for."
msgstr ""

#: ../source/presentations/session08.rst:1085
msgid ""
"There's also an ``ObjectDoesNotExist`` for when you don't know which "
"model you have."
msgstr ""

#: ../source/presentations/session08.rst:1088
msgid "We can use that fact to raise a Not Found exception."
msgstr ""

#: ../source/presentations/session08.rst:1090
msgid "Django will handle the rest for us."
msgstr ""

#: ../source/presentations/session08.rst:1095
msgid "We also need to add ``detail.html`` to ``myblog/templates``:"
msgstr ""

#: ../source/presentations/session08.rst:1120
msgid "In order to view a single post, we'll need a link from the list view"
msgstr ""

#: ../source/presentations/session08.rst:1125
msgid ""
"We can use the ``url`` template tag (like Pyramid's "
"``request.route_url``):"
msgstr ""

#: ../source/presentations/session08.rst:1131
msgid "In our ``list.html`` template, let's link the post titles:"
msgstr ""

#: ../source/presentations/session08.rst:1145
msgid ""
"Again, we need to insert our new view into the existing "
"``myblog/urls.py`` in ``myblog``:"
msgstr ""

#: ../source/presentations/session08.rst:1170
msgid "We've got some good stuff to look at now.  Fire up the server"
msgstr ""

#: ../source/presentations/session08.rst:1175
msgid "Reload your blog index page and click around a bit."
msgstr ""

#: ../source/presentations/session08.rst:1177
msgid "You can now move back and forth between list and detail view."
msgstr ""

#: ../source/presentations/session08.rst:1179
msgid "Try loading the detail view for a post that doesn't exist"
msgstr ""

#: ../source/presentations/session08.rst:1184
msgid "You've got a functional Blog"
msgstr ""

#: ../source/presentations/session08.rst:1189
msgid "It's not very pretty, though."
msgstr ""

#: ../source/presentations/session08.rst:1191
msgid "We can fix that by adding some css"
msgstr ""

#: ../source/presentations/session08.rst:1193
msgid "This gives us a chance to learn about Django's handling of *static files*"
msgstr ""

#: ../source/presentations/session08.rst:1197
msgid "Static Files"
msgstr ""

#: ../source/presentations/session08.rst:1199
msgid ""
"Like templates, Django expects to find static files in particular "
"locations"
msgstr ""

#: ../source/presentations/session08.rst:1204
msgid ""
"It will look for them in a directory named ``static`` in any installed "
"apps."
msgstr ""

#: ../source/presentations/session08.rst:1207
msgid "They will be served from the url path in the STATIC_URL setting."
msgstr ""

#: ../source/presentations/session08.rst:1209
msgid "By default, this is ``/static/``"
msgstr ""

#: ../source/presentations/session08.rst:1211
msgid ""
"To allow Django to automatically build the correct urls for your static "
"files, you use a special *template tag*::"
msgstr ""

#: ../source/presentations/session08.rst:1219
msgid ""
"I've prepared a css file for us to use. You can find it in the class "
"resources"
msgstr ""

#: ../source/presentations/session08.rst:1224
msgid "Create a new directory ``static`` in the ``myblog`` app."
msgstr ""

#: ../source/presentations/session08.rst:1226
msgid "Copy the ``django_blog.css`` file into that new directory."
msgstr ""

#: ../source/presentations/session08.rst:1230
msgid ""
"Next, load the static files template tag into ``base.html`` (this "
"**must** be on the *first line* of the template):"
msgstr ""

#: ../source/presentations/session08.rst:1239
msgid "Finally, add a link to the stylesheet using the special template tag:"
msgstr ""

#: ../source/presentations/session08.rst:1249
msgid "Reload http://localhost:8000/ and view the results of your work"
msgstr ""

#: ../source/presentations/session08.rst:1254
msgid "We now have a reasonable view of the posts of our blog on the front end"
msgstr ""

#: ../source/presentations/session08.rst:1256
msgid "And we have a way to create and categorize posts using the admin"
msgstr ""

#: ../source/presentations/session08.rst:1258
msgid "However, we lack a way to move between the two."
msgstr ""

#: ../source/presentations/session08.rst:1260
msgid "Let's add that ability next."
msgstr ""

#: ../source/presentations/session08.rst:1264
msgid "Global Navigation"
msgstr ""

#: ../source/presentations/session08.rst:1266
msgid "We'll start by adding a control bar to our ``base.html`` template:"
msgstr ""

#: ../source/presentations/session08.rst:1288
msgid ""
"When we set up our views, we used the ``render`` shortcut, which provides"
" a ``RequestContext``"
msgstr ""

#: ../source/presentations/session08.rst:1294
msgid "This gives us access to ``user`` in our templates"
msgstr ""

#: ../source/presentations/session08.rst:1296
msgid "It provides access to methods about the state and rights of that user"
msgstr ""

#: ../source/presentations/session08.rst:1298
msgid ""
"We can use these to conditionally display links or UI elements. Like only"
" showing the admin link to staff members."
msgstr ""

#: ../source/presentations/session08.rst:1304
msgid "Django also provides a reasonable set of views for login/logout."
msgstr ""

#: ../source/presentations/session08.rst:1309
msgid "The first step to using them is to hook them into a urlconf."
msgstr ""

#: ../source/presentations/session08.rst:1313
msgid "Add the following to ``mysite/urls.py``:"
msgstr ""

#: ../source/presentations/session08.rst:1334
msgid "We need to create a new ``login.html`` template in ``mysite/templates``:"
msgstr ""

#: ../source/presentations/session08.rst:1351
msgid "In a web application, submitting forms is potentially hazardous"
msgstr ""

#: ../source/presentations/session08.rst:1356
msgid "Data is being sent to our application from some remote place"
msgstr ""

#: ../source/presentations/session08.rst:1358
msgid ""
"If that data is going to alter the state of our application, we **must** "
"use POST"
msgstr ""

#: ../source/presentations/session08.rst:1361
msgid ""
"Even so, we are vulnerable to Cross-Site Request Forgery, a common attack"
" vector."
msgstr ""

#: ../source/presentations/session08.rst:1367
msgid "Django provides a convenient system to fight this."
msgstr ""

#: ../source/presentations/session08.rst:1372
msgid "In fact, for POST requests, it *requires* that you use it."
msgstr ""

#: ../source/presentations/session08.rst:1374
msgid "The Django middleware that does this is enabled by default."
msgstr ""

#: ../source/presentations/session08.rst:1376
#, python-format
msgid "All you need to do is include the ``{% csrf_token %}`` tag in your form."
msgstr ""

#: ../source/presentations/session08.rst:1381
msgid "In ``base.html`` make the following updates:"
msgstr ""

#: ../source/presentations/session08.rst:1397
msgid "Finally, in ``settings.py`` add the following:"
msgstr ""

#: ../source/presentations/session08.rst:1408
msgid ""
"In adding a login view, we've gotten a sneak peak at how forms work in "
"Django."
msgstr ""

#: ../source/presentations/session08.rst:1413
msgid ""
"However, learning more about them is beyond what we can achieve in this "
"session."
msgstr ""

#: ../source/presentations/session08.rst:1416
msgid ""
"The form system in Django is quite nice, however. I urge you to `read "
"more about it`_"
msgstr ""

#: ../source/presentations/session08.rst:1419
msgid ""
"In particular, you might want to pay attention to the documentation on "
"`Model Forms`_"
msgstr ""

#: ../source/presentations/session08.rst:1428
msgid "Ta-Daaaaaa!"
msgstr ""

#: ../source/presentations/session08.rst:1430
msgid "So, that's it.  We've created a workable, simple blog app in Django."
msgstr ""

#: ../source/presentations/session08.rst:1435
msgid ""
"If you fell behind at some point, the app as it now stands is in our "
"class resources as ``mysite_stage_3``."
msgstr ""

#: ../source/presentations/session08.rst:1438
msgid ""
"There's much more we could do with this app. And for homework, you'll do "
"some of it."
msgstr ""

#: ../source/presentations/session08.rst:1441
msgid ""
"Then next session, we'll work together as pairs to implement a simple "
"feature to extend the blog"
msgstr ""

#: ../source/presentations/session08.rst:1450
msgid ""
"For your homework this week, we'll fix one glaring problem with our blog "
"admin."
msgstr ""

#: ../source/presentations/session08.rst:1455
msgid ""
"As you created new categories and posts, and related them to each-other, "
"how did you feel about that work?"
msgstr ""

#: ../source/presentations/session08.rst:1458
msgid ""
"Although from a data perspective, the category model is the right place "
"for the ManytoMany relationship to posts, this leads to awkward usage in "
"the admin."
msgstr ""

#: ../source/presentations/session08.rst:1462
msgid ""
"It would be much easier if we could designate a category for a post *from"
" the Post admin*."
msgstr ""

#: ../source/presentations/session08.rst:1467
msgid "Your Assignment"
msgstr ""

#: ../source/presentations/session08.rst:1469
msgid ""
"You'll be reversing that relationship so that you can only add categories"
" to posts"
msgstr ""

#: ../source/presentations/session08.rst:1475
msgid "Take the following steps:"
msgstr ""

#: ../source/presentations/session08.rst:1477
msgid "Read the documentation about the `Django admin.`_"
msgstr ""

#: ../source/presentations/session08.rst:1478
msgid ""
"You'll need to create a customized `ModelAdmin`_ class for the ``Post`` "
"and ``Category`` models."
msgstr ""

#: ../source/presentations/session08.rst:1480
msgid ""
"And you'll need to create an `InlineModelAdmin`_ to represent Categories "
"on the Post admin view."
msgstr ""

#: ../source/presentations/session08.rst:1482
msgid ""
"Finally, you'll need to `exclude`_  the 'posts' field from the form in "
"your ``Category`` admin."
msgstr ""

#: ../source/presentations/session08.rst:1494
msgid ""
"All told, those changes should not require more than about 15 total lines"
" of code."
msgstr ""

#: ../source/presentations/session08.rst:1500
msgid ""
"The trick of course is reading and finding out which fifteen lines to "
"write."
msgstr ""

#: ../source/presentations/session08.rst:1503
msgid ""
"If you complete that task in less than 3-4 hours of work, consider "
"looking into other ways of customizing the admin."
msgstr ""

#: ../source/presentations/session08.rst:1511
msgid ""
"Change the admin index to say 'Categories' instead of 'Categorys'. (hint,"
" the way to change this has nothing to do with the admin)"
msgstr ""

#: ../source/presentations/session08.rst:1513
msgid "Add columns for the date fields to the list display of Posts."
msgstr ""

#: ../source/presentations/session08.rst:1514
msgid ""
"Display the created and modified dates for your posts when viewing them "
"in the admin."
msgstr ""

#: ../source/presentations/session08.rst:1516
msgid ""
"Add a column to the list display of Posts that shows the author.  For "
"more fun, make this a link that takes you to the admin page for that "
"user."
msgstr ""

#: ../source/presentations/session08.rst:1518
msgid ""
"For the biggest challenge, look into `admin actions`_ and add an action "
"to the Post admin that allows you to publish posts in bulk from the Post "
"list display"
msgstr ""

#: ../source/presentations/session09.rst:3
msgid "Session 09"
msgstr ""

#: ../source/presentations/session09.rst:12
msgid "Extending Django"
msgstr ""

#: ../source/presentations/session09.rst:16
msgid "Wherein we extend our Django blog app."
msgstr ""

#: ../source/presentations/session09.rst:20
msgid "Last Week"
msgstr ""

#: ../source/presentations/session09.rst:22
msgid "Last week, we created a nice, simple Django microblog application."
msgstr ""

#: ../source/presentations/session09.rst:27
msgid ""
"Over the week, as your homework, you made some modifications to improve "
"how it works."
msgstr ""

#: ../source/presentations/session09.rst:30
msgid "There's still quite a bit more we can do to improve this application."
msgstr ""

#: ../source/presentations/session09.rst:32
msgid "And today, that's what we are going to do."
msgstr ""

#: ../source/presentations/session09.rst:36
msgid "Preparation"
msgstr ""

#: ../source/presentations/session09.rst:38
msgid ""
"In order for this to work properly, we'll need to have a few things in "
"place."
msgstr ""

#: ../source/presentations/session09.rst:43
msgid ""
"**For the time being, all these actions should only be taken by one "
"partner**."
msgstr ""

#: ../source/presentations/session09.rst:46
msgid ""
"First, we'll start from a canonical copy of the microblog.  Make a fork "
"of the following repository to your github account::"
msgstr ""

#: ../source/presentations/session09.rst:51
msgid "Then, clone that repository to your local machine:"
msgstr ""

#: ../source/presentations/session09.rst:59
msgid "Connect to Your Partner"
msgstr ""

#: ../source/presentations/session09.rst:61
msgid ""
"Finally, you'll need to add your partner as a collaborator for your new "
"repository."
msgstr ""

#: ../source/presentations/session09.rst:67
msgid "Go to the *settings* for your repository."
msgstr ""

#: ../source/presentations/session09.rst:69
msgid ""
"Click the *collaborators* tab on the left side of the window (you'll need"
" to enter your github password)."
msgstr ""

#: ../source/presentations/session09.rst:72
msgid "Look up your partner by email address or github username."
msgstr ""

#: ../source/presentations/session09.rst:74
msgid "Add them."
msgstr ""

#: ../source/presentations/session09.rst:76
msgid "Then your partner can clone the repository to their desktop too."
msgstr ""

#: ../source/presentations/session09.rst:79
msgid "While You Work"
msgstr ""

#: ../source/presentations/session09.rst:81
msgid ""
"Now, when you switch roles during your work, here's the workflow you can "
"use:"
msgstr ""

#: ../source/presentations/session09.rst:88
msgid "The current driver commits all changes and pushes to their repository:"
msgstr ""

#: ../source/presentations/session09.rst:97
msgid "The new driver gets the changes:"
msgstr ""

#: ../source/presentations/session09.rst:103
msgid "The new driver continues working from where their partner left off."
msgstr ""

#: ../source/presentations/session09.rst:104
msgid "PROFIT....."
msgstr ""

#: ../source/presentations/session09.rst:109
msgid "Next week, we will deploy your Django application to a server."
msgstr ""

#: ../source/presentations/session09.rst:114
msgid ""
"To help illustrate the full set of tools at our disposal, we'll go a bit "
"overboard for this."
msgstr ""

#: ../source/presentations/session09.rst:117
msgid ""
"We'll be setting up an HTTP server, proxying to a WSGI server serving "
"your Django app."
msgstr ""

#: ../source/presentations/session09.rst:120
msgid "We'll do this all \"In the cloud\" using Amazon's `AWS`_ service."
msgstr ""

#: ../source/presentations/session09.rst:122
msgid "Before class starts, you'll need to accomplish a few non-programming tasks"
msgstr ""

#: ../source/presentations/session09.rst:127
msgid "Sign Up For AWS"
msgstr ""

#: ../source/presentations/session09.rst:129
msgid ""
"Begin by going to the `AWS homepage`_ and clicking on the large, yellow "
"button that reads \"Sign In to the Console\"."
msgstr ""

#: ../source/presentations/session09.rst:135
msgid ""
"On the sign-in page that appears, click the radio button for 'I am a new "
"user', fill in your email address, and then click through to begin the "
"sign-up process."
msgstr ""

#: ../source/presentations/session09.rst:139
msgid "You will be required to provide credit card information."
msgstr ""

#: ../source/presentations/session09.rst:141
msgid ""
"If you are still eligible for the AWS free tier, you will not incur any "
"charges for work you do in this class."
msgstr ""

#: ../source/presentations/session09.rst:148
msgid "Set Up an IAM User"
msgstr ""

#: ../source/presentations/session09.rst:150
msgid "Once you've signed up for an account take the following actions:"
msgstr ""

#: ../source/presentations/session09.rst:152
msgid ""
"`Create an IAM user`_ and place them in a group with Power User access. "
"(Search for PowerUser when selecting a policy for your group)."
msgstr ""

#: ../source/presentations/session09.rst:154
msgid "Set up Security Credentials for that IAM user."
msgstr ""

#: ../source/presentations/session09.rst:155
msgid ""
"Save these Security Credentials in a safe place so you can use them for "
"class."
msgstr ""

#: ../source/presentations/session09.rst:160
msgid "Prepare for Login"
msgstr ""

#: ../source/presentations/session09.rst:162
msgid "`Create a Keypair`_"
msgstr ""

#: ../source/presentations/session09.rst:164
msgid ""
"Choose the 'US West (Oregon)' region since it's geographically closest to"
" you.</li>"
msgstr ""

#: ../source/presentations/session09.rst:165
msgid "When you download your private key, save it to ~/.ssh/pk-aws.pem"
msgstr ""

#: ../source/presentations/session09.rst:166
msgid ""
"Make sure that the private key is secure and useable by doing the "
"following command"
msgstr ""

#: ../source/presentations/session09.rst:168
msgid "``$ chmod 400 ~/.ssh/pk-aws.pem``"
msgstr ""

#: ../source/presentations/session09.rst:170
msgid "`Create a custom security group`_"
msgstr ""

#: ../source/presentations/session09.rst:172
msgid "The security group should be named 'ssh-access'"
msgstr ""

#: ../source/presentations/session09.rst:173
msgid "Add one custom TCP rule * allow port 22 * allow addresses 0.0.0.0/0"
msgstr ""

#: ../source/presentations/session10.rst:3
msgid "Session 10"
msgstr ""

#: ../source/presentations/session10.rst:13
msgid "Deploying Django"
msgstr ""

#: ../source/presentations/session10.rst:18
msgid ""
"Over the last two sessions you've built and extended a simple Django "
"application."
msgstr ""

#: ../source/presentations/session10.rst:24
msgid ""
"Now it is time to deploy that application to a server so the world can "
"see it."
msgstr ""

#: ../source/presentations/session10.rst:27
msgid "Previously, we used Heroku to deploy a simple Pyramid application."
msgstr ""

#: ../source/presentations/session10.rst:29
msgid "We could do the same with Django, but we won't."
msgstr ""

#: ../source/presentations/session10.rst:31
msgid "Instead, we'll deploy to **A**\\ mazon **W**\\ eb **S**\\ ervices (AWS)"
msgstr ""

#: ../source/presentations/session10.rst:35
msgid "Choosing a Deployment Strategy"
msgstr ""

#: ../source/presentations/session10.rst:37
msgid "There are many many different ways to deploy a web application."
msgstr ""

#: ../source/presentations/session10.rst:42
msgid "And there are many many services offering platforms for deployment."
msgstr ""

#: ../source/presentations/session10.rst:44
msgid "How do you choose the right one for you?"
msgstr ""

#: ../source/presentations/session10.rst:46
msgid "In general there are a few rules of thumb to consider:"
msgstr ""

#: ../source/presentations/session10.rst:50
msgid "The more convenient the service, the less configurable it is."
msgstr ""

#: ../source/presentations/session10.rst:51
msgid "The less you pay for a service, the more work you have to do yourself."
msgstr ""

#: ../source/presentations/session10.rst:52
msgid "With great power comes great responsibility."
msgstr ""

#: ../source/presentations/session10.rst:56
msgid ""
"In choosing a service and a strategy, you'll want to ask yourself a few "
"questions:"
msgstr ""

#: ../source/presentations/session10.rst:64
msgid "What are the basic software components of my project?"
msgstr ""

#: ../source/presentations/session10.rst:65
msgid "How much control or customization of each component do I require?"
msgstr ""

#: ../source/presentations/session10.rst:66
msgid "What service supports all of my required components?"
msgstr ""

#: ../source/presentations/session10.rst:67
msgid "What service allows my required customizations?"
msgstr ""

#: ../source/presentations/session10.rst:68
msgid ""
"If no single service does everything I need, which could be wired "
"together?"
msgstr ""

#: ../source/presentations/session10.rst:71
msgid ""
"The answers to these questions will help to determine the correct choice "
"for you."
msgstr ""

#: ../source/presentations/session10.rst:76
msgid "We are going to ignore all these questions, and simply ask one question."
msgstr ""

#: ../source/presentations/session10.rst:81
msgid ""
"Which service will allow us to set up each layer in a full web "
"application stack so that we can learn how the stack works from front to "
"back?"
msgstr ""

#: ../source/presentations/session10.rst:84
msgid "The simplest answer to that question is **AWS**."
msgstr ""

#: ../source/presentations/session10.rst:86
msgid "Therefore, that's the service we will use today."
msgstr ""

#: ../source/presentations/session10.rst:89
msgid "Preparing for AWS Deployment"
msgstr ""

#: ../source/presentations/session10.rst:91
msgid "You've started out this week by signing up for AWS."
msgstr ""

#: ../source/presentations/session10.rst:96
msgid ""
"You've created a security group and a key pair to help with accessing any"
" servers we create."
msgstr ""

#: ../source/presentations/session10.rst:99
msgid ""
"You've also set up an IAM user and configured security credentials for "
"that user."
msgstr ""

#: ../source/presentations/session10.rst:102
msgid ""
"If we were to be automating our work today, we'd use those credentials to"
" allow the `boto`_ library to connect to AWS as that IAM user."
msgstr ""

#: ../source/presentations/session10.rst:105
msgid "Then you could `create or destroy resources`_ using that library."
msgstr ""

#: ../source/presentations/session10.rst:107
msgid ""
"Issues surrounding using that library on Windows prevent us from trying "
"that path tonight."
msgstr ""

#: ../source/presentations/session10.rst:112
msgid "Instead we'll be making a manual deployment using AWS."
msgstr ""

#: ../source/presentations/session10.rst:117
msgid ""
"This is always the first step to automation anyway, so this is an "
"important first step."
msgstr ""

#: ../source/presentations/session10.rst:120
msgid ""
"We'll begin by converting some aspects of our application to better "
"provide for security"
msgstr ""

#: ../source/presentations/session10.rst:123
msgid ""
"In preparation for that we will need to add a new package to our django "
"virtual environment."
msgstr ""

#: ../source/presentations/session10.rst:138
msgid ""
"This new package is an attempt to help Django get in line with a "
"principle called `12-factor`_."
msgstr ""

#: ../source/presentations/session10.rst:144
msgid ""
"The basic idea is that any data that your app uses for configuration that"
" is *external* to the app itself, should be separated from the app."
msgstr ""

#: ../source/presentations/session10.rst:147
msgid "The link about contains much more effective explanations, read it."
msgstr ""

#: ../source/presentations/session10.rst:149
msgid ""
"We've already done this to some degree with our Pyramid application, by "
"putting some configuration values into *environment variables*"
msgstr ""

#: ../source/presentations/session10.rst:152
msgid ""
"``dj-database-url`` allows us to do that with the configuration for our "
"database."
msgstr ""

#: ../source/presentations/session10.rst:160
msgid ""
"Open ``settings.py`` and replace the current DATABASES dictionary with "
"this:"
msgstr ""

#: ../source/presentations/session10.rst:173
msgid ""
"The default behavior of ``dj-database-url`` is to look for a "
"``DATABASE_URL`` variable in the environment."
msgstr ""

#: ../source/presentations/session10.rst:176
msgid "If it doesn't find that, it uses the value you provide for *default*."
msgstr ""

#: ../source/presentations/session10.rst:178
msgid ""
"It converts a `url-style`_ database connection string to the dictionary "
"Django expects."
msgstr ""

#: ../source/presentations/session10.rst:181
msgid "Here, we've set the default to be the same as what we had previously."
msgstr ""

#: ../source/presentations/session10.rst:187
msgid ""
"Another principle of the 12-factor philosophy is to keep the differences "
"between production and development to a minimum."
msgstr ""

#: ../source/presentations/session10.rst:193
msgid ""
"Again, in our Pyramid app we handled this with a ``requirements.txt`` "
"file."
msgstr ""

#: ../source/presentations/session10.rst:195
msgid "Here we will do the same."
msgstr ""

#: ../source/presentations/session10.rst:197
msgid ""
"At your command line, with the virtualenv active, run the following "
"command:"
msgstr ""

#: ../source/presentations/session10.rst:204
msgid "Then, add that file to your repository and commit the changes."
msgstr ""

#: ../source/presentations/session10.rst:206
msgid "At this point, we're about ready to begin working directly with AWS"
msgstr ""

#: ../source/presentations/session10.rst:209
msgid "Setting up An EC2 Instance"
msgstr ""

#: ../source/presentations/session10.rst:211
msgid ""
"Our first step is to create an EC2 (Elastic Compute Cloud) instance for "
"our application."
msgstr ""

#: ../source/presentations/session10.rst:217
msgid "Begin by opening the AWS homepage (http://aws.amazon.com)"
msgstr ""

#: ../source/presentations/session10.rst:219
msgid "Then click on the big yellow \"Sign in to the Console\" button"
msgstr ""

#: ../source/presentations/session10.rst:221
msgid ""
"Fill in your email, check \"I am a returning user...\" and supply your "
"password."
msgstr ""

#: ../source/presentations/session10.rst:224
msgid "When the page loads, you are viewing the AWS Console."
msgstr ""

#: ../source/presentations/session10.rst:226
msgid ""
"If you don't see a big list of services in that first page, click on "
"'Services' in the black header."
msgstr ""

#: ../source/presentations/session10.rst:229
msgid "From the list of services, click on ``EC2``."
msgstr ""

#: ../source/presentations/session10.rst:233
msgid ""
"The page that loads is the management console for EC2 resources.  You "
"used it to create your security group and key pair."
msgstr ""

#: ../source/presentations/session10.rst:239
msgid "Click the large blue \"Launch Instance\" button to start a new instance."
msgstr ""

#: ../source/presentations/session10.rst:241
msgid "You should see a list of types of operating system listed."
msgstr ""

#: ../source/presentations/session10.rst:243
msgid "If you don't click on *quick start* at the left."
msgstr ""

#: ../source/presentations/session10.rst:245
msgid "In the list, find \"Ubuntu Server 14.04 LTS\"."
msgstr ""

#: ../source/presentations/session10.rst:247
msgid ""
"Click on 'Select' to begin building an instance using that operating "
"system."
msgstr ""

#: ../source/presentations/session10.rst:252
msgid ""
"The next page of the launch wizard allows you to choose how much CPU "
"power and RAM your machine will have."
msgstr ""

#: ../source/presentations/session10.rst:258
msgid ""
"There are only two types of instance that are in the free tier, and one "
"is now deprecated."
msgstr ""

#: ../source/presentations/session10.rst:261
msgid ""
"Select the *t2.micro* instance by clicking the checkbox to the left of "
"that row (it may already be selected for you)."
msgstr ""

#: ../source/presentations/session10.rst:264
msgid ""
"Below the table of instance types, find and click on \"Next: configure "
"instance details\""
msgstr ""

#: ../source/presentations/session10.rst:269
msgid ""
"Click through the next two steps until you reach \"Configure Security "
"Group\""
msgstr ""

#: ../source/presentations/session10.rst:274
msgid ""
"Here, click the \"select an existing security group\" button, and pick "
"your ssh-access group."
msgstr ""

#: ../source/presentations/session10.rst:277
msgid ""
"This group acts as a control for a *firewall* which restricts network "
"access to your new instance."
msgstr ""

#: ../source/presentations/session10.rst:280
msgid ""
"You've configured that firewall to allow any machine to talk to your "
"instance, but only on port 22 (SSH)."
msgstr ""

#: ../source/presentations/session10.rst:283
msgid "Finish by clicking \"Review and Launch\""
msgstr ""

#: ../source/presentations/session10.rst:285
msgid "Then click on \"Launch\" to start the instance."
msgstr ""

#: ../source/presentations/session10.rst:289
msgid ""
"When you click \"Launch\" you are required to choose a key pair to "
"control ssh access to your new machine."
msgstr ""

#: ../source/presentations/session10.rst:295
msgid ""
"Without this key pair, you have no way to access the server, and you must"
" destroy it and create a new one."
msgstr ""

#: ../source/presentations/session10.rst:298
msgid "Select your ``pk-aws`` pair from the list of existing key pairs."
msgstr ""

#: ../source/presentations/session10.rst:300
msgid ""
"Then, check the box that indicates you have the private key and click "
"\"Launch Instance\"."
msgstr ""

#: ../source/presentations/session10.rst:303
msgid "It will take a few minutes for the new machine to initialize and be ready."
msgstr ""

#: ../source/presentations/session10.rst:306
msgid "Accessing Your Instance"
msgstr ""

#: ../source/presentations/session10.rst:308
msgid ""
"Once the machine indicates it is \"running\" you are ready to access that"
" machine."
msgstr ""

#: ../source/presentations/session10.rst:314
msgid "ssh into that machine:"
msgstr ""

#: ../source/presentations/session10.rst:320
msgid "You will need to indicate that you trust this connection."
msgstr ""

#: ../source/presentations/session10.rst:322
msgid "You are now logged in to the server as the default user."
msgstr ""

#: ../source/presentations/session10.rst:324
msgid "AWS sets this user up with the ability to run commands using *sudo*"
msgstr ""

#: ../source/presentations/session10.rst:326
msgid ""
"You'll begin by updating the OS package manager so you are ensured of "
"having the latest versions of any software you install:"
msgstr ""

#: ../source/presentations/session10.rst:334
msgid "Deployment Layer 1: Web Server"
msgstr ""

#: ../source/presentations/session10.rst:336
msgid "In our deployment stack, the frontmost facing layer is the Web Server."
msgstr ""

#: ../source/presentations/session10.rst:341
msgid ""
"This software is responsible for receiving requests from clients' "
"browsers."
msgstr ""

#: ../source/presentations/session10.rst:343
msgid ""
"It will also handle serving static resources in order to relieve Django "
"of that burden."
msgstr ""

#: ../source/presentations/session10.rst:346
msgid ""
"If you are using ``https``, it's also a good place to handle terminating "
"an SSL connection."
msgstr ""

#: ../source/presentations/session10.rst:349
msgid "Begin by using the Ubuntu package manager to install ``nginx``:"
msgstr ""

#: ../source/presentations/session10.rst:357
msgid ""
"Like many other packages installed by ``apt-get``, nginx is set up as a "
"*service*"
msgstr ""

#: ../source/presentations/session10.rst:360
msgid "You can check the status of the service:"
msgstr ""

#: ../source/presentations/session10.rst:366
msgid "You can start and stop the server:"
msgstr ""

#: ../source/presentations/session10.rst:375
msgid ""
"Default configuration for nginx lives in ``/etc/nginx``.  Let's look at "
"three files there in particular:"
msgstr ""

#: ../source/presentations/session10.rst:378
msgid "/etc/nginx/nginx.conf (controls behavior of the whole server)"
msgstr ""

#: ../source/presentations/session10.rst:379
msgid "/etc/nginx/sites-available/default (controls a single 'site')"
msgstr ""

#: ../source/presentations/session10.rst:380
msgid "/etc/nginx/sites-enabled/default (activates a single 'site')"
msgstr ""

#: ../source/presentations/session10.rst:385
msgid "Check your results by loading your public DNS name in a browser"
msgstr ""

#: ../source/presentations/session10.rst:390
msgid "you should see this, do you?"
msgstr ""

#: ../source/presentations/session10.rst:396
msgid "Add port 80 to your security group.  Then reload."
msgstr ""

#: ../source/presentations/session10.rst:399
msgid "Deployment Layer 3: Database"
msgstr ""

#: ../source/presentations/session10.rst:401
msgid "In order to deploy our database, we'll need to install some more software"
msgstr ""

#: ../source/presentations/session10.rst:406
msgid "Use ``apt-get istall`` to add each of the following packages:"
msgstr ""

#: ../source/presentations/session10.rst:408
msgid "build-essential"
msgstr ""

#: ../source/presentations/session10.rst:409
msgid "python-dev"
msgstr ""

#: ../source/presentations/session10.rst:410
msgid "python-pip"
msgstr ""

#: ../source/presentations/session10.rst:411
msgid "python-psycopg2"
msgstr ""

#: ../source/presentations/session10.rst:412
msgid "postgresql-client"
msgstr ""

#: ../source/presentations/session10.rst:413
msgid "git"
msgstr ""

#: ../source/presentations/session10.rst:417
msgid ""
"You *can* set up postgres directly on the machine you just built, but "
"that's no fun."
msgstr ""

#: ../source/presentations/session10.rst:422
msgid "Let's use RDS, the AWS service for providing databases."
msgstr ""

#: ../source/presentations/session10.rst:424
msgid "From 'services' in the header, select RDS."
msgstr ""

#: ../source/presentations/session10.rst:426
msgid "In the page that appears, click on 'Launch a DB Instance'"
msgstr ""

#: ../source/presentations/session10.rst:428
msgid "From the selection of database types, choose PostgreSQL."
msgstr ""

#: ../source/presentations/session10.rst:430
msgid "Click **no** to indicate that you don't need a multi-AZ database."
msgstr ""

#: ../source/presentations/session10.rst:434
msgid "On the database details page, You have a bit of work to do."
msgstr ""

#: ../source/presentations/session10.rst:439
msgid "First, select ``db.t2.micro`` as the instance type."
msgstr ""

#: ../source/presentations/session10.rst:441
msgid "Then, for multi-AZ deployment, select **no** (again)"
msgstr ""

#: ../source/presentations/session10.rst:443
msgid "Finally, provide values for the last four inputs"
msgstr ""

#: ../source/presentations/session10.rst:445
msgid ""
"The database identifier must be unique to your account and region, use "
"\"uwpce\"."
msgstr ""

#: ../source/presentations/session10.rst:448
msgid "For the master username, use \"awsuser\""
msgstr ""

#: ../source/presentations/session10.rst:450
msgid "Provide a password and repeat it to prove you can"
msgstr ""

#: ../source/presentations/session10.rst:454
msgid ""
"For Advanced Settings, make sure your DB is in the same availability zone"
" as your EC2 instance."
msgstr ""

#: ../source/presentations/session10.rst:460
msgid ""
"Also ensure that you select the same security group you used for your EC2"
" instance from the list of VPC security groups."
msgstr ""

#: ../source/presentations/session10.rst:463
msgid "Enter a database name, use \"djangodb\""
msgstr ""

#: ../source/presentations/session10.rst:465
msgid "Finally, click \"Launch DB Instance\""
msgstr ""

#: ../source/presentations/session10.rst:467
msgid ""
"While the database launches, let's return to setting up our application "
"on EC2"
msgstr ""

#: ../source/presentations/session10.rst:471
msgid "Deployment Layer 2: Application"
msgstr ""

#: ../source/presentations/session10.rst:473
msgid ""
"Back on the EC2 instance, in your ssh terminal, clone your django "
"application:"
msgstr ""

#: ../source/presentations/session10.rst:482
msgid "pip install the requirements for your app::"
msgstr ""

#: ../source/presentations/session10.rst:489
msgid ""
"Finally, export a system environment variable called DATABASE_URL with "
"the following format::"
msgstr ""

#: ../source/presentations/session10.rst:501
msgid "You can now test access with dbshell:"
msgstr ""

#: ../source/presentations/session10.rst:507
msgid "Work through any issues in getting that to work"
msgstr ""

#: ../source/presentations/session10.rst:511
msgid "Once working, we can point nginx at the instance:"
msgstr ""

#: ../source/presentations/session10.rst:521
msgid "Add the following content:"
msgstr ""

#: ../source/presentations/session10.rst:540
msgid "Save that file and restart nginx:"
msgstr ""

#: ../source/presentations/session10.rst:546
msgid ""
"Then reload your aws instance in a web browser, you should see a BAD "
"GATEWAY error"
msgstr ""

#: ../source/presentations/session10.rst:549
msgid "now start django and then reload:"
msgstr ""

#: ../source/presentations/session10.rst:555
msgid ""
"This works, but as soon as you exit your ssh terminal, django will quit."
"  We want a long-running process we can leave behind."
msgstr ""

#: ../source/presentations/session10.rst:560
msgid "Deployment Layer 4: Permanence"
msgstr ""

#: ../source/presentations/session10.rst:562
msgid "Install gunicorn on the server"
msgstr ""

#: ../source/presentations/session10.rst:568
msgid ""
"Back on your own machine, create ``mysite/production.py`` and add the "
"following content:"
msgstr ""

#: ../source/presentations/session10.rst:580
msgid "Add the file to your repository and commit your changes."
msgstr ""

#: ../source/presentations/session10.rst:582
msgid "Then pull the changes back on your EC2 instance"
msgstr ""

#: ../source/presentations/session10.rst:586
msgid ""
"Update nginx config (/etc/nginx/sites-available/default) to serve static "
"files:"
msgstr ""

#: ../source/presentations/session10.rst:601
msgid "Then set an environment variable to point at production settings::"
msgstr ""

#: ../source/presentations/session10.rst:605
msgid "Now, run the site using gunicorn::"
msgstr ""

#: ../source/presentations/session10.rst:609
msgid "Wahooo!"
msgstr ""

#: ../source/presentations/session10.rst:611
msgid "But still not great, because nothing is monitoring this process."
msgstr ""

#: ../source/presentations/session10.rst:613
msgid "There's no way to keep track of how it is doing."
msgstr ""

#: ../source/presentations/session10.rst:615
msgid "We can do better.  First, let's kill the processes that spawned::"
msgstr ""

#: ../source/presentations/session10.rst:621
msgid ""
"We can use a process manager to run the gunicorn command, and track the "
"results."
msgstr ""

#: ../source/presentations/session10.rst:623
msgid "Using linux `upstart`_ is relatively simple."
msgstr ""

#: ../source/presentations/session10.rst:625
msgid "Put the following in ``/etc/init/djangoblog.conf``"
msgstr ""

#: ../source/presentations/session10.rst:646
msgid ""
"Once you've completed that, you will find that you can use the Linux "
"``service`` command to control the gunicorn process."
msgstr ""

#: ../source/presentations/session10.rst:652
msgid "Use the following commands::"
msgstr ""

#: ../source/presentations/session10.rst:659
msgid ""
"If you see an error message about an ``unknown job`` when you run one of "
"those commands, it means you have an error in your configuration file."
msgstr ""

#: ../source/presentations/session10.rst:662
msgid "Find the error with this command::"
msgstr ""

#: ../source/presentations/session10.rst:666
msgid "And that's it!"
msgstr ""

#: ../source/presentations/venv_intro.rst:6
msgid "An Introduction To Venv"
msgstr ""

#: ../source/presentations/venv_intro.rst:13
msgid ""
"In this tutorial you'll learn a bit about the `pyvenv`_ command and the "
"``venv`` module that powers it. You'll learn how to create self-contained"
" Python environments in order to practice safe development and manage "
"package dependency conflicts."
msgstr ""

#: ../source/presentations/venv_intro.rst:19
msgid "Working with Virtual Environments"
msgstr ""

#: ../source/presentations/venv_intro.rst:23
msgid "For every package"
msgstr ""

#: ../source/presentations/venv_intro.rst:24
msgid "installed in the"
msgstr ""

#: ../source/presentations/venv_intro.rst:25
msgid "system Python, the"
msgstr ""

#: ../source/presentations/venv_intro.rst:26
msgid "gods kill a kitten"
msgstr ""

#: ../source/presentations/venv_intro.rst:0
msgid "- me"
msgstr ""

#: ../source/presentations/venv_intro.rst:34
msgid "Why Virtual Environments?"
msgstr ""

#: ../source/presentations/venv_intro.rst:38
msgid ""
"You will need to install packages that aren't in the Python standard "
"Library"
msgstr ""

#: ../source/presentations/venv_intro.rst:40
msgid ""
"You often need to install *different* versions of the *same* library for "
"different projects"
msgstr ""

#: ../source/presentations/venv_intro.rst:42
msgid ""
"Conflicts arising from having the wrong version of a dependency installed"
" can cause long-term nightmares"
msgstr ""

#: ../source/presentations/venv_intro.rst:44
msgid "Use `pyvenv`_ ..."
msgstr ""

#: ../source/presentations/venv_intro.rst:45
msgid "**Always**"
msgstr ""

#: ../source/presentations/venv_intro.rst:50
msgid "Creating a Venv"
msgstr ""

#: ../source/presentations/venv_intro.rst:52
msgid "Since version 3.3, Python has come with a built-in ``venv`` module."
msgstr ""

#: ../source/presentations/venv_intro.rst:57
msgid "To use the module, you can run it using your Python 3 executable:"
msgstr ""

#: ../source/presentations/venv_intro.rst:63
msgid "On Windows you'll need something a bit different:"
msgstr ""

#: ../source/presentations/venv_intro.rst:69
msgid "Unless you have the Python executable in your path, in which case this:"
msgstr ""

#: ../source/presentations/venv_intro.rst:75
msgid ""
"Your Python 3 executable may be ``python3``, please substitute that if "
"required"
msgstr ""

#: ../source/presentations/venv_intro.rst:78
msgid ""
"Depending on how you installed Python (and on your operating system) you "
"may also have a ``pyvenv`` command available in your PATH. You can use it"
" like so:"
msgstr ""

#: ../source/presentations/venv_intro.rst:87
msgid ""
"In any of these command forms, the name of the new virtual environment "
"(``my_env``) is arbitrary."
msgstr ""

#: ../source/presentations/venv_intro.rst:93
msgid ""
"I suggest that you name virtual environments to match the project for "
"which the environment is to be used."
msgstr ""

#: ../source/presentations/venv_intro.rst:96
msgid ""
"I also suggest that you keep your virtual environments *in the same "
"directory* as the project code you are writing."
msgstr ""

#: ../source/presentations/venv_intro.rst:99
msgid ""
"Be aware that ``venv`` can be sensitive to path names that contain "
"spaces. Please make sure that the entire path to your working directory "
"does not contain any spaces just to be safe."
msgstr ""

#: ../source/presentations/venv_intro.rst:105
msgid "Let's make one for demonstration purposes:"
msgstr ""

#: ../source/presentations/venv_intro.rst:116
msgid "When you ran that command, a couple of things took place:"
msgstr ""

#: ../source/presentations/venv_intro.rst:120
msgid "A new directory with your requested name was created"
msgstr ""

#: ../source/presentations/venv_intro.rst:121
msgid ""
"A new Python executable was created in <ENV>/bin (<ENV>/Scripts on "
"Windows)"
msgstr ""

#: ../source/presentations/venv_intro.rst:122
msgid ""
"The new Python was cloned from your system Python (where virtualenv was "
"installed)"
msgstr ""

#: ../source/presentations/venv_intro.rst:124
msgid "The new Python was isolated from any libraries installed in the old Python"
msgstr ""

#: ../source/presentations/venv_intro.rst:125
msgid "Setuptools was installed so you have ``easy_install`` for this new python"
msgstr ""

#: ../source/presentations/venv_intro.rst:126
msgid "Pip was installed so you have ``pip`` for this new python"
msgstr ""

#: ../source/presentations/venv_intro.rst:129
msgid "Activation"
msgstr ""

#: ../source/presentations/venv_intro.rst:131
msgid ""
"Every virtual environment you create contains an executable Python "
"command."
msgstr ""

#: ../source/presentations/venv_intro.rst:136
msgid ""
"If you do a quick check to see which Python executable is found by your "
"terminal, you'll see that it is not the one:"
msgstr ""

#: ../source/presentations/venv_intro.rst:146
msgid "in powershell:"
msgstr ""

#: ../source/presentations/venv_intro.rst:153
msgid "You can execute the new Python by explicitly pointing to it:"
msgstr ""

#: ../source/presentations/venv_intro.rst:162
msgid "But that's tedious and hard to remember."
msgstr ""

#: ../source/presentations/venv_intro.rst:167
msgid "Instead, ``activate`` your virtual environment using a shell command:"
msgstr ""

#: ../source/presentations/venv_intro.rst:170
msgid "Platform"
msgstr ""

#: ../source/presentations/venv_intro.rst:170
msgid "Shell"
msgstr ""

#: ../source/presentations/venv_intro.rst:170
msgid "Activation Command"
msgstr ""

#: ../source/presentations/venv_intro.rst:172
msgid "Posix"
msgstr ""

#: ../source/presentations/venv_intro.rst:172
msgid "bash/zsh"
msgstr ""

#: ../source/presentations/venv_intro.rst:172
msgid "``$ source <venv>/bin/activate``"
msgstr ""

#: ../source/presentations/venv_intro.rst:174
msgid "fish"
msgstr ""

#: ../source/presentations/venv_intro.rst:174
msgid "``$ . <venv>/bin/activate.fish``"
msgstr ""

#: ../source/presentations/venv_intro.rst:176
msgid "csh/tcsh"
msgstr ""

#: ../source/presentations/venv_intro.rst:176
msgid "``$ source <venv>/bin/activate.csh``"
msgstr ""

#: ../source/presentations/venv_intro.rst:178
msgid "Windows"
msgstr ""

#: ../source/presentations/venv_intro.rst:178
msgid "cmd.exe"
msgstr ""

#: ../source/presentations/venv_intro.rst:178
msgid "``C:> <venv>/Scripts/activate.bat``"
msgstr ""

#: ../source/presentations/venv_intro.rst:180
msgid "powershell"
msgstr ""

#: ../source/presentations/venv_intro.rst:180
msgid "``PS C:> <venv>/Scripts/Activate.ps1``"
msgstr ""

#: ../source/presentations/venv_intro.rst:185
msgid ""
"Notice that when a virtualenv is *active* you can see it in your command "
"prompt:"
msgstr ""

#: ../source/presentations/venv_intro.rst:195
msgid ""
"So long as the virtualenv is *active* the ``python`` executable that will"
" be used will be the new one in your ``demoenv``."
msgstr ""

#: ../source/presentations/venv_intro.rst:199
msgid "Installing Packages"
msgstr ""

#: ../source/presentations/venv_intro.rst:201
msgid ""
"Since ``pip`` is also installed, the ``pip`` that is used to install new "
"software will also be the one in ``demoenv``."
msgstr ""

#: ../source/presentations/venv_intro.rst:212
msgid ""
"This means that using these tools to install packages will install them "
"*into your virtual environment only*"
msgstr ""

#: ../source/presentations/venv_intro.rst:215
msgid "The are not installed into the system Python."
msgstr ""

#: ../source/presentations/venv_intro.rst:217
msgid "Let's see this in action."
msgstr ""

#: ../source/presentations/venv_intro.rst:221
msgid "We'll install a package called ``docutils``"
msgstr ""

#: ../source/presentations/venv_intro.rst:226
msgid "It provides tools for creating documentation using ReStructuredText"
msgstr ""

#: ../source/presentations/venv_intro.rst:228
msgid "Install it using pip (while your virtualenv is active):"
msgstr ""

#: ../source/presentations/venv_intro.rst:244
msgid ""
"And now, when we fire up our Python interpreter, the docutils package is "
"available to us:"
msgstr ""

#: ../source/presentations/venv_intro.rst:261
msgid ""
"Like some other Python libraries, the ``docutils`` package provides a "
"number of executable scripts when it is installed."
msgstr ""

#: ../source/presentations/venv_intro.rst:267
msgid "You can see these in the ``bin`` directory inside your virtualenv:"
msgstr ""

#: ../source/presentations/venv_intro.rst:278
msgid ""
"These scripts are set up to execute using the Python with which they were"
" built."
msgstr ""

#: ../source/presentations/venv_intro.rst:281
msgid ""
"Running these scripts *from this location* will use the Python executable"
" in your virtualenv, *even if that virtualenv is not active*!"
msgstr ""

#: ../source/presentations/venv_intro.rst:285
msgid "Deactivation"
msgstr ""

#: ../source/presentations/venv_intro.rst:287
msgid ""
"So you've got a virtual environment created and activated so you can work"
" with it."
msgstr ""

#: ../source/presentations/venv_intro.rst:293
msgid ""
"Eventually you'll need to stop working with this ``venv`` and switch to "
"another"
msgstr ""

#: ../source/presentations/venv_intro.rst:296
msgid ""
"It's a good idea to keep a separate ``venv`` for every project you work "
"on."
msgstr ""

#: ../source/presentations/venv_intro.rst:299
msgid ""
"When a ``venv`` is active, all you have to do is use the ``deactivate`` "
"command:"
msgstr ""

#: ../source/presentations/venv_intro.rst:308
msgid ""
"Note that your shell prompt returns to normal, and now the executable "
"Python found when you check ``python`` is the system one again."
msgstr ""

#: ../source/presentations/venv_intro.rst:314
msgid ""
"The final advantage that ``venv`` offers you as a developer is the "
"ability to easily remove a batch of installed Python software from your "
"system."
msgstr ""

#: ../source/presentations/venv_intro.rst:320
msgid ""
"Consider a situation where you installed a library that breaks your "
"Python (it happens)"
msgstr ""

#: ../source/presentations/venv_intro.rst:323
msgid ""
"If you are working in your system Python, you now have to figure out what"
" that package installed"
msgstr ""

#: ../source/presentations/venv_intro.rst:326
msgid "You have to figure out where it is"
msgstr ""

#: ../source/presentations/venv_intro.rst:328
msgid "And you have to go clean it out manually."
msgstr ""

#: ../source/presentations/venv_intro.rst:330
msgid ""
"With ``venv`` you simply remove the directory ``venv`` created when you "
"started out."
msgstr ""

#: ../source/presentations/venv_intro.rst:335
msgid "Let's do that with our ``demoenv``:"
msgstr ""

#: ../source/presentations/venv_intro.rst:344
msgid "And that's it."
msgstr ""

#: ../source/presentations/venv_intro.rst:346
msgid ""
"The entire environment and all the packages you installed into it are now"
" gone."
msgstr ""

#: ../source/presentations/venv_intro.rst:349
msgid "There are no traces left to pollute your world."
msgstr ""

